from ..ast import arith_ast

from ..ast import arith_ast
from ..ast.arith_ast import *

import src.ast.bool_ast as bool_ast
from src.lexer.bool_lexer import *

def p_expr_uminus(p):
    'expression : "-" expression %prec UMINUS'
    p[0] = -p[2]

def p_expression_num(p):
    'expression : NUMBER'
    p[0] = generator_arith.NumberExpression(p[1])

def p_expression_bool(p):
    ''' expression : BOOL'''
    p[0] = gen.BoolValueExpression(p[1])

def p_expression_unary_operators_not(p):
    '''expression : NOT expression
    '''
    p[0] = gen.NotBoolExpression(p[2])


def p_expression_binary_operators_arith(p):
    '''expression :   expression "+" expression
                    | expression "-" expression
                    | expression '*' expression
                    | expression '/' expression
    '''
    match p[2]:
        case "+"   : p[0] = PlusExpression(p[1],p[3]) 
        case "-"   : p[0] = MinusExpression(p[1],p[3]) 
        case "*"   : p[0] = TimesExpression(p[1],p[3]) 
        case "/"   : p[0] = DivideExpression(p[1],p[3]) 
        case _ : print("STH WROMG")


def p_expression_binary_operators_bool(p):
    '''expression :   expression AND expression
                    | expression EQ expression
                    | expression '=' expression
                    | expression '>' expression
                    | expression '<' expression
                    | expression GE expression
                    | expression LE expression
                    | expression NEQS expression
                    | expression OR expression
                    | expression NAND expression
    '''
    lowerp2 = p[2].lower()
    match lowerp2:
        case "and"      : p[0] = gen.AndExpression(p[1],p[3]) 
        case "eqcomp"   : p[0] = gen.EqCompExpression(p[1],p[3]) 
        case "="        : p[0] = gen.EqExpression(p[1],p[3]) 
        case ">="       : p[0] = gen.GeExpression(p[1],p[3]) 
        case ">"        : p[0] = gen.GtExpression(p[1],p[3]) 
        case "<="       : p[0] = gen.LeExpression(p[1],p[3]) 
        case "!="       : p[0] = gen.NotEqCompExpression(p[1],p[3]) 
        case "<"        : p[0] = gen.LtExpression(p[1],p[3]) 
        case "or"       : p[0] = gen.OrExpression(p[1],p[3]) 
        case "nand"     : p[0] = gen.NandExpression(p[1],p[3]) 




