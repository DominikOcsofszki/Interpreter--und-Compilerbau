Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    array
    list

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> ID lambda expression
Rule 6     expression -> { sequence }
Rule 7     expression -> expression and expression
Rule 8     expression -> expression eq expression
Rule 9     expression -> expression = expression
Rule 10    expression -> expression > expression
Rule 11    expression -> expression < expression
Rule 12    expression -> expression ge expression
Rule 13    expression -> expression le expression
Rule 14    expression -> expression neqs expression
Rule 15    expression -> expression or expression
Rule 16    expression -> expression nand expression
Rule 17    expression -> string
Rule 18    expression -> letrec ID assign expression in expression
Rule 19    expression -> ID assign expression
Rule 20    expression -> - expression
Rule 21    expression -> import ID
Rule 22    sequence -> sequence ; expression
Rule 23    sequence -> expression
Rule 24    id_list -> expression , id_list
Rule 25    id_list -> expression
Rule 26    expression -> char
Rule 27    expression -> if expression then expression
Rule 28    expression -> expression + expression
Rule 29    expression -> expression - expression
Rule 30    expression -> expression * expression
Rule 31    expression -> expression / expression
Rule 32    expression -> [ id_list ]
Rule 33    expression -> if expression then expression else expression
Rule 34    expression -> ID [ NUMBER ]
Rule 35    expression -> ( id_list ) lambda expression
Rule 36    expression -> not expression
Rule 37    expression -> loop expression do expression
Rule 38    expression -> ( id_list )
Rule 39    expression -> NUMBER
Rule 40    expression -> ID ( id_list )
Rule 41    expression -> BOOL
Rule 42    expression -> ( expression )
Rule 43    expression -> for expression ; expression ; expression do expression
Rule 44    expression -> while expression do expression

Terminals, with rules where they appear

(                    : 35 38 40 42
)                    : 35 38 40 42
*                    : 30
+                    : 28
,                    : 24
-                    : 20 29
/                    : 31
;                    : 22 43 43
<                    : 11
=                    : 9
>                    : 10
BOOL                 : 41
ID                   : 2 3 4 4 5 18 19 21 34 40
NUMBER               : 34 39
[                    : 32 34
]                    : 32 34
and                  : 7
array                : 
as                   : 4
assign               : 2 18 19
char                 : 26
do                   : 37 43 44
else                 : 33
eq                   : 8
error                : 
float                : 1
for                  : 43
ge                   : 12
if                   : 27 33
import               : 4 21
in                   : 2 18
lambda               : 5 35
le                   : 13
letrec               : 18
list                 : 
local                : 2
loop                 : 37
nand                 : 16
neqs                 : 14
not                  : 36
or                   : 15
string               : 17
then                 : 27 33
while                : 44
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

expression           : 2 2 5 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 18 18 19 20 22 23 24 25 27 27 28 28 29 29 30 30 31 31 33 33 33 35 36 37 37 42 43 43 43 43 44 44 0
id_list              : 24 32 35 38 40
sequence             : 6 22

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    ,               reduce using rule 1 (expression -> float .)
    ]               reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 34


state 4

    (3) expression -> ID .
    (5) expression -> ID . lambda expression
    (19) expression -> ID . assign expression
    (34) expression -> ID . [ NUMBER ]
    (40) expression -> ID . ( id_list )

    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    ,               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    lambda          shift and go to state 35
    assign          shift and go to state 36
    [               shift and go to state 37
    (               shift and go to state 38


state 5

    (4) expression -> import . ID as ID
    (21) expression -> import . ID

    ID              shift and go to state 39


state 6

    (6) expression -> { . sequence }
    (22) sequence -> . sequence ; expression
    (23) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    sequence                       shift and go to state 40
    expression                     shift and go to state 41

state 7

    (17) expression -> string .

    and             reduce using rule 17 (expression -> string .)
    eq              reduce using rule 17 (expression -> string .)
    =               reduce using rule 17 (expression -> string .)
    >               reduce using rule 17 (expression -> string .)
    <               reduce using rule 17 (expression -> string .)
    ge              reduce using rule 17 (expression -> string .)
    le              reduce using rule 17 (expression -> string .)
    neqs            reduce using rule 17 (expression -> string .)
    or              reduce using rule 17 (expression -> string .)
    nand            reduce using rule 17 (expression -> string .)
    +               reduce using rule 17 (expression -> string .)
    -               reduce using rule 17 (expression -> string .)
    *               reduce using rule 17 (expression -> string .)
    /               reduce using rule 17 (expression -> string .)
    $end            reduce using rule 17 (expression -> string .)
    }               reduce using rule 17 (expression -> string .)
    ;               reduce using rule 17 (expression -> string .)
    then            reduce using rule 17 (expression -> string .)
    ,               reduce using rule 17 (expression -> string .)
    ]               reduce using rule 17 (expression -> string .)
    )               reduce using rule 17 (expression -> string .)
    do              reduce using rule 17 (expression -> string .)
    in              reduce using rule 17 (expression -> string .)
    else            reduce using rule 17 (expression -> string .)


state 8

    (18) expression -> letrec . ID assign expression in expression

    ID              shift and go to state 42


state 9

    (20) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 43

state 10

    (26) expression -> char .

    and             reduce using rule 26 (expression -> char .)
    eq              reduce using rule 26 (expression -> char .)
    =               reduce using rule 26 (expression -> char .)
    >               reduce using rule 26 (expression -> char .)
    <               reduce using rule 26 (expression -> char .)
    ge              reduce using rule 26 (expression -> char .)
    le              reduce using rule 26 (expression -> char .)
    neqs            reduce using rule 26 (expression -> char .)
    or              reduce using rule 26 (expression -> char .)
    nand            reduce using rule 26 (expression -> char .)
    +               reduce using rule 26 (expression -> char .)
    -               reduce using rule 26 (expression -> char .)
    *               reduce using rule 26 (expression -> char .)
    /               reduce using rule 26 (expression -> char .)
    $end            reduce using rule 26 (expression -> char .)
    }               reduce using rule 26 (expression -> char .)
    ;               reduce using rule 26 (expression -> char .)
    then            reduce using rule 26 (expression -> char .)
    ,               reduce using rule 26 (expression -> char .)
    ]               reduce using rule 26 (expression -> char .)
    )               reduce using rule 26 (expression -> char .)
    do              reduce using rule 26 (expression -> char .)
    in              reduce using rule 26 (expression -> char .)
    else            reduce using rule 26 (expression -> char .)


state 11

    (27) expression -> if . expression then expression
    (33) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 44

state 12

    (32) expression -> [ . id_list ]
    (24) id_list -> . expression , id_list
    (25) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    id_list                        shift and go to state 45
    expression                     shift and go to state 46

state 13

    (39) expression -> NUMBER .

    and             reduce using rule 39 (expression -> NUMBER .)
    eq              reduce using rule 39 (expression -> NUMBER .)
    =               reduce using rule 39 (expression -> NUMBER .)
    >               reduce using rule 39 (expression -> NUMBER .)
    <               reduce using rule 39 (expression -> NUMBER .)
    ge              reduce using rule 39 (expression -> NUMBER .)
    le              reduce using rule 39 (expression -> NUMBER .)
    neqs            reduce using rule 39 (expression -> NUMBER .)
    or              reduce using rule 39 (expression -> NUMBER .)
    nand            reduce using rule 39 (expression -> NUMBER .)
    +               reduce using rule 39 (expression -> NUMBER .)
    -               reduce using rule 39 (expression -> NUMBER .)
    *               reduce using rule 39 (expression -> NUMBER .)
    /               reduce using rule 39 (expression -> NUMBER .)
    $end            reduce using rule 39 (expression -> NUMBER .)
    }               reduce using rule 39 (expression -> NUMBER .)
    ;               reduce using rule 39 (expression -> NUMBER .)
    then            reduce using rule 39 (expression -> NUMBER .)
    ,               reduce using rule 39 (expression -> NUMBER .)
    ]               reduce using rule 39 (expression -> NUMBER .)
    )               reduce using rule 39 (expression -> NUMBER .)
    do              reduce using rule 39 (expression -> NUMBER .)
    in              reduce using rule 39 (expression -> NUMBER .)
    else            reduce using rule 39 (expression -> NUMBER .)


state 14

    (35) expression -> ( . id_list ) lambda expression
    (38) expression -> ( . id_list )
    (42) expression -> ( . expression )
    (24) id_list -> . expression , id_list
    (25) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    id_list                        shift and go to state 47
    expression                     shift and go to state 48

state 15

    (36) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 49

state 16

    (37) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 50

state 17

    (41) expression -> BOOL .

    and             reduce using rule 41 (expression -> BOOL .)
    eq              reduce using rule 41 (expression -> BOOL .)
    =               reduce using rule 41 (expression -> BOOL .)
    >               reduce using rule 41 (expression -> BOOL .)
    <               reduce using rule 41 (expression -> BOOL .)
    ge              reduce using rule 41 (expression -> BOOL .)
    le              reduce using rule 41 (expression -> BOOL .)
    neqs            reduce using rule 41 (expression -> BOOL .)
    or              reduce using rule 41 (expression -> BOOL .)
    nand            reduce using rule 41 (expression -> BOOL .)
    +               reduce using rule 41 (expression -> BOOL .)
    -               reduce using rule 41 (expression -> BOOL .)
    *               reduce using rule 41 (expression -> BOOL .)
    /               reduce using rule 41 (expression -> BOOL .)
    $end            reduce using rule 41 (expression -> BOOL .)
    }               reduce using rule 41 (expression -> BOOL .)
    ;               reduce using rule 41 (expression -> BOOL .)
    then            reduce using rule 41 (expression -> BOOL .)
    ,               reduce using rule 41 (expression -> BOOL .)
    ]               reduce using rule 41 (expression -> BOOL .)
    )               reduce using rule 41 (expression -> BOOL .)
    do              reduce using rule 41 (expression -> BOOL .)
    in              reduce using rule 41 (expression -> BOOL .)
    else            reduce using rule 41 (expression -> BOOL .)


state 18

    (43) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 51

state 19

    (44) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 52

state 20

    (7) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 53

state 21

    (8) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 54

state 22

    (9) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 55

state 23

    (10) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 56

state 24

    (11) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 57

state 25

    (12) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 58

state 26

    (13) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 59

state 27

    (14) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 60

state 28

    (15) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 61

state 29

    (16) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 62

state 30

    (28) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 63

state 31

    (29) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 64

state 32

    (30) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 65

state 33

    (31) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 66

state 34

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 67


state 35

    (5) expression -> ID lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 68

state 36

    (19) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 69

state 37

    (34) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 70


state 38

    (40) expression -> ID ( . id_list )
    (24) id_list -> . expression , id_list
    (25) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    id_list                        shift and go to state 71
    expression                     shift and go to state 46

state 39

    (4) expression -> import ID . as ID
    (21) expression -> import ID .

    as              shift and go to state 72
    and             reduce using rule 21 (expression -> import ID .)
    eq              reduce using rule 21 (expression -> import ID .)
    =               reduce using rule 21 (expression -> import ID .)
    >               reduce using rule 21 (expression -> import ID .)
    <               reduce using rule 21 (expression -> import ID .)
    ge              reduce using rule 21 (expression -> import ID .)
    le              reduce using rule 21 (expression -> import ID .)
    neqs            reduce using rule 21 (expression -> import ID .)
    or              reduce using rule 21 (expression -> import ID .)
    nand            reduce using rule 21 (expression -> import ID .)
    +               reduce using rule 21 (expression -> import ID .)
    -               reduce using rule 21 (expression -> import ID .)
    *               reduce using rule 21 (expression -> import ID .)
    /               reduce using rule 21 (expression -> import ID .)
    $end            reduce using rule 21 (expression -> import ID .)
    }               reduce using rule 21 (expression -> import ID .)
    ;               reduce using rule 21 (expression -> import ID .)
    then            reduce using rule 21 (expression -> import ID .)
    ,               reduce using rule 21 (expression -> import ID .)
    ]               reduce using rule 21 (expression -> import ID .)
    )               reduce using rule 21 (expression -> import ID .)
    do              reduce using rule 21 (expression -> import ID .)
    in              reduce using rule 21 (expression -> import ID .)
    else            reduce using rule 21 (expression -> import ID .)


state 40

    (6) expression -> { sequence . }
    (22) sequence -> sequence . ; expression

    }               shift and go to state 73
    ;               shift and go to state 74


state 41

    (23) sequence -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    }               reduce using rule 23 (sequence -> expression .)
    ;               reduce using rule 23 (sequence -> expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 42

    (18) expression -> letrec ID . assign expression in expression

    assign          shift and go to state 75


state 43

    (20) expression -> - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 20 (expression -> - expression .)
    eq              reduce using rule 20 (expression -> - expression .)
    =               reduce using rule 20 (expression -> - expression .)
    >               reduce using rule 20 (expression -> - expression .)
    <               reduce using rule 20 (expression -> - expression .)
    ge              reduce using rule 20 (expression -> - expression .)
    le              reduce using rule 20 (expression -> - expression .)
    neqs            reduce using rule 20 (expression -> - expression .)
    or              reduce using rule 20 (expression -> - expression .)
    nand            reduce using rule 20 (expression -> - expression .)
    +               reduce using rule 20 (expression -> - expression .)
    -               reduce using rule 20 (expression -> - expression .)
    *               reduce using rule 20 (expression -> - expression .)
    /               reduce using rule 20 (expression -> - expression .)
    $end            reduce using rule 20 (expression -> - expression .)
    }               reduce using rule 20 (expression -> - expression .)
    ;               reduce using rule 20 (expression -> - expression .)
    then            reduce using rule 20 (expression -> - expression .)
    ,               reduce using rule 20 (expression -> - expression .)
    ]               reduce using rule 20 (expression -> - expression .)
    )               reduce using rule 20 (expression -> - expression .)
    do              reduce using rule 20 (expression -> - expression .)
    in              reduce using rule 20 (expression -> - expression .)
    else            reduce using rule 20 (expression -> - expression .)

  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]


state 44

    (27) expression -> if expression . then expression
    (33) expression -> if expression . then expression else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    then            shift and go to state 76
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 45

    (32) expression -> [ id_list . ]

    ]               shift and go to state 77


state 46

    (24) id_list -> expression . , id_list
    (25) id_list -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ,               shift and go to state 78
    ]               reduce using rule 25 (id_list -> expression .)
    )               reduce using rule 25 (id_list -> expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 47

    (35) expression -> ( id_list . ) lambda expression
    (38) expression -> ( id_list . )

    )               shift and go to state 79


state 48

    (42) expression -> ( expression . )
    (24) id_list -> expression . , id_list
    (25) id_list -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 80
    ,               shift and go to state 78
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! )               [ reduce using rule 25 (id_list -> expression .) ]


state 49

    (36) expression -> not expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 36 (expression -> not expression .)
    eq              reduce using rule 36 (expression -> not expression .)
    =               reduce using rule 36 (expression -> not expression .)
    >               reduce using rule 36 (expression -> not expression .)
    <               reduce using rule 36 (expression -> not expression .)
    ge              reduce using rule 36 (expression -> not expression .)
    le              reduce using rule 36 (expression -> not expression .)
    neqs            reduce using rule 36 (expression -> not expression .)
    or              reduce using rule 36 (expression -> not expression .)
    nand            reduce using rule 36 (expression -> not expression .)
    +               reduce using rule 36 (expression -> not expression .)
    -               reduce using rule 36 (expression -> not expression .)
    *               reduce using rule 36 (expression -> not expression .)
    /               reduce using rule 36 (expression -> not expression .)
    $end            reduce using rule 36 (expression -> not expression .)
    }               reduce using rule 36 (expression -> not expression .)
    ;               reduce using rule 36 (expression -> not expression .)
    then            reduce using rule 36 (expression -> not expression .)
    ,               reduce using rule 36 (expression -> not expression .)
    ]               reduce using rule 36 (expression -> not expression .)
    )               reduce using rule 36 (expression -> not expression .)
    do              reduce using rule 36 (expression -> not expression .)
    in              reduce using rule 36 (expression -> not expression .)
    else            reduce using rule 36 (expression -> not expression .)

  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]


state 50

    (37) expression -> loop expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 81
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 51

    (43) expression -> for expression . ; expression ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ;               shift and go to state 82
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 52

    (44) expression -> while expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 83
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 53

    (7) expression -> expression and expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 7 (expression -> expression and expression .)
    or              reduce using rule 7 (expression -> expression and expression .)
    nand            reduce using rule 7 (expression -> expression and expression .)
    $end            reduce using rule 7 (expression -> expression and expression .)
    }               reduce using rule 7 (expression -> expression and expression .)
    ;               reduce using rule 7 (expression -> expression and expression .)
    then            reduce using rule 7 (expression -> expression and expression .)
    ,               reduce using rule 7 (expression -> expression and expression .)
    ]               reduce using rule 7 (expression -> expression and expression .)
    )               reduce using rule 7 (expression -> expression and expression .)
    do              reduce using rule 7 (expression -> expression and expression .)
    in              reduce using rule 7 (expression -> expression and expression .)
    else            reduce using rule 7 (expression -> expression and expression .)
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! eq              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 7 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 20 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 54

    (8) expression -> expression eq expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 8 (expression -> expression eq expression .)
    eq              reduce using rule 8 (expression -> expression eq expression .)
    =               reduce using rule 8 (expression -> expression eq expression .)
    neqs            reduce using rule 8 (expression -> expression eq expression .)
    or              reduce using rule 8 (expression -> expression eq expression .)
    nand            reduce using rule 8 (expression -> expression eq expression .)
    $end            reduce using rule 8 (expression -> expression eq expression .)
    }               reduce using rule 8 (expression -> expression eq expression .)
    ;               reduce using rule 8 (expression -> expression eq expression .)
    then            reduce using rule 8 (expression -> expression eq expression .)
    ,               reduce using rule 8 (expression -> expression eq expression .)
    ]               reduce using rule 8 (expression -> expression eq expression .)
    )               reduce using rule 8 (expression -> expression eq expression .)
    do              reduce using rule 8 (expression -> expression eq expression .)
    in              reduce using rule 8 (expression -> expression eq expression .)
    else            reduce using rule 8 (expression -> expression eq expression .)
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! >               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 55

    (9) expression -> expression = expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression = expression .)
    eq              reduce using rule 9 (expression -> expression = expression .)
    =               reduce using rule 9 (expression -> expression = expression .)
    neqs            reduce using rule 9 (expression -> expression = expression .)
    or              reduce using rule 9 (expression -> expression = expression .)
    nand            reduce using rule 9 (expression -> expression = expression .)
    $end            reduce using rule 9 (expression -> expression = expression .)
    }               reduce using rule 9 (expression -> expression = expression .)
    ;               reduce using rule 9 (expression -> expression = expression .)
    then            reduce using rule 9 (expression -> expression = expression .)
    ,               reduce using rule 9 (expression -> expression = expression .)
    ]               reduce using rule 9 (expression -> expression = expression .)
    )               reduce using rule 9 (expression -> expression = expression .)
    do              reduce using rule 9 (expression -> expression = expression .)
    in              reduce using rule 9 (expression -> expression = expression .)
    else            reduce using rule 9 (expression -> expression = expression .)
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! >               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 56

    (10) expression -> expression > expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression > expression .)
    eq              reduce using rule 10 (expression -> expression > expression .)
    =               reduce using rule 10 (expression -> expression > expression .)
    >               reduce using rule 10 (expression -> expression > expression .)
    <               reduce using rule 10 (expression -> expression > expression .)
    ge              reduce using rule 10 (expression -> expression > expression .)
    le              reduce using rule 10 (expression -> expression > expression .)
    neqs            reduce using rule 10 (expression -> expression > expression .)
    or              reduce using rule 10 (expression -> expression > expression .)
    nand            reduce using rule 10 (expression -> expression > expression .)
    $end            reduce using rule 10 (expression -> expression > expression .)
    }               reduce using rule 10 (expression -> expression > expression .)
    ;               reduce using rule 10 (expression -> expression > expression .)
    then            reduce using rule 10 (expression -> expression > expression .)
    ,               reduce using rule 10 (expression -> expression > expression .)
    ]               reduce using rule 10 (expression -> expression > expression .)
    )               reduce using rule 10 (expression -> expression > expression .)
    do              reduce using rule 10 (expression -> expression > expression .)
    in              reduce using rule 10 (expression -> expression > expression .)
    else            reduce using rule 10 (expression -> expression > expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! +               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 57

    (11) expression -> expression < expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression < expression .)
    eq              reduce using rule 11 (expression -> expression < expression .)
    =               reduce using rule 11 (expression -> expression < expression .)
    >               reduce using rule 11 (expression -> expression < expression .)
    <               reduce using rule 11 (expression -> expression < expression .)
    ge              reduce using rule 11 (expression -> expression < expression .)
    le              reduce using rule 11 (expression -> expression < expression .)
    neqs            reduce using rule 11 (expression -> expression < expression .)
    or              reduce using rule 11 (expression -> expression < expression .)
    nand            reduce using rule 11 (expression -> expression < expression .)
    $end            reduce using rule 11 (expression -> expression < expression .)
    }               reduce using rule 11 (expression -> expression < expression .)
    ;               reduce using rule 11 (expression -> expression < expression .)
    then            reduce using rule 11 (expression -> expression < expression .)
    ,               reduce using rule 11 (expression -> expression < expression .)
    ]               reduce using rule 11 (expression -> expression < expression .)
    )               reduce using rule 11 (expression -> expression < expression .)
    do              reduce using rule 11 (expression -> expression < expression .)
    in              reduce using rule 11 (expression -> expression < expression .)
    else            reduce using rule 11 (expression -> expression < expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! +               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 58

    (12) expression -> expression ge expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression ge expression .)
    eq              reduce using rule 12 (expression -> expression ge expression .)
    =               reduce using rule 12 (expression -> expression ge expression .)
    >               reduce using rule 12 (expression -> expression ge expression .)
    <               reduce using rule 12 (expression -> expression ge expression .)
    ge              reduce using rule 12 (expression -> expression ge expression .)
    le              reduce using rule 12 (expression -> expression ge expression .)
    neqs            reduce using rule 12 (expression -> expression ge expression .)
    or              reduce using rule 12 (expression -> expression ge expression .)
    nand            reduce using rule 12 (expression -> expression ge expression .)
    $end            reduce using rule 12 (expression -> expression ge expression .)
    }               reduce using rule 12 (expression -> expression ge expression .)
    ;               reduce using rule 12 (expression -> expression ge expression .)
    then            reduce using rule 12 (expression -> expression ge expression .)
    ,               reduce using rule 12 (expression -> expression ge expression .)
    ]               reduce using rule 12 (expression -> expression ge expression .)
    )               reduce using rule 12 (expression -> expression ge expression .)
    do              reduce using rule 12 (expression -> expression ge expression .)
    in              reduce using rule 12 (expression -> expression ge expression .)
    else            reduce using rule 12 (expression -> expression ge expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! +               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 59

    (13) expression -> expression le expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression le expression .)
    eq              reduce using rule 13 (expression -> expression le expression .)
    =               reduce using rule 13 (expression -> expression le expression .)
    >               reduce using rule 13 (expression -> expression le expression .)
    <               reduce using rule 13 (expression -> expression le expression .)
    ge              reduce using rule 13 (expression -> expression le expression .)
    le              reduce using rule 13 (expression -> expression le expression .)
    neqs            reduce using rule 13 (expression -> expression le expression .)
    or              reduce using rule 13 (expression -> expression le expression .)
    nand            reduce using rule 13 (expression -> expression le expression .)
    $end            reduce using rule 13 (expression -> expression le expression .)
    }               reduce using rule 13 (expression -> expression le expression .)
    ;               reduce using rule 13 (expression -> expression le expression .)
    then            reduce using rule 13 (expression -> expression le expression .)
    ,               reduce using rule 13 (expression -> expression le expression .)
    ]               reduce using rule 13 (expression -> expression le expression .)
    )               reduce using rule 13 (expression -> expression le expression .)
    do              reduce using rule 13 (expression -> expression le expression .)
    in              reduce using rule 13 (expression -> expression le expression .)
    else            reduce using rule 13 (expression -> expression le expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! +               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 60

    (14) expression -> expression neqs expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression neqs expression .)
    eq              reduce using rule 14 (expression -> expression neqs expression .)
    =               reduce using rule 14 (expression -> expression neqs expression .)
    neqs            reduce using rule 14 (expression -> expression neqs expression .)
    or              reduce using rule 14 (expression -> expression neqs expression .)
    nand            reduce using rule 14 (expression -> expression neqs expression .)
    $end            reduce using rule 14 (expression -> expression neqs expression .)
    }               reduce using rule 14 (expression -> expression neqs expression .)
    ;               reduce using rule 14 (expression -> expression neqs expression .)
    then            reduce using rule 14 (expression -> expression neqs expression .)
    ,               reduce using rule 14 (expression -> expression neqs expression .)
    ]               reduce using rule 14 (expression -> expression neqs expression .)
    )               reduce using rule 14 (expression -> expression neqs expression .)
    do              reduce using rule 14 (expression -> expression neqs expression .)
    in              reduce using rule 14 (expression -> expression neqs expression .)
    else            reduce using rule 14 (expression -> expression neqs expression .)
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! >               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 61

    (15) expression -> expression or expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    or              reduce using rule 15 (expression -> expression or expression .)
    $end            reduce using rule 15 (expression -> expression or expression .)
    }               reduce using rule 15 (expression -> expression or expression .)
    ;               reduce using rule 15 (expression -> expression or expression .)
    then            reduce using rule 15 (expression -> expression or expression .)
    ,               reduce using rule 15 (expression -> expression or expression .)
    ]               reduce using rule 15 (expression -> expression or expression .)
    )               reduce using rule 15 (expression -> expression or expression .)
    do              reduce using rule 15 (expression -> expression or expression .)
    in              reduce using rule 15 (expression -> expression or expression .)
    else            reduce using rule 15 (expression -> expression or expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 15 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 28 ]


state 62

    (16) expression -> expression nand expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 16 (expression -> expression nand expression .)
    or              reduce using rule 16 (expression -> expression nand expression .)
    nand            reduce using rule 16 (expression -> expression nand expression .)
    $end            reduce using rule 16 (expression -> expression nand expression .)
    }               reduce using rule 16 (expression -> expression nand expression .)
    ;               reduce using rule 16 (expression -> expression nand expression .)
    then            reduce using rule 16 (expression -> expression nand expression .)
    ,               reduce using rule 16 (expression -> expression nand expression .)
    ]               reduce using rule 16 (expression -> expression nand expression .)
    )               reduce using rule 16 (expression -> expression nand expression .)
    do              reduce using rule 16 (expression -> expression nand expression .)
    in              reduce using rule 16 (expression -> expression nand expression .)
    else            reduce using rule 16 (expression -> expression nand expression .)
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! eq              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 20 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]


state 63

    (28) expression -> expression + expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 28 (expression -> expression + expression .)
    eq              reduce using rule 28 (expression -> expression + expression .)
    =               reduce using rule 28 (expression -> expression + expression .)
    >               reduce using rule 28 (expression -> expression + expression .)
    <               reduce using rule 28 (expression -> expression + expression .)
    ge              reduce using rule 28 (expression -> expression + expression .)
    le              reduce using rule 28 (expression -> expression + expression .)
    neqs            reduce using rule 28 (expression -> expression + expression .)
    or              reduce using rule 28 (expression -> expression + expression .)
    nand            reduce using rule 28 (expression -> expression + expression .)
    +               reduce using rule 28 (expression -> expression + expression .)
    -               reduce using rule 28 (expression -> expression + expression .)
    $end            reduce using rule 28 (expression -> expression + expression .)
    }               reduce using rule 28 (expression -> expression + expression .)
    ;               reduce using rule 28 (expression -> expression + expression .)
    then            reduce using rule 28 (expression -> expression + expression .)
    ,               reduce using rule 28 (expression -> expression + expression .)
    ]               reduce using rule 28 (expression -> expression + expression .)
    )               reduce using rule 28 (expression -> expression + expression .)
    do              reduce using rule 28 (expression -> expression + expression .)
    in              reduce using rule 28 (expression -> expression + expression .)
    else            reduce using rule 28 (expression -> expression + expression .)
    *               shift and go to state 32
    /               shift and go to state 33

  ! *               [ reduce using rule 28 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]


state 64

    (29) expression -> expression - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 29 (expression -> expression - expression .)
    eq              reduce using rule 29 (expression -> expression - expression .)
    =               reduce using rule 29 (expression -> expression - expression .)
    >               reduce using rule 29 (expression -> expression - expression .)
    <               reduce using rule 29 (expression -> expression - expression .)
    ge              reduce using rule 29 (expression -> expression - expression .)
    le              reduce using rule 29 (expression -> expression - expression .)
    neqs            reduce using rule 29 (expression -> expression - expression .)
    or              reduce using rule 29 (expression -> expression - expression .)
    nand            reduce using rule 29 (expression -> expression - expression .)
    +               reduce using rule 29 (expression -> expression - expression .)
    -               reduce using rule 29 (expression -> expression - expression .)
    $end            reduce using rule 29 (expression -> expression - expression .)
    }               reduce using rule 29 (expression -> expression - expression .)
    ;               reduce using rule 29 (expression -> expression - expression .)
    then            reduce using rule 29 (expression -> expression - expression .)
    ,               reduce using rule 29 (expression -> expression - expression .)
    ]               reduce using rule 29 (expression -> expression - expression .)
    )               reduce using rule 29 (expression -> expression - expression .)
    do              reduce using rule 29 (expression -> expression - expression .)
    in              reduce using rule 29 (expression -> expression - expression .)
    else            reduce using rule 29 (expression -> expression - expression .)
    *               shift and go to state 32
    /               shift and go to state 33

  ! *               [ reduce using rule 29 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]


state 65

    (30) expression -> expression * expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 30 (expression -> expression * expression .)
    eq              reduce using rule 30 (expression -> expression * expression .)
    =               reduce using rule 30 (expression -> expression * expression .)
    >               reduce using rule 30 (expression -> expression * expression .)
    <               reduce using rule 30 (expression -> expression * expression .)
    ge              reduce using rule 30 (expression -> expression * expression .)
    le              reduce using rule 30 (expression -> expression * expression .)
    neqs            reduce using rule 30 (expression -> expression * expression .)
    or              reduce using rule 30 (expression -> expression * expression .)
    nand            reduce using rule 30 (expression -> expression * expression .)
    +               reduce using rule 30 (expression -> expression * expression .)
    -               reduce using rule 30 (expression -> expression * expression .)
    *               reduce using rule 30 (expression -> expression * expression .)
    /               reduce using rule 30 (expression -> expression * expression .)
    $end            reduce using rule 30 (expression -> expression * expression .)
    }               reduce using rule 30 (expression -> expression * expression .)
    ;               reduce using rule 30 (expression -> expression * expression .)
    then            reduce using rule 30 (expression -> expression * expression .)
    ,               reduce using rule 30 (expression -> expression * expression .)
    ]               reduce using rule 30 (expression -> expression * expression .)
    )               reduce using rule 30 (expression -> expression * expression .)
    do              reduce using rule 30 (expression -> expression * expression .)
    in              reduce using rule 30 (expression -> expression * expression .)
    else            reduce using rule 30 (expression -> expression * expression .)

  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]


state 66

    (31) expression -> expression / expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 31 (expression -> expression / expression .)
    eq              reduce using rule 31 (expression -> expression / expression .)
    =               reduce using rule 31 (expression -> expression / expression .)
    >               reduce using rule 31 (expression -> expression / expression .)
    <               reduce using rule 31 (expression -> expression / expression .)
    ge              reduce using rule 31 (expression -> expression / expression .)
    le              reduce using rule 31 (expression -> expression / expression .)
    neqs            reduce using rule 31 (expression -> expression / expression .)
    or              reduce using rule 31 (expression -> expression / expression .)
    nand            reduce using rule 31 (expression -> expression / expression .)
    +               reduce using rule 31 (expression -> expression / expression .)
    -               reduce using rule 31 (expression -> expression / expression .)
    *               reduce using rule 31 (expression -> expression / expression .)
    /               reduce using rule 31 (expression -> expression / expression .)
    $end            reduce using rule 31 (expression -> expression / expression .)
    }               reduce using rule 31 (expression -> expression / expression .)
    ;               reduce using rule 31 (expression -> expression / expression .)
    then            reduce using rule 31 (expression -> expression / expression .)
    ,               reduce using rule 31 (expression -> expression / expression .)
    ]               reduce using rule 31 (expression -> expression / expression .)
    )               reduce using rule 31 (expression -> expression / expression .)
    do              reduce using rule 31 (expression -> expression / expression .)
    in              reduce using rule 31 (expression -> expression / expression .)
    else            reduce using rule 31 (expression -> expression / expression .)

  ! and             [ shift and go to state 20 ]
  ! eq              [ shift and go to state 21 ]
  ! =               [ shift and go to state 22 ]
  ! >               [ shift and go to state 23 ]
  ! <               [ shift and go to state 24 ]
  ! ge              [ shift and go to state 25 ]
  ! le              [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 27 ]
  ! or              [ shift and go to state 28 ]
  ! nand            [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]


state 67

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 84

state 68

    (5) expression -> ID lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> ID lambda expression .)
    }               reduce using rule 5 (expression -> ID lambda expression .)
    ;               reduce using rule 5 (expression -> ID lambda expression .)
    then            reduce using rule 5 (expression -> ID lambda expression .)
    ,               reduce using rule 5 (expression -> ID lambda expression .)
    ]               reduce using rule 5 (expression -> ID lambda expression .)
    )               reduce using rule 5 (expression -> ID lambda expression .)
    do              reduce using rule 5 (expression -> ID lambda expression .)
    in              reduce using rule 5 (expression -> ID lambda expression .)
    else            reduce using rule 5 (expression -> ID lambda expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> ID lambda expression .) ]


state 69

    (19) expression -> ID assign expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 19 (expression -> ID assign expression .)
    }               reduce using rule 19 (expression -> ID assign expression .)
    ;               reduce using rule 19 (expression -> ID assign expression .)
    then            reduce using rule 19 (expression -> ID assign expression .)
    ,               reduce using rule 19 (expression -> ID assign expression .)
    ]               reduce using rule 19 (expression -> ID assign expression .)
    )               reduce using rule 19 (expression -> ID assign expression .)
    do              reduce using rule 19 (expression -> ID assign expression .)
    in              reduce using rule 19 (expression -> ID assign expression .)
    else            reduce using rule 19 (expression -> ID assign expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 19 (expression -> ID assign expression .) ]


state 70

    (34) expression -> ID [ NUMBER . ]

    ]               shift and go to state 85


state 71

    (40) expression -> ID ( id_list . )

    )               shift and go to state 86


state 72

    (4) expression -> import ID as . ID

    ID              shift and go to state 87


state 73

    (6) expression -> { sequence } .

    and             reduce using rule 6 (expression -> { sequence } .)
    eq              reduce using rule 6 (expression -> { sequence } .)
    =               reduce using rule 6 (expression -> { sequence } .)
    >               reduce using rule 6 (expression -> { sequence } .)
    <               reduce using rule 6 (expression -> { sequence } .)
    ge              reduce using rule 6 (expression -> { sequence } .)
    le              reduce using rule 6 (expression -> { sequence } .)
    neqs            reduce using rule 6 (expression -> { sequence } .)
    or              reduce using rule 6 (expression -> { sequence } .)
    nand            reduce using rule 6 (expression -> { sequence } .)
    +               reduce using rule 6 (expression -> { sequence } .)
    -               reduce using rule 6 (expression -> { sequence } .)
    *               reduce using rule 6 (expression -> { sequence } .)
    /               reduce using rule 6 (expression -> { sequence } .)
    $end            reduce using rule 6 (expression -> { sequence } .)
    }               reduce using rule 6 (expression -> { sequence } .)
    ;               reduce using rule 6 (expression -> { sequence } .)
    then            reduce using rule 6 (expression -> { sequence } .)
    ,               reduce using rule 6 (expression -> { sequence } .)
    ]               reduce using rule 6 (expression -> { sequence } .)
    )               reduce using rule 6 (expression -> { sequence } .)
    do              reduce using rule 6 (expression -> { sequence } .)
    in              reduce using rule 6 (expression -> { sequence } .)
    else            reduce using rule 6 (expression -> { sequence } .)


state 74

    (22) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 88

state 75

    (18) expression -> letrec ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 89

state 76

    (27) expression -> if expression then . expression
    (33) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 90

state 77

    (32) expression -> [ id_list ] .

    and             reduce using rule 32 (expression -> [ id_list ] .)
    eq              reduce using rule 32 (expression -> [ id_list ] .)
    =               reduce using rule 32 (expression -> [ id_list ] .)
    >               reduce using rule 32 (expression -> [ id_list ] .)
    <               reduce using rule 32 (expression -> [ id_list ] .)
    ge              reduce using rule 32 (expression -> [ id_list ] .)
    le              reduce using rule 32 (expression -> [ id_list ] .)
    neqs            reduce using rule 32 (expression -> [ id_list ] .)
    or              reduce using rule 32 (expression -> [ id_list ] .)
    nand            reduce using rule 32 (expression -> [ id_list ] .)
    +               reduce using rule 32 (expression -> [ id_list ] .)
    -               reduce using rule 32 (expression -> [ id_list ] .)
    *               reduce using rule 32 (expression -> [ id_list ] .)
    /               reduce using rule 32 (expression -> [ id_list ] .)
    $end            reduce using rule 32 (expression -> [ id_list ] .)
    }               reduce using rule 32 (expression -> [ id_list ] .)
    ;               reduce using rule 32 (expression -> [ id_list ] .)
    then            reduce using rule 32 (expression -> [ id_list ] .)
    ,               reduce using rule 32 (expression -> [ id_list ] .)
    ]               reduce using rule 32 (expression -> [ id_list ] .)
    )               reduce using rule 32 (expression -> [ id_list ] .)
    do              reduce using rule 32 (expression -> [ id_list ] .)
    in              reduce using rule 32 (expression -> [ id_list ] .)
    else            reduce using rule 32 (expression -> [ id_list ] .)


state 78

    (24) id_list -> expression , . id_list
    (24) id_list -> . expression , id_list
    (25) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 46
    id_list                        shift and go to state 91

state 79

    (35) expression -> ( id_list ) . lambda expression
    (38) expression -> ( id_list ) .

    lambda          shift and go to state 92
    and             reduce using rule 38 (expression -> ( id_list ) .)
    eq              reduce using rule 38 (expression -> ( id_list ) .)
    =               reduce using rule 38 (expression -> ( id_list ) .)
    >               reduce using rule 38 (expression -> ( id_list ) .)
    <               reduce using rule 38 (expression -> ( id_list ) .)
    ge              reduce using rule 38 (expression -> ( id_list ) .)
    le              reduce using rule 38 (expression -> ( id_list ) .)
    neqs            reduce using rule 38 (expression -> ( id_list ) .)
    or              reduce using rule 38 (expression -> ( id_list ) .)
    nand            reduce using rule 38 (expression -> ( id_list ) .)
    +               reduce using rule 38 (expression -> ( id_list ) .)
    -               reduce using rule 38 (expression -> ( id_list ) .)
    *               reduce using rule 38 (expression -> ( id_list ) .)
    /               reduce using rule 38 (expression -> ( id_list ) .)
    $end            reduce using rule 38 (expression -> ( id_list ) .)
    }               reduce using rule 38 (expression -> ( id_list ) .)
    ;               reduce using rule 38 (expression -> ( id_list ) .)
    then            reduce using rule 38 (expression -> ( id_list ) .)
    ,               reduce using rule 38 (expression -> ( id_list ) .)
    ]               reduce using rule 38 (expression -> ( id_list ) .)
    )               reduce using rule 38 (expression -> ( id_list ) .)
    do              reduce using rule 38 (expression -> ( id_list ) .)
    in              reduce using rule 38 (expression -> ( id_list ) .)
    else            reduce using rule 38 (expression -> ( id_list ) .)


state 80

    (42) expression -> ( expression ) .

    and             reduce using rule 42 (expression -> ( expression ) .)
    eq              reduce using rule 42 (expression -> ( expression ) .)
    =               reduce using rule 42 (expression -> ( expression ) .)
    >               reduce using rule 42 (expression -> ( expression ) .)
    <               reduce using rule 42 (expression -> ( expression ) .)
    ge              reduce using rule 42 (expression -> ( expression ) .)
    le              reduce using rule 42 (expression -> ( expression ) .)
    neqs            reduce using rule 42 (expression -> ( expression ) .)
    or              reduce using rule 42 (expression -> ( expression ) .)
    nand            reduce using rule 42 (expression -> ( expression ) .)
    +               reduce using rule 42 (expression -> ( expression ) .)
    -               reduce using rule 42 (expression -> ( expression ) .)
    *               reduce using rule 42 (expression -> ( expression ) .)
    /               reduce using rule 42 (expression -> ( expression ) .)
    $end            reduce using rule 42 (expression -> ( expression ) .)
    }               reduce using rule 42 (expression -> ( expression ) .)
    ;               reduce using rule 42 (expression -> ( expression ) .)
    then            reduce using rule 42 (expression -> ( expression ) .)
    ,               reduce using rule 42 (expression -> ( expression ) .)
    ]               reduce using rule 42 (expression -> ( expression ) .)
    )               reduce using rule 42 (expression -> ( expression ) .)
    do              reduce using rule 42 (expression -> ( expression ) .)
    in              reduce using rule 42 (expression -> ( expression ) .)
    else            reduce using rule 42 (expression -> ( expression ) .)


state 81

    (37) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 93

state 82

    (43) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 94

state 83

    (44) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 95

state 84

    (2) expression -> local ID assign expression . in expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    in              shift and go to state 96
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 85

    (34) expression -> ID [ NUMBER ] .

    and             reduce using rule 34 (expression -> ID [ NUMBER ] .)
    eq              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    ge              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    le              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    neqs            reduce using rule 34 (expression -> ID [ NUMBER ] .)
    or              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    nand            reduce using rule 34 (expression -> ID [ NUMBER ] .)
    +               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 34 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    then            reduce using rule 34 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    do              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    in              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    else            reduce using rule 34 (expression -> ID [ NUMBER ] .)


state 86

    (40) expression -> ID ( id_list ) .

    and             reduce using rule 40 (expression -> ID ( id_list ) .)
    eq              reduce using rule 40 (expression -> ID ( id_list ) .)
    =               reduce using rule 40 (expression -> ID ( id_list ) .)
    >               reduce using rule 40 (expression -> ID ( id_list ) .)
    <               reduce using rule 40 (expression -> ID ( id_list ) .)
    ge              reduce using rule 40 (expression -> ID ( id_list ) .)
    le              reduce using rule 40 (expression -> ID ( id_list ) .)
    neqs            reduce using rule 40 (expression -> ID ( id_list ) .)
    or              reduce using rule 40 (expression -> ID ( id_list ) .)
    nand            reduce using rule 40 (expression -> ID ( id_list ) .)
    +               reduce using rule 40 (expression -> ID ( id_list ) .)
    -               reduce using rule 40 (expression -> ID ( id_list ) .)
    *               reduce using rule 40 (expression -> ID ( id_list ) .)
    /               reduce using rule 40 (expression -> ID ( id_list ) .)
    $end            reduce using rule 40 (expression -> ID ( id_list ) .)
    }               reduce using rule 40 (expression -> ID ( id_list ) .)
    ;               reduce using rule 40 (expression -> ID ( id_list ) .)
    then            reduce using rule 40 (expression -> ID ( id_list ) .)
    ,               reduce using rule 40 (expression -> ID ( id_list ) .)
    ]               reduce using rule 40 (expression -> ID ( id_list ) .)
    )               reduce using rule 40 (expression -> ID ( id_list ) .)
    do              reduce using rule 40 (expression -> ID ( id_list ) .)
    in              reduce using rule 40 (expression -> ID ( id_list ) .)
    else            reduce using rule 40 (expression -> ID ( id_list ) .)


state 87

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    ,               reduce using rule 4 (expression -> import ID as ID .)
    ]               reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 88

    (22) sequence -> sequence ; expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    }               reduce using rule 22 (sequence -> sequence ; expression .)
    ;               reduce using rule 22 (sequence -> sequence ; expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 89

    (18) expression -> letrec ID assign expression . in expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    in              shift and go to state 97
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 90

    (27) expression -> if expression then expression .
    (33) expression -> if expression then expression . else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 27 (expression -> if expression then expression .)
    }               reduce using rule 27 (expression -> if expression then expression .)
    ;               reduce using rule 27 (expression -> if expression then expression .)
    then            reduce using rule 27 (expression -> if expression then expression .)
    ,               reduce using rule 27 (expression -> if expression then expression .)
    ]               reduce using rule 27 (expression -> if expression then expression .)
    )               reduce using rule 27 (expression -> if expression then expression .)
    do              reduce using rule 27 (expression -> if expression then expression .)
    in              reduce using rule 27 (expression -> if expression then expression .)
    else            shift and go to state 98
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 27 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 27 (expression -> if expression then expression .) ]


state 91

    (24) id_list -> expression , id_list .

    ]               reduce using rule 24 (id_list -> expression , id_list .)
    )               reduce using rule 24 (id_list -> expression , id_list .)


state 92

    (35) expression -> ( id_list ) lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 99

state 93

    (37) expression -> loop expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 37 (expression -> loop expression do expression .)
    }               reduce using rule 37 (expression -> loop expression do expression .)
    ;               reduce using rule 37 (expression -> loop expression do expression .)
    then            reduce using rule 37 (expression -> loop expression do expression .)
    ,               reduce using rule 37 (expression -> loop expression do expression .)
    ]               reduce using rule 37 (expression -> loop expression do expression .)
    )               reduce using rule 37 (expression -> loop expression do expression .)
    do              reduce using rule 37 (expression -> loop expression do expression .)
    in              reduce using rule 37 (expression -> loop expression do expression .)
    else            reduce using rule 37 (expression -> loop expression do expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 37 (expression -> loop expression do expression .) ]


state 94

    (43) expression -> for expression ; expression . ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ;               shift and go to state 100
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 95

    (44) expression -> while expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 44 (expression -> while expression do expression .)
    }               reduce using rule 44 (expression -> while expression do expression .)
    ;               reduce using rule 44 (expression -> while expression do expression .)
    then            reduce using rule 44 (expression -> while expression do expression .)
    ,               reduce using rule 44 (expression -> while expression do expression .)
    ]               reduce using rule 44 (expression -> while expression do expression .)
    )               reduce using rule 44 (expression -> while expression do expression .)
    do              reduce using rule 44 (expression -> while expression do expression .)
    in              reduce using rule 44 (expression -> while expression do expression .)
    else            reduce using rule 44 (expression -> while expression do expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 44 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 44 (expression -> while expression do expression .) ]


state 96

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 101

state 97

    (18) expression -> letrec ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 102

state 98

    (33) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 103

state 99

    (35) expression -> ( id_list ) lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    }               reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    ;               reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    then            reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    ,               reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    ]               reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    )               reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    do              reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    in              reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    else            reduce using rule 35 (expression -> ( id_list ) lambda expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! eq              [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! =               [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! >               [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! <               [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! ge              [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! le              [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! neqs            [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! or              [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! nand            [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! +               [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! -               [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! *               [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]
  ! /               [ reduce using rule 35 (expression -> ( id_list ) lambda expression .) ]


state 100

    (43) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 104

state 101

    (2) expression -> local ID assign expression in expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    ,               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ]               reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 102

    (18) expression -> letrec ID assign expression in expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    }               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    ;               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    then            reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    ,               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    ]               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    )               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    do              reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    in              reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    else            reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! eq              [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! =               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! >               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! <               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! ge              [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! le              [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! or              [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! nand            [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! +               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! -               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! *               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! /               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]


state 103

    (33) expression -> if expression then expression else expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 33 (expression -> if expression then expression else expression .)
    }               reduce using rule 33 (expression -> if expression then expression else expression .)
    ;               reduce using rule 33 (expression -> if expression then expression else expression .)
    then            reduce using rule 33 (expression -> if expression then expression else expression .)
    ,               reduce using rule 33 (expression -> if expression then expression else expression .)
    ]               reduce using rule 33 (expression -> if expression then expression else expression .)
    )               reduce using rule 33 (expression -> if expression then expression else expression .)
    do              reduce using rule 33 (expression -> if expression then expression else expression .)
    in              reduce using rule 33 (expression -> if expression then expression else expression .)
    else            reduce using rule 33 (expression -> if expression then expression else expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]


state 104

    (43) expression -> for expression ; expression ; expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 105
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33


state 105

    (43) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . - expression
    (21) expression -> . import ID
    (26) expression -> . char
    (27) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ id_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . ( id_list ) lambda expression
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ID ( id_list )
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    (               shift and go to state 14
    not             shift and go to state 15
    loop            shift and go to state 16
    NUMBER          shift and go to state 13
    BOOL            shift and go to state 17
    for             shift and go to state 18
    while           shift and go to state 19

    expression                     shift and go to state 106

state 106

    (43) expression -> for expression ; expression ; expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ,               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ]               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 20
    eq              shift and go to state 21
    =               shift and go to state 22
    >               shift and go to state 23
    <               shift and go to state 24
    ge              shift and go to state 25
    le              shift and go to state 26
    neqs            shift and go to state 27
    or              shift and go to state 28
    nand            shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! and             [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 48 resolved as shift
WARNING: shift/reduce conflict for and in state 101 resolved as shift
WARNING: shift/reduce conflict for eq in state 101 resolved as shift
WARNING: shift/reduce conflict for = in state 101 resolved as shift
WARNING: shift/reduce conflict for > in state 101 resolved as shift
WARNING: shift/reduce conflict for < in state 101 resolved as shift
WARNING: shift/reduce conflict for ge in state 101 resolved as shift
WARNING: shift/reduce conflict for le in state 101 resolved as shift
WARNING: shift/reduce conflict for neqs in state 101 resolved as shift
WARNING: shift/reduce conflict for or in state 101 resolved as shift
WARNING: shift/reduce conflict for nand in state 101 resolved as shift
WARNING: shift/reduce conflict for + in state 101 resolved as shift
WARNING: shift/reduce conflict for - in state 101 resolved as shift
WARNING: shift/reduce conflict for * in state 101 resolved as shift
WARNING: shift/reduce conflict for / in state 101 resolved as shift
WARNING: shift/reduce conflict for and in state 102 resolved as shift
WARNING: shift/reduce conflict for eq in state 102 resolved as shift
WARNING: shift/reduce conflict for = in state 102 resolved as shift
WARNING: shift/reduce conflict for > in state 102 resolved as shift
WARNING: shift/reduce conflict for < in state 102 resolved as shift
WARNING: shift/reduce conflict for ge in state 102 resolved as shift
WARNING: shift/reduce conflict for le in state 102 resolved as shift
WARNING: shift/reduce conflict for neqs in state 102 resolved as shift
WARNING: shift/reduce conflict for or in state 102 resolved as shift
WARNING: shift/reduce conflict for nand in state 102 resolved as shift
WARNING: shift/reduce conflict for + in state 102 resolved as shift
WARNING: shift/reduce conflict for - in state 102 resolved as shift
WARNING: shift/reduce conflict for * in state 102 resolved as shift
WARNING: shift/reduce conflict for / in state 102 resolved as shift
