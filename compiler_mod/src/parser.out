Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> letrec ID assign expression lambda expression
Rule 6     expression -> { sequence }
Rule 7     expression -> expression and expression
Rule 8     expression -> expression eq expression
Rule 9     expression -> expression = expression
Rule 10    expression -> expression > expression
Rule 11    expression -> expression < expression
Rule 12    expression -> expression ge expression
Rule 13    expression -> expression le expression
Rule 14    expression -> expression neqs expression
Rule 15    expression -> expression or expression
Rule 16    expression -> expression nand expression
Rule 17    expression -> string
Rule 18    expression -> ID assign expression
Rule 19    expression -> import ID
Rule 20    expression -> struct { sequence }
Rule 21    expression -> - expression
Rule 22    expression -> char
Rule 23    expression -> if expression then expression
Rule 24    expression -> ID . ID
Rule 25    sequence -> sequence ; expression
Rule 26    sequence -> expression
Rule 27    expression -> expression + expression
Rule 28    expression -> expression - expression
Rule 29    expression -> expression * expression
Rule 30    expression -> expression / expression
Rule 31    expression -> [ id_list ]
Rule 32    expression -> if expression then expression else expression
Rule 33    id_list -> expression , id_list
Rule 34    id_list -> expression
Rule 35    expression -> extend struct { sequence }
Rule 36    expression -> ID [ NUMBER ]
Rule 37    expression -> not expression
Rule 38    expression -> loop expression do expression
Rule 39    expression -> ( id_list )
Rule 40    expression -> NUMBER
Rule 41    expression -> BOOL
Rule 42    expression -> ( expression )
Rule 43    expression -> for expression ; expression ; expression do expression
Rule 44    expression -> lambda expression
Rule 45    expression -> ID lambda expression
Rule 46    expression -> ( id_list ) lambda expression
Rule 47    expression -> while expression do expression
Rule 48    expression -> ID ( )
Rule 49    expression -> ID ( id_list )

Terminals, with rules where they appear

(                    : 39 42 46 48 49
)                    : 39 42 46 48 49
*                    : 29
+                    : 27
,                    : 33
-                    : 21 28
.                    : 24
/                    : 30
;                    : 25 43 43
<                    : 11
=                    : 9
>                    : 10
BOOL                 : 41
ID                   : 2 3 4 4 5 18 19 24 24 36 45 48 49
NUMBER               : 36 40
[                    : 31 36
]                    : 31 36
and                  : 7
as                   : 4
assign               : 2 5 18
char                 : 22
do                   : 38 43 47
else                 : 32
eq                   : 8
error                : 
extend               : 35
float                : 1
for                  : 43
ge                   : 12
if                   : 23 32
import               : 4 19
in                   : 2
lambda               : 5 44 45 46
le                   : 13
letrec               : 5
local                : 2
loop                 : 38
nand                 : 16
neqs                 : 14
not                  : 37
or                   : 15
string               : 17
struct               : 20 35
then                 : 23 32
while                : 47
{                    : 6 20 35
}                    : 6 20 35

Nonterminals, with rules where they appear

expression           : 2 2 5 5 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 18 21 23 23 25 26 27 27 28 28 29 29 30 30 32 32 32 33 34 37 38 38 42 43 43 43 43 44 45 46 47 47 0
id_list              : 31 33 39 46 49
sequence             : 6 20 25 35

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    ,               reduce using rule 1 (expression -> float .)
    ]               reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    lambda          reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 37


state 4

    (3) expression -> ID .
    (18) expression -> ID . assign expression
    (24) expression -> ID . . ID
    (36) expression -> ID . [ NUMBER ]
    (45) expression -> ID . lambda expression
    (48) expression -> ID . ( )
    (49) expression -> ID . ( id_list )

  ! shift/reduce conflict for lambda resolved as shift
    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    ,               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    assign          shift and go to state 38
    .               shift and go to state 39
    [               shift and go to state 40
    lambda          shift and go to state 41
    (               shift and go to state 42

  ! lambda          [ reduce using rule 3 (expression -> ID .) ]


state 5

    (4) expression -> import . ID as ID
    (19) expression -> import . ID

    ID              shift and go to state 43


state 6

    (5) expression -> letrec . ID assign expression lambda expression

    ID              shift and go to state 44


state 7

    (44) expression -> lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 45

state 8

    (6) expression -> { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    sequence                       shift and go to state 46
    expression                     shift and go to state 47

state 9

    (17) expression -> string .

    and             reduce using rule 17 (expression -> string .)
    eq              reduce using rule 17 (expression -> string .)
    =               reduce using rule 17 (expression -> string .)
    >               reduce using rule 17 (expression -> string .)
    <               reduce using rule 17 (expression -> string .)
    ge              reduce using rule 17 (expression -> string .)
    le              reduce using rule 17 (expression -> string .)
    neqs            reduce using rule 17 (expression -> string .)
    or              reduce using rule 17 (expression -> string .)
    nand            reduce using rule 17 (expression -> string .)
    +               reduce using rule 17 (expression -> string .)
    -               reduce using rule 17 (expression -> string .)
    *               reduce using rule 17 (expression -> string .)
    /               reduce using rule 17 (expression -> string .)
    $end            reduce using rule 17 (expression -> string .)
    }               reduce using rule 17 (expression -> string .)
    ;               reduce using rule 17 (expression -> string .)
    then            reduce using rule 17 (expression -> string .)
    ,               reduce using rule 17 (expression -> string .)
    ]               reduce using rule 17 (expression -> string .)
    do              reduce using rule 17 (expression -> string .)
    )               reduce using rule 17 (expression -> string .)
    in              reduce using rule 17 (expression -> string .)
    lambda          reduce using rule 17 (expression -> string .)
    else            reduce using rule 17 (expression -> string .)


state 10

    (20) expression -> struct . { sequence }

    {               shift and go to state 48


state 11

    (21) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 49

state 12

    (22) expression -> char .

    and             reduce using rule 22 (expression -> char .)
    eq              reduce using rule 22 (expression -> char .)
    =               reduce using rule 22 (expression -> char .)
    >               reduce using rule 22 (expression -> char .)
    <               reduce using rule 22 (expression -> char .)
    ge              reduce using rule 22 (expression -> char .)
    le              reduce using rule 22 (expression -> char .)
    neqs            reduce using rule 22 (expression -> char .)
    or              reduce using rule 22 (expression -> char .)
    nand            reduce using rule 22 (expression -> char .)
    +               reduce using rule 22 (expression -> char .)
    -               reduce using rule 22 (expression -> char .)
    *               reduce using rule 22 (expression -> char .)
    /               reduce using rule 22 (expression -> char .)
    $end            reduce using rule 22 (expression -> char .)
    }               reduce using rule 22 (expression -> char .)
    ;               reduce using rule 22 (expression -> char .)
    then            reduce using rule 22 (expression -> char .)
    ,               reduce using rule 22 (expression -> char .)
    ]               reduce using rule 22 (expression -> char .)
    do              reduce using rule 22 (expression -> char .)
    )               reduce using rule 22 (expression -> char .)
    in              reduce using rule 22 (expression -> char .)
    lambda          reduce using rule 22 (expression -> char .)
    else            reduce using rule 22 (expression -> char .)


state 13

    (23) expression -> if . expression then expression
    (32) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 50

state 14

    (31) expression -> [ . id_list ]
    (33) id_list -> . expression , id_list
    (34) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    id_list                        shift and go to state 51
    expression                     shift and go to state 52

state 15

    (35) expression -> extend . struct { sequence }

    struct          shift and go to state 53


state 16

    (40) expression -> NUMBER .

    and             reduce using rule 40 (expression -> NUMBER .)
    eq              reduce using rule 40 (expression -> NUMBER .)
    =               reduce using rule 40 (expression -> NUMBER .)
    >               reduce using rule 40 (expression -> NUMBER .)
    <               reduce using rule 40 (expression -> NUMBER .)
    ge              reduce using rule 40 (expression -> NUMBER .)
    le              reduce using rule 40 (expression -> NUMBER .)
    neqs            reduce using rule 40 (expression -> NUMBER .)
    or              reduce using rule 40 (expression -> NUMBER .)
    nand            reduce using rule 40 (expression -> NUMBER .)
    +               reduce using rule 40 (expression -> NUMBER .)
    -               reduce using rule 40 (expression -> NUMBER .)
    *               reduce using rule 40 (expression -> NUMBER .)
    /               reduce using rule 40 (expression -> NUMBER .)
    $end            reduce using rule 40 (expression -> NUMBER .)
    }               reduce using rule 40 (expression -> NUMBER .)
    ;               reduce using rule 40 (expression -> NUMBER .)
    then            reduce using rule 40 (expression -> NUMBER .)
    ,               reduce using rule 40 (expression -> NUMBER .)
    ]               reduce using rule 40 (expression -> NUMBER .)
    do              reduce using rule 40 (expression -> NUMBER .)
    )               reduce using rule 40 (expression -> NUMBER .)
    in              reduce using rule 40 (expression -> NUMBER .)
    lambda          reduce using rule 40 (expression -> NUMBER .)
    else            reduce using rule 40 (expression -> NUMBER .)


state 17

    (37) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 54

state 18

    (38) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 55

state 19

    (39) expression -> ( . id_list )
    (42) expression -> ( . expression )
    (46) expression -> ( . id_list ) lambda expression
    (33) id_list -> . expression , id_list
    (34) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    id_list                        shift and go to state 56
    expression                     shift and go to state 57

state 20

    (41) expression -> BOOL .

    and             reduce using rule 41 (expression -> BOOL .)
    eq              reduce using rule 41 (expression -> BOOL .)
    =               reduce using rule 41 (expression -> BOOL .)
    >               reduce using rule 41 (expression -> BOOL .)
    <               reduce using rule 41 (expression -> BOOL .)
    ge              reduce using rule 41 (expression -> BOOL .)
    le              reduce using rule 41 (expression -> BOOL .)
    neqs            reduce using rule 41 (expression -> BOOL .)
    or              reduce using rule 41 (expression -> BOOL .)
    nand            reduce using rule 41 (expression -> BOOL .)
    +               reduce using rule 41 (expression -> BOOL .)
    -               reduce using rule 41 (expression -> BOOL .)
    *               reduce using rule 41 (expression -> BOOL .)
    /               reduce using rule 41 (expression -> BOOL .)
    $end            reduce using rule 41 (expression -> BOOL .)
    }               reduce using rule 41 (expression -> BOOL .)
    ;               reduce using rule 41 (expression -> BOOL .)
    then            reduce using rule 41 (expression -> BOOL .)
    ,               reduce using rule 41 (expression -> BOOL .)
    ]               reduce using rule 41 (expression -> BOOL .)
    do              reduce using rule 41 (expression -> BOOL .)
    )               reduce using rule 41 (expression -> BOOL .)
    in              reduce using rule 41 (expression -> BOOL .)
    lambda          reduce using rule 41 (expression -> BOOL .)
    else            reduce using rule 41 (expression -> BOOL .)


state 21

    (43) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 58

state 22

    (47) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 59

state 23

    (7) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 60

state 24

    (8) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 61

state 25

    (9) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 62

state 26

    (10) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 63

state 27

    (11) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 64

state 28

    (12) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 65

state 29

    (13) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 66

state 30

    (14) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 67

state 31

    (15) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 68

state 32

    (16) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 69

state 33

    (27) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 70

state 34

    (28) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 71

state 35

    (29) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 72

state 36

    (30) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 73

state 37

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 74


state 38

    (18) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 75

state 39

    (24) expression -> ID . . ID

    ID              shift and go to state 76


state 40

    (36) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 77


state 41

    (45) expression -> ID lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 78

state 42

    (48) expression -> ID ( . )
    (49) expression -> ID ( . id_list )
    (33) id_list -> . expression , id_list
    (34) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    )               shift and go to state 79
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    id_list                        shift and go to state 80
    expression                     shift and go to state 52

state 43

    (4) expression -> import ID . as ID
    (19) expression -> import ID .

    as              shift and go to state 81
    and             reduce using rule 19 (expression -> import ID .)
    eq              reduce using rule 19 (expression -> import ID .)
    =               reduce using rule 19 (expression -> import ID .)
    >               reduce using rule 19 (expression -> import ID .)
    <               reduce using rule 19 (expression -> import ID .)
    ge              reduce using rule 19 (expression -> import ID .)
    le              reduce using rule 19 (expression -> import ID .)
    neqs            reduce using rule 19 (expression -> import ID .)
    or              reduce using rule 19 (expression -> import ID .)
    nand            reduce using rule 19 (expression -> import ID .)
    +               reduce using rule 19 (expression -> import ID .)
    -               reduce using rule 19 (expression -> import ID .)
    *               reduce using rule 19 (expression -> import ID .)
    /               reduce using rule 19 (expression -> import ID .)
    $end            reduce using rule 19 (expression -> import ID .)
    }               reduce using rule 19 (expression -> import ID .)
    ;               reduce using rule 19 (expression -> import ID .)
    then            reduce using rule 19 (expression -> import ID .)
    ,               reduce using rule 19 (expression -> import ID .)
    ]               reduce using rule 19 (expression -> import ID .)
    do              reduce using rule 19 (expression -> import ID .)
    )               reduce using rule 19 (expression -> import ID .)
    in              reduce using rule 19 (expression -> import ID .)
    lambda          reduce using rule 19 (expression -> import ID .)
    else            reduce using rule 19 (expression -> import ID .)


state 44

    (5) expression -> letrec ID . assign expression lambda expression

    assign          shift and go to state 82


state 45

    (44) expression -> lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 44 (expression -> lambda expression .)
    }               reduce using rule 44 (expression -> lambda expression .)
    ;               reduce using rule 44 (expression -> lambda expression .)
    then            reduce using rule 44 (expression -> lambda expression .)
    ,               reduce using rule 44 (expression -> lambda expression .)
    ]               reduce using rule 44 (expression -> lambda expression .)
    do              reduce using rule 44 (expression -> lambda expression .)
    )               reduce using rule 44 (expression -> lambda expression .)
    in              reduce using rule 44 (expression -> lambda expression .)
    lambda          reduce using rule 44 (expression -> lambda expression .)
    else            reduce using rule 44 (expression -> lambda expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 44 (expression -> lambda expression .) ]
  ! eq              [ reduce using rule 44 (expression -> lambda expression .) ]
  ! =               [ reduce using rule 44 (expression -> lambda expression .) ]
  ! >               [ reduce using rule 44 (expression -> lambda expression .) ]
  ! <               [ reduce using rule 44 (expression -> lambda expression .) ]
  ! ge              [ reduce using rule 44 (expression -> lambda expression .) ]
  ! le              [ reduce using rule 44 (expression -> lambda expression .) ]
  ! neqs            [ reduce using rule 44 (expression -> lambda expression .) ]
  ! or              [ reduce using rule 44 (expression -> lambda expression .) ]
  ! nand            [ reduce using rule 44 (expression -> lambda expression .) ]
  ! +               [ reduce using rule 44 (expression -> lambda expression .) ]
  ! -               [ reduce using rule 44 (expression -> lambda expression .) ]
  ! *               [ reduce using rule 44 (expression -> lambda expression .) ]
  ! /               [ reduce using rule 44 (expression -> lambda expression .) ]


state 46

    (6) expression -> { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 83
    ;               shift and go to state 84


state 47

    (26) sequence -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    }               reduce using rule 26 (sequence -> expression .)
    ;               reduce using rule 26 (sequence -> expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 48

    (20) expression -> struct { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    sequence                       shift and go to state 85
    expression                     shift and go to state 47

state 49

    (21) expression -> - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 21 (expression -> - expression .)
    eq              reduce using rule 21 (expression -> - expression .)
    =               reduce using rule 21 (expression -> - expression .)
    >               reduce using rule 21 (expression -> - expression .)
    <               reduce using rule 21 (expression -> - expression .)
    ge              reduce using rule 21 (expression -> - expression .)
    le              reduce using rule 21 (expression -> - expression .)
    neqs            reduce using rule 21 (expression -> - expression .)
    or              reduce using rule 21 (expression -> - expression .)
    nand            reduce using rule 21 (expression -> - expression .)
    +               reduce using rule 21 (expression -> - expression .)
    -               reduce using rule 21 (expression -> - expression .)
    *               reduce using rule 21 (expression -> - expression .)
    /               reduce using rule 21 (expression -> - expression .)
    $end            reduce using rule 21 (expression -> - expression .)
    }               reduce using rule 21 (expression -> - expression .)
    ;               reduce using rule 21 (expression -> - expression .)
    then            reduce using rule 21 (expression -> - expression .)
    ,               reduce using rule 21 (expression -> - expression .)
    ]               reduce using rule 21 (expression -> - expression .)
    do              reduce using rule 21 (expression -> - expression .)
    )               reduce using rule 21 (expression -> - expression .)
    in              reduce using rule 21 (expression -> - expression .)
    lambda          reduce using rule 21 (expression -> - expression .)
    else            reduce using rule 21 (expression -> - expression .)

  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]


state 50

    (23) expression -> if expression . then expression
    (32) expression -> if expression . then expression else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    then            shift and go to state 86
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 51

    (31) expression -> [ id_list . ]

    ]               shift and go to state 87


state 52

    (33) id_list -> expression . , id_list
    (34) id_list -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ,               shift and go to state 88
    ]               reduce using rule 34 (id_list -> expression .)
    )               reduce using rule 34 (id_list -> expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 53

    (35) expression -> extend struct . { sequence }

    {               shift and go to state 89


state 54

    (37) expression -> not expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 37 (expression -> not expression .)
    eq              reduce using rule 37 (expression -> not expression .)
    =               reduce using rule 37 (expression -> not expression .)
    >               reduce using rule 37 (expression -> not expression .)
    <               reduce using rule 37 (expression -> not expression .)
    ge              reduce using rule 37 (expression -> not expression .)
    le              reduce using rule 37 (expression -> not expression .)
    neqs            reduce using rule 37 (expression -> not expression .)
    or              reduce using rule 37 (expression -> not expression .)
    nand            reduce using rule 37 (expression -> not expression .)
    +               reduce using rule 37 (expression -> not expression .)
    -               reduce using rule 37 (expression -> not expression .)
    *               reduce using rule 37 (expression -> not expression .)
    /               reduce using rule 37 (expression -> not expression .)
    $end            reduce using rule 37 (expression -> not expression .)
    }               reduce using rule 37 (expression -> not expression .)
    ;               reduce using rule 37 (expression -> not expression .)
    then            reduce using rule 37 (expression -> not expression .)
    ,               reduce using rule 37 (expression -> not expression .)
    ]               reduce using rule 37 (expression -> not expression .)
    do              reduce using rule 37 (expression -> not expression .)
    )               reduce using rule 37 (expression -> not expression .)
    in              reduce using rule 37 (expression -> not expression .)
    lambda          reduce using rule 37 (expression -> not expression .)
    else            reduce using rule 37 (expression -> not expression .)

  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]


state 55

    (38) expression -> loop expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 90
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 56

    (39) expression -> ( id_list . )
    (46) expression -> ( id_list . ) lambda expression

    )               shift and go to state 91


state 57

    (42) expression -> ( expression . )
    (33) id_list -> expression . , id_list
    (34) id_list -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 92
    ,               shift and go to state 88
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! )               [ reduce using rule 34 (id_list -> expression .) ]


state 58

    (43) expression -> for expression . ; expression ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ;               shift and go to state 93
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 59

    (47) expression -> while expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 94
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 60

    (7) expression -> expression and expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 7 (expression -> expression and expression .)
    or              reduce using rule 7 (expression -> expression and expression .)
    nand            reduce using rule 7 (expression -> expression and expression .)
    $end            reduce using rule 7 (expression -> expression and expression .)
    }               reduce using rule 7 (expression -> expression and expression .)
    ;               reduce using rule 7 (expression -> expression and expression .)
    then            reduce using rule 7 (expression -> expression and expression .)
    ,               reduce using rule 7 (expression -> expression and expression .)
    ]               reduce using rule 7 (expression -> expression and expression .)
    do              reduce using rule 7 (expression -> expression and expression .)
    )               reduce using rule 7 (expression -> expression and expression .)
    in              reduce using rule 7 (expression -> expression and expression .)
    lambda          reduce using rule 7 (expression -> expression and expression .)
    else            reduce using rule 7 (expression -> expression and expression .)
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! eq              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 7 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 23 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 61

    (8) expression -> expression eq expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 8 (expression -> expression eq expression .)
    eq              reduce using rule 8 (expression -> expression eq expression .)
    =               reduce using rule 8 (expression -> expression eq expression .)
    neqs            reduce using rule 8 (expression -> expression eq expression .)
    or              reduce using rule 8 (expression -> expression eq expression .)
    nand            reduce using rule 8 (expression -> expression eq expression .)
    $end            reduce using rule 8 (expression -> expression eq expression .)
    }               reduce using rule 8 (expression -> expression eq expression .)
    ;               reduce using rule 8 (expression -> expression eq expression .)
    then            reduce using rule 8 (expression -> expression eq expression .)
    ,               reduce using rule 8 (expression -> expression eq expression .)
    ]               reduce using rule 8 (expression -> expression eq expression .)
    do              reduce using rule 8 (expression -> expression eq expression .)
    )               reduce using rule 8 (expression -> expression eq expression .)
    in              reduce using rule 8 (expression -> expression eq expression .)
    lambda          reduce using rule 8 (expression -> expression eq expression .)
    else            reduce using rule 8 (expression -> expression eq expression .)
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! >               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 62

    (9) expression -> expression = expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression = expression .)
    eq              reduce using rule 9 (expression -> expression = expression .)
    =               reduce using rule 9 (expression -> expression = expression .)
    neqs            reduce using rule 9 (expression -> expression = expression .)
    or              reduce using rule 9 (expression -> expression = expression .)
    nand            reduce using rule 9 (expression -> expression = expression .)
    $end            reduce using rule 9 (expression -> expression = expression .)
    }               reduce using rule 9 (expression -> expression = expression .)
    ;               reduce using rule 9 (expression -> expression = expression .)
    then            reduce using rule 9 (expression -> expression = expression .)
    ,               reduce using rule 9 (expression -> expression = expression .)
    ]               reduce using rule 9 (expression -> expression = expression .)
    do              reduce using rule 9 (expression -> expression = expression .)
    )               reduce using rule 9 (expression -> expression = expression .)
    in              reduce using rule 9 (expression -> expression = expression .)
    lambda          reduce using rule 9 (expression -> expression = expression .)
    else            reduce using rule 9 (expression -> expression = expression .)
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! >               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 63

    (10) expression -> expression > expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression > expression .)
    eq              reduce using rule 10 (expression -> expression > expression .)
    =               reduce using rule 10 (expression -> expression > expression .)
    >               reduce using rule 10 (expression -> expression > expression .)
    <               reduce using rule 10 (expression -> expression > expression .)
    ge              reduce using rule 10 (expression -> expression > expression .)
    le              reduce using rule 10 (expression -> expression > expression .)
    neqs            reduce using rule 10 (expression -> expression > expression .)
    or              reduce using rule 10 (expression -> expression > expression .)
    nand            reduce using rule 10 (expression -> expression > expression .)
    $end            reduce using rule 10 (expression -> expression > expression .)
    }               reduce using rule 10 (expression -> expression > expression .)
    ;               reduce using rule 10 (expression -> expression > expression .)
    then            reduce using rule 10 (expression -> expression > expression .)
    ,               reduce using rule 10 (expression -> expression > expression .)
    ]               reduce using rule 10 (expression -> expression > expression .)
    do              reduce using rule 10 (expression -> expression > expression .)
    )               reduce using rule 10 (expression -> expression > expression .)
    in              reduce using rule 10 (expression -> expression > expression .)
    lambda          reduce using rule 10 (expression -> expression > expression .)
    else            reduce using rule 10 (expression -> expression > expression .)
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! +               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 64

    (11) expression -> expression < expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression < expression .)
    eq              reduce using rule 11 (expression -> expression < expression .)
    =               reduce using rule 11 (expression -> expression < expression .)
    >               reduce using rule 11 (expression -> expression < expression .)
    <               reduce using rule 11 (expression -> expression < expression .)
    ge              reduce using rule 11 (expression -> expression < expression .)
    le              reduce using rule 11 (expression -> expression < expression .)
    neqs            reduce using rule 11 (expression -> expression < expression .)
    or              reduce using rule 11 (expression -> expression < expression .)
    nand            reduce using rule 11 (expression -> expression < expression .)
    $end            reduce using rule 11 (expression -> expression < expression .)
    }               reduce using rule 11 (expression -> expression < expression .)
    ;               reduce using rule 11 (expression -> expression < expression .)
    then            reduce using rule 11 (expression -> expression < expression .)
    ,               reduce using rule 11 (expression -> expression < expression .)
    ]               reduce using rule 11 (expression -> expression < expression .)
    do              reduce using rule 11 (expression -> expression < expression .)
    )               reduce using rule 11 (expression -> expression < expression .)
    in              reduce using rule 11 (expression -> expression < expression .)
    lambda          reduce using rule 11 (expression -> expression < expression .)
    else            reduce using rule 11 (expression -> expression < expression .)
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! +               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 65

    (12) expression -> expression ge expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression ge expression .)
    eq              reduce using rule 12 (expression -> expression ge expression .)
    =               reduce using rule 12 (expression -> expression ge expression .)
    >               reduce using rule 12 (expression -> expression ge expression .)
    <               reduce using rule 12 (expression -> expression ge expression .)
    ge              reduce using rule 12 (expression -> expression ge expression .)
    le              reduce using rule 12 (expression -> expression ge expression .)
    neqs            reduce using rule 12 (expression -> expression ge expression .)
    or              reduce using rule 12 (expression -> expression ge expression .)
    nand            reduce using rule 12 (expression -> expression ge expression .)
    $end            reduce using rule 12 (expression -> expression ge expression .)
    }               reduce using rule 12 (expression -> expression ge expression .)
    ;               reduce using rule 12 (expression -> expression ge expression .)
    then            reduce using rule 12 (expression -> expression ge expression .)
    ,               reduce using rule 12 (expression -> expression ge expression .)
    ]               reduce using rule 12 (expression -> expression ge expression .)
    do              reduce using rule 12 (expression -> expression ge expression .)
    )               reduce using rule 12 (expression -> expression ge expression .)
    in              reduce using rule 12 (expression -> expression ge expression .)
    lambda          reduce using rule 12 (expression -> expression ge expression .)
    else            reduce using rule 12 (expression -> expression ge expression .)
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! +               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 66

    (13) expression -> expression le expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression le expression .)
    eq              reduce using rule 13 (expression -> expression le expression .)
    =               reduce using rule 13 (expression -> expression le expression .)
    >               reduce using rule 13 (expression -> expression le expression .)
    <               reduce using rule 13 (expression -> expression le expression .)
    ge              reduce using rule 13 (expression -> expression le expression .)
    le              reduce using rule 13 (expression -> expression le expression .)
    neqs            reduce using rule 13 (expression -> expression le expression .)
    or              reduce using rule 13 (expression -> expression le expression .)
    nand            reduce using rule 13 (expression -> expression le expression .)
    $end            reduce using rule 13 (expression -> expression le expression .)
    }               reduce using rule 13 (expression -> expression le expression .)
    ;               reduce using rule 13 (expression -> expression le expression .)
    then            reduce using rule 13 (expression -> expression le expression .)
    ,               reduce using rule 13 (expression -> expression le expression .)
    ]               reduce using rule 13 (expression -> expression le expression .)
    do              reduce using rule 13 (expression -> expression le expression .)
    )               reduce using rule 13 (expression -> expression le expression .)
    in              reduce using rule 13 (expression -> expression le expression .)
    lambda          reduce using rule 13 (expression -> expression le expression .)
    else            reduce using rule 13 (expression -> expression le expression .)
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! +               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 67

    (14) expression -> expression neqs expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression neqs expression .)
    eq              reduce using rule 14 (expression -> expression neqs expression .)
    =               reduce using rule 14 (expression -> expression neqs expression .)
    neqs            reduce using rule 14 (expression -> expression neqs expression .)
    or              reduce using rule 14 (expression -> expression neqs expression .)
    nand            reduce using rule 14 (expression -> expression neqs expression .)
    $end            reduce using rule 14 (expression -> expression neqs expression .)
    }               reduce using rule 14 (expression -> expression neqs expression .)
    ;               reduce using rule 14 (expression -> expression neqs expression .)
    then            reduce using rule 14 (expression -> expression neqs expression .)
    ,               reduce using rule 14 (expression -> expression neqs expression .)
    ]               reduce using rule 14 (expression -> expression neqs expression .)
    do              reduce using rule 14 (expression -> expression neqs expression .)
    )               reduce using rule 14 (expression -> expression neqs expression .)
    in              reduce using rule 14 (expression -> expression neqs expression .)
    lambda          reduce using rule 14 (expression -> expression neqs expression .)
    else            reduce using rule 14 (expression -> expression neqs expression .)
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! >               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 68

    (15) expression -> expression or expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    or              reduce using rule 15 (expression -> expression or expression .)
    $end            reduce using rule 15 (expression -> expression or expression .)
    }               reduce using rule 15 (expression -> expression or expression .)
    ;               reduce using rule 15 (expression -> expression or expression .)
    then            reduce using rule 15 (expression -> expression or expression .)
    ,               reduce using rule 15 (expression -> expression or expression .)
    ]               reduce using rule 15 (expression -> expression or expression .)
    do              reduce using rule 15 (expression -> expression or expression .)
    )               reduce using rule 15 (expression -> expression or expression .)
    in              reduce using rule 15 (expression -> expression or expression .)
    lambda          reduce using rule 15 (expression -> expression or expression .)
    else            reduce using rule 15 (expression -> expression or expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 15 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 31 ]


state 69

    (16) expression -> expression nand expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 16 (expression -> expression nand expression .)
    or              reduce using rule 16 (expression -> expression nand expression .)
    nand            reduce using rule 16 (expression -> expression nand expression .)
    $end            reduce using rule 16 (expression -> expression nand expression .)
    }               reduce using rule 16 (expression -> expression nand expression .)
    ;               reduce using rule 16 (expression -> expression nand expression .)
    then            reduce using rule 16 (expression -> expression nand expression .)
    ,               reduce using rule 16 (expression -> expression nand expression .)
    ]               reduce using rule 16 (expression -> expression nand expression .)
    do              reduce using rule 16 (expression -> expression nand expression .)
    )               reduce using rule 16 (expression -> expression nand expression .)
    in              reduce using rule 16 (expression -> expression nand expression .)
    lambda          reduce using rule 16 (expression -> expression nand expression .)
    else            reduce using rule 16 (expression -> expression nand expression .)
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! eq              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 23 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]


state 70

    (27) expression -> expression + expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 27 (expression -> expression + expression .)
    eq              reduce using rule 27 (expression -> expression + expression .)
    =               reduce using rule 27 (expression -> expression + expression .)
    >               reduce using rule 27 (expression -> expression + expression .)
    <               reduce using rule 27 (expression -> expression + expression .)
    ge              reduce using rule 27 (expression -> expression + expression .)
    le              reduce using rule 27 (expression -> expression + expression .)
    neqs            reduce using rule 27 (expression -> expression + expression .)
    or              reduce using rule 27 (expression -> expression + expression .)
    nand            reduce using rule 27 (expression -> expression + expression .)
    +               reduce using rule 27 (expression -> expression + expression .)
    -               reduce using rule 27 (expression -> expression + expression .)
    $end            reduce using rule 27 (expression -> expression + expression .)
    }               reduce using rule 27 (expression -> expression + expression .)
    ;               reduce using rule 27 (expression -> expression + expression .)
    then            reduce using rule 27 (expression -> expression + expression .)
    ,               reduce using rule 27 (expression -> expression + expression .)
    ]               reduce using rule 27 (expression -> expression + expression .)
    do              reduce using rule 27 (expression -> expression + expression .)
    )               reduce using rule 27 (expression -> expression + expression .)
    in              reduce using rule 27 (expression -> expression + expression .)
    lambda          reduce using rule 27 (expression -> expression + expression .)
    else            reduce using rule 27 (expression -> expression + expression .)
    *               shift and go to state 35
    /               shift and go to state 36

  ! *               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]


state 71

    (28) expression -> expression - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 28 (expression -> expression - expression .)
    eq              reduce using rule 28 (expression -> expression - expression .)
    =               reduce using rule 28 (expression -> expression - expression .)
    >               reduce using rule 28 (expression -> expression - expression .)
    <               reduce using rule 28 (expression -> expression - expression .)
    ge              reduce using rule 28 (expression -> expression - expression .)
    le              reduce using rule 28 (expression -> expression - expression .)
    neqs            reduce using rule 28 (expression -> expression - expression .)
    or              reduce using rule 28 (expression -> expression - expression .)
    nand            reduce using rule 28 (expression -> expression - expression .)
    +               reduce using rule 28 (expression -> expression - expression .)
    -               reduce using rule 28 (expression -> expression - expression .)
    $end            reduce using rule 28 (expression -> expression - expression .)
    }               reduce using rule 28 (expression -> expression - expression .)
    ;               reduce using rule 28 (expression -> expression - expression .)
    then            reduce using rule 28 (expression -> expression - expression .)
    ,               reduce using rule 28 (expression -> expression - expression .)
    ]               reduce using rule 28 (expression -> expression - expression .)
    do              reduce using rule 28 (expression -> expression - expression .)
    )               reduce using rule 28 (expression -> expression - expression .)
    in              reduce using rule 28 (expression -> expression - expression .)
    lambda          reduce using rule 28 (expression -> expression - expression .)
    else            reduce using rule 28 (expression -> expression - expression .)
    *               shift and go to state 35
    /               shift and go to state 36

  ! *               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]


state 72

    (29) expression -> expression * expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 29 (expression -> expression * expression .)
    eq              reduce using rule 29 (expression -> expression * expression .)
    =               reduce using rule 29 (expression -> expression * expression .)
    >               reduce using rule 29 (expression -> expression * expression .)
    <               reduce using rule 29 (expression -> expression * expression .)
    ge              reduce using rule 29 (expression -> expression * expression .)
    le              reduce using rule 29 (expression -> expression * expression .)
    neqs            reduce using rule 29 (expression -> expression * expression .)
    or              reduce using rule 29 (expression -> expression * expression .)
    nand            reduce using rule 29 (expression -> expression * expression .)
    +               reduce using rule 29 (expression -> expression * expression .)
    -               reduce using rule 29 (expression -> expression * expression .)
    *               reduce using rule 29 (expression -> expression * expression .)
    /               reduce using rule 29 (expression -> expression * expression .)
    $end            reduce using rule 29 (expression -> expression * expression .)
    }               reduce using rule 29 (expression -> expression * expression .)
    ;               reduce using rule 29 (expression -> expression * expression .)
    then            reduce using rule 29 (expression -> expression * expression .)
    ,               reduce using rule 29 (expression -> expression * expression .)
    ]               reduce using rule 29 (expression -> expression * expression .)
    do              reduce using rule 29 (expression -> expression * expression .)
    )               reduce using rule 29 (expression -> expression * expression .)
    in              reduce using rule 29 (expression -> expression * expression .)
    lambda          reduce using rule 29 (expression -> expression * expression .)
    else            reduce using rule 29 (expression -> expression * expression .)

  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]


state 73

    (30) expression -> expression / expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 30 (expression -> expression / expression .)
    eq              reduce using rule 30 (expression -> expression / expression .)
    =               reduce using rule 30 (expression -> expression / expression .)
    >               reduce using rule 30 (expression -> expression / expression .)
    <               reduce using rule 30 (expression -> expression / expression .)
    ge              reduce using rule 30 (expression -> expression / expression .)
    le              reduce using rule 30 (expression -> expression / expression .)
    neqs            reduce using rule 30 (expression -> expression / expression .)
    or              reduce using rule 30 (expression -> expression / expression .)
    nand            reduce using rule 30 (expression -> expression / expression .)
    +               reduce using rule 30 (expression -> expression / expression .)
    -               reduce using rule 30 (expression -> expression / expression .)
    *               reduce using rule 30 (expression -> expression / expression .)
    /               reduce using rule 30 (expression -> expression / expression .)
    $end            reduce using rule 30 (expression -> expression / expression .)
    }               reduce using rule 30 (expression -> expression / expression .)
    ;               reduce using rule 30 (expression -> expression / expression .)
    then            reduce using rule 30 (expression -> expression / expression .)
    ,               reduce using rule 30 (expression -> expression / expression .)
    ]               reduce using rule 30 (expression -> expression / expression .)
    do              reduce using rule 30 (expression -> expression / expression .)
    )               reduce using rule 30 (expression -> expression / expression .)
    in              reduce using rule 30 (expression -> expression / expression .)
    lambda          reduce using rule 30 (expression -> expression / expression .)
    else            reduce using rule 30 (expression -> expression / expression .)

  ! and             [ shift and go to state 23 ]
  ! eq              [ shift and go to state 24 ]
  ! =               [ shift and go to state 25 ]
  ! >               [ shift and go to state 26 ]
  ! <               [ shift and go to state 27 ]
  ! ge              [ shift and go to state 28 ]
  ! le              [ shift and go to state 29 ]
  ! neqs            [ shift and go to state 30 ]
  ! or              [ shift and go to state 31 ]
  ! nand            [ shift and go to state 32 ]
  ! +               [ shift and go to state 33 ]
  ! -               [ shift and go to state 34 ]
  ! *               [ shift and go to state 35 ]
  ! /               [ shift and go to state 36 ]


state 74

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 95

state 75

    (18) expression -> ID assign expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 18 (expression -> ID assign expression .)
    }               reduce using rule 18 (expression -> ID assign expression .)
    ;               reduce using rule 18 (expression -> ID assign expression .)
    then            reduce using rule 18 (expression -> ID assign expression .)
    ,               reduce using rule 18 (expression -> ID assign expression .)
    ]               reduce using rule 18 (expression -> ID assign expression .)
    do              reduce using rule 18 (expression -> ID assign expression .)
    )               reduce using rule 18 (expression -> ID assign expression .)
    in              reduce using rule 18 (expression -> ID assign expression .)
    lambda          reduce using rule 18 (expression -> ID assign expression .)
    else            reduce using rule 18 (expression -> ID assign expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 18 (expression -> ID assign expression .) ]


state 76

    (24) expression -> ID . ID .

    and             reduce using rule 24 (expression -> ID . ID .)
    eq              reduce using rule 24 (expression -> ID . ID .)
    =               reduce using rule 24 (expression -> ID . ID .)
    >               reduce using rule 24 (expression -> ID . ID .)
    <               reduce using rule 24 (expression -> ID . ID .)
    ge              reduce using rule 24 (expression -> ID . ID .)
    le              reduce using rule 24 (expression -> ID . ID .)
    neqs            reduce using rule 24 (expression -> ID . ID .)
    or              reduce using rule 24 (expression -> ID . ID .)
    nand            reduce using rule 24 (expression -> ID . ID .)
    +               reduce using rule 24 (expression -> ID . ID .)
    -               reduce using rule 24 (expression -> ID . ID .)
    *               reduce using rule 24 (expression -> ID . ID .)
    /               reduce using rule 24 (expression -> ID . ID .)
    $end            reduce using rule 24 (expression -> ID . ID .)
    }               reduce using rule 24 (expression -> ID . ID .)
    ;               reduce using rule 24 (expression -> ID . ID .)
    then            reduce using rule 24 (expression -> ID . ID .)
    ,               reduce using rule 24 (expression -> ID . ID .)
    ]               reduce using rule 24 (expression -> ID . ID .)
    do              reduce using rule 24 (expression -> ID . ID .)
    )               reduce using rule 24 (expression -> ID . ID .)
    in              reduce using rule 24 (expression -> ID . ID .)
    lambda          reduce using rule 24 (expression -> ID . ID .)
    else            reduce using rule 24 (expression -> ID . ID .)


state 77

    (36) expression -> ID [ NUMBER . ]

    ]               shift and go to state 96


state 78

    (45) expression -> ID lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 45 (expression -> ID lambda expression .)
    }               reduce using rule 45 (expression -> ID lambda expression .)
    ;               reduce using rule 45 (expression -> ID lambda expression .)
    then            reduce using rule 45 (expression -> ID lambda expression .)
    ,               reduce using rule 45 (expression -> ID lambda expression .)
    ]               reduce using rule 45 (expression -> ID lambda expression .)
    do              reduce using rule 45 (expression -> ID lambda expression .)
    )               reduce using rule 45 (expression -> ID lambda expression .)
    in              reduce using rule 45 (expression -> ID lambda expression .)
    lambda          reduce using rule 45 (expression -> ID lambda expression .)
    else            reduce using rule 45 (expression -> ID lambda expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! eq              [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! =               [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! >               [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! <               [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! ge              [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! le              [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! neqs            [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! or              [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! nand            [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! +               [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! -               [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! *               [ reduce using rule 45 (expression -> ID lambda expression .) ]
  ! /               [ reduce using rule 45 (expression -> ID lambda expression .) ]


state 79

    (48) expression -> ID ( ) .

    and             reduce using rule 48 (expression -> ID ( ) .)
    eq              reduce using rule 48 (expression -> ID ( ) .)
    =               reduce using rule 48 (expression -> ID ( ) .)
    >               reduce using rule 48 (expression -> ID ( ) .)
    <               reduce using rule 48 (expression -> ID ( ) .)
    ge              reduce using rule 48 (expression -> ID ( ) .)
    le              reduce using rule 48 (expression -> ID ( ) .)
    neqs            reduce using rule 48 (expression -> ID ( ) .)
    or              reduce using rule 48 (expression -> ID ( ) .)
    nand            reduce using rule 48 (expression -> ID ( ) .)
    +               reduce using rule 48 (expression -> ID ( ) .)
    -               reduce using rule 48 (expression -> ID ( ) .)
    *               reduce using rule 48 (expression -> ID ( ) .)
    /               reduce using rule 48 (expression -> ID ( ) .)
    $end            reduce using rule 48 (expression -> ID ( ) .)
    }               reduce using rule 48 (expression -> ID ( ) .)
    ;               reduce using rule 48 (expression -> ID ( ) .)
    then            reduce using rule 48 (expression -> ID ( ) .)
    ,               reduce using rule 48 (expression -> ID ( ) .)
    ]               reduce using rule 48 (expression -> ID ( ) .)
    do              reduce using rule 48 (expression -> ID ( ) .)
    )               reduce using rule 48 (expression -> ID ( ) .)
    in              reduce using rule 48 (expression -> ID ( ) .)
    lambda          reduce using rule 48 (expression -> ID ( ) .)
    else            reduce using rule 48 (expression -> ID ( ) .)


state 80

    (49) expression -> ID ( id_list . )

    )               shift and go to state 97


state 81

    (4) expression -> import ID as . ID

    ID              shift and go to state 98


state 82

    (5) expression -> letrec ID assign . expression lambda expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 99

state 83

    (6) expression -> { sequence } .

    and             reduce using rule 6 (expression -> { sequence } .)
    eq              reduce using rule 6 (expression -> { sequence } .)
    =               reduce using rule 6 (expression -> { sequence } .)
    >               reduce using rule 6 (expression -> { sequence } .)
    <               reduce using rule 6 (expression -> { sequence } .)
    ge              reduce using rule 6 (expression -> { sequence } .)
    le              reduce using rule 6 (expression -> { sequence } .)
    neqs            reduce using rule 6 (expression -> { sequence } .)
    or              reduce using rule 6 (expression -> { sequence } .)
    nand            reduce using rule 6 (expression -> { sequence } .)
    +               reduce using rule 6 (expression -> { sequence } .)
    -               reduce using rule 6 (expression -> { sequence } .)
    *               reduce using rule 6 (expression -> { sequence } .)
    /               reduce using rule 6 (expression -> { sequence } .)
    $end            reduce using rule 6 (expression -> { sequence } .)
    }               reduce using rule 6 (expression -> { sequence } .)
    ;               reduce using rule 6 (expression -> { sequence } .)
    then            reduce using rule 6 (expression -> { sequence } .)
    ,               reduce using rule 6 (expression -> { sequence } .)
    ]               reduce using rule 6 (expression -> { sequence } .)
    do              reduce using rule 6 (expression -> { sequence } .)
    )               reduce using rule 6 (expression -> { sequence } .)
    in              reduce using rule 6 (expression -> { sequence } .)
    lambda          reduce using rule 6 (expression -> { sequence } .)
    else            reduce using rule 6 (expression -> { sequence } .)


state 84

    (25) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 100

state 85

    (20) expression -> struct { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 101
    ;               shift and go to state 84


state 86

    (23) expression -> if expression then . expression
    (32) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 102

state 87

    (31) expression -> [ id_list ] .

    and             reduce using rule 31 (expression -> [ id_list ] .)
    eq              reduce using rule 31 (expression -> [ id_list ] .)
    =               reduce using rule 31 (expression -> [ id_list ] .)
    >               reduce using rule 31 (expression -> [ id_list ] .)
    <               reduce using rule 31 (expression -> [ id_list ] .)
    ge              reduce using rule 31 (expression -> [ id_list ] .)
    le              reduce using rule 31 (expression -> [ id_list ] .)
    neqs            reduce using rule 31 (expression -> [ id_list ] .)
    or              reduce using rule 31 (expression -> [ id_list ] .)
    nand            reduce using rule 31 (expression -> [ id_list ] .)
    +               reduce using rule 31 (expression -> [ id_list ] .)
    -               reduce using rule 31 (expression -> [ id_list ] .)
    *               reduce using rule 31 (expression -> [ id_list ] .)
    /               reduce using rule 31 (expression -> [ id_list ] .)
    $end            reduce using rule 31 (expression -> [ id_list ] .)
    }               reduce using rule 31 (expression -> [ id_list ] .)
    ;               reduce using rule 31 (expression -> [ id_list ] .)
    then            reduce using rule 31 (expression -> [ id_list ] .)
    ,               reduce using rule 31 (expression -> [ id_list ] .)
    ]               reduce using rule 31 (expression -> [ id_list ] .)
    do              reduce using rule 31 (expression -> [ id_list ] .)
    )               reduce using rule 31 (expression -> [ id_list ] .)
    in              reduce using rule 31 (expression -> [ id_list ] .)
    lambda          reduce using rule 31 (expression -> [ id_list ] .)
    else            reduce using rule 31 (expression -> [ id_list ] .)


state 88

    (33) id_list -> expression , . id_list
    (33) id_list -> . expression , id_list
    (34) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 52
    id_list                        shift and go to state 103

state 89

    (35) expression -> extend struct { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    sequence                       shift and go to state 104
    expression                     shift and go to state 47

state 90

    (38) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 105

state 91

    (39) expression -> ( id_list ) .
    (46) expression -> ( id_list ) . lambda expression

  ! shift/reduce conflict for lambda resolved as shift
    and             reduce using rule 39 (expression -> ( id_list ) .)
    eq              reduce using rule 39 (expression -> ( id_list ) .)
    =               reduce using rule 39 (expression -> ( id_list ) .)
    >               reduce using rule 39 (expression -> ( id_list ) .)
    <               reduce using rule 39 (expression -> ( id_list ) .)
    ge              reduce using rule 39 (expression -> ( id_list ) .)
    le              reduce using rule 39 (expression -> ( id_list ) .)
    neqs            reduce using rule 39 (expression -> ( id_list ) .)
    or              reduce using rule 39 (expression -> ( id_list ) .)
    nand            reduce using rule 39 (expression -> ( id_list ) .)
    +               reduce using rule 39 (expression -> ( id_list ) .)
    -               reduce using rule 39 (expression -> ( id_list ) .)
    *               reduce using rule 39 (expression -> ( id_list ) .)
    /               reduce using rule 39 (expression -> ( id_list ) .)
    $end            reduce using rule 39 (expression -> ( id_list ) .)
    }               reduce using rule 39 (expression -> ( id_list ) .)
    ;               reduce using rule 39 (expression -> ( id_list ) .)
    then            reduce using rule 39 (expression -> ( id_list ) .)
    ,               reduce using rule 39 (expression -> ( id_list ) .)
    ]               reduce using rule 39 (expression -> ( id_list ) .)
    do              reduce using rule 39 (expression -> ( id_list ) .)
    )               reduce using rule 39 (expression -> ( id_list ) .)
    in              reduce using rule 39 (expression -> ( id_list ) .)
    else            reduce using rule 39 (expression -> ( id_list ) .)
    lambda          shift and go to state 106

  ! lambda          [ reduce using rule 39 (expression -> ( id_list ) .) ]


state 92

    (42) expression -> ( expression ) .

    and             reduce using rule 42 (expression -> ( expression ) .)
    eq              reduce using rule 42 (expression -> ( expression ) .)
    =               reduce using rule 42 (expression -> ( expression ) .)
    >               reduce using rule 42 (expression -> ( expression ) .)
    <               reduce using rule 42 (expression -> ( expression ) .)
    ge              reduce using rule 42 (expression -> ( expression ) .)
    le              reduce using rule 42 (expression -> ( expression ) .)
    neqs            reduce using rule 42 (expression -> ( expression ) .)
    or              reduce using rule 42 (expression -> ( expression ) .)
    nand            reduce using rule 42 (expression -> ( expression ) .)
    +               reduce using rule 42 (expression -> ( expression ) .)
    -               reduce using rule 42 (expression -> ( expression ) .)
    *               reduce using rule 42 (expression -> ( expression ) .)
    /               reduce using rule 42 (expression -> ( expression ) .)
    $end            reduce using rule 42 (expression -> ( expression ) .)
    }               reduce using rule 42 (expression -> ( expression ) .)
    ;               reduce using rule 42 (expression -> ( expression ) .)
    then            reduce using rule 42 (expression -> ( expression ) .)
    ,               reduce using rule 42 (expression -> ( expression ) .)
    ]               reduce using rule 42 (expression -> ( expression ) .)
    do              reduce using rule 42 (expression -> ( expression ) .)
    )               reduce using rule 42 (expression -> ( expression ) .)
    in              reduce using rule 42 (expression -> ( expression ) .)
    lambda          reduce using rule 42 (expression -> ( expression ) .)
    else            reduce using rule 42 (expression -> ( expression ) .)


state 93

    (43) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 107

state 94

    (47) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 108

state 95

    (2) expression -> local ID assign expression . in expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    in              shift and go to state 109
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 96

    (36) expression -> ID [ NUMBER ] .

    and             reduce using rule 36 (expression -> ID [ NUMBER ] .)
    eq              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    ge              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    le              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    neqs            reduce using rule 36 (expression -> ID [ NUMBER ] .)
    or              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    nand            reduce using rule 36 (expression -> ID [ NUMBER ] .)
    +               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 36 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    then            reduce using rule 36 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    do              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    in              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    lambda          reduce using rule 36 (expression -> ID [ NUMBER ] .)
    else            reduce using rule 36 (expression -> ID [ NUMBER ] .)


state 97

    (49) expression -> ID ( id_list ) .

    and             reduce using rule 49 (expression -> ID ( id_list ) .)
    eq              reduce using rule 49 (expression -> ID ( id_list ) .)
    =               reduce using rule 49 (expression -> ID ( id_list ) .)
    >               reduce using rule 49 (expression -> ID ( id_list ) .)
    <               reduce using rule 49 (expression -> ID ( id_list ) .)
    ge              reduce using rule 49 (expression -> ID ( id_list ) .)
    le              reduce using rule 49 (expression -> ID ( id_list ) .)
    neqs            reduce using rule 49 (expression -> ID ( id_list ) .)
    or              reduce using rule 49 (expression -> ID ( id_list ) .)
    nand            reduce using rule 49 (expression -> ID ( id_list ) .)
    +               reduce using rule 49 (expression -> ID ( id_list ) .)
    -               reduce using rule 49 (expression -> ID ( id_list ) .)
    *               reduce using rule 49 (expression -> ID ( id_list ) .)
    /               reduce using rule 49 (expression -> ID ( id_list ) .)
    $end            reduce using rule 49 (expression -> ID ( id_list ) .)
    }               reduce using rule 49 (expression -> ID ( id_list ) .)
    ;               reduce using rule 49 (expression -> ID ( id_list ) .)
    then            reduce using rule 49 (expression -> ID ( id_list ) .)
    ,               reduce using rule 49 (expression -> ID ( id_list ) .)
    ]               reduce using rule 49 (expression -> ID ( id_list ) .)
    do              reduce using rule 49 (expression -> ID ( id_list ) .)
    )               reduce using rule 49 (expression -> ID ( id_list ) .)
    in              reduce using rule 49 (expression -> ID ( id_list ) .)
    lambda          reduce using rule 49 (expression -> ID ( id_list ) .)
    else            reduce using rule 49 (expression -> ID ( id_list ) .)


state 98

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    ,               reduce using rule 4 (expression -> import ID as ID .)
    ]               reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    lambda          reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 99

    (5) expression -> letrec ID assign expression . lambda expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    lambda          shift and go to state 110
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 100

    (25) sequence -> sequence ; expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    }               reduce using rule 25 (sequence -> sequence ; expression .)
    ;               reduce using rule 25 (sequence -> sequence ; expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 101

    (20) expression -> struct { sequence } .

    and             reduce using rule 20 (expression -> struct { sequence } .)
    eq              reduce using rule 20 (expression -> struct { sequence } .)
    =               reduce using rule 20 (expression -> struct { sequence } .)
    >               reduce using rule 20 (expression -> struct { sequence } .)
    <               reduce using rule 20 (expression -> struct { sequence } .)
    ge              reduce using rule 20 (expression -> struct { sequence } .)
    le              reduce using rule 20 (expression -> struct { sequence } .)
    neqs            reduce using rule 20 (expression -> struct { sequence } .)
    or              reduce using rule 20 (expression -> struct { sequence } .)
    nand            reduce using rule 20 (expression -> struct { sequence } .)
    +               reduce using rule 20 (expression -> struct { sequence } .)
    -               reduce using rule 20 (expression -> struct { sequence } .)
    *               reduce using rule 20 (expression -> struct { sequence } .)
    /               reduce using rule 20 (expression -> struct { sequence } .)
    $end            reduce using rule 20 (expression -> struct { sequence } .)
    }               reduce using rule 20 (expression -> struct { sequence } .)
    ;               reduce using rule 20 (expression -> struct { sequence } .)
    then            reduce using rule 20 (expression -> struct { sequence } .)
    ,               reduce using rule 20 (expression -> struct { sequence } .)
    ]               reduce using rule 20 (expression -> struct { sequence } .)
    do              reduce using rule 20 (expression -> struct { sequence } .)
    )               reduce using rule 20 (expression -> struct { sequence } .)
    in              reduce using rule 20 (expression -> struct { sequence } .)
    lambda          reduce using rule 20 (expression -> struct { sequence } .)
    else            reduce using rule 20 (expression -> struct { sequence } .)


state 102

    (23) expression -> if expression then expression .
    (32) expression -> if expression then expression . else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 23 (expression -> if expression then expression .)
    }               reduce using rule 23 (expression -> if expression then expression .)
    ;               reduce using rule 23 (expression -> if expression then expression .)
    then            reduce using rule 23 (expression -> if expression then expression .)
    ,               reduce using rule 23 (expression -> if expression then expression .)
    ]               reduce using rule 23 (expression -> if expression then expression .)
    do              reduce using rule 23 (expression -> if expression then expression .)
    )               reduce using rule 23 (expression -> if expression then expression .)
    in              reduce using rule 23 (expression -> if expression then expression .)
    lambda          reduce using rule 23 (expression -> if expression then expression .)
    else            shift and go to state 111
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 23 (expression -> if expression then expression .) ]


state 103

    (33) id_list -> expression , id_list .

    ]               reduce using rule 33 (id_list -> expression , id_list .)
    )               reduce using rule 33 (id_list -> expression , id_list .)


state 104

    (35) expression -> extend struct { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 112
    ;               shift and go to state 84


state 105

    (38) expression -> loop expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 38 (expression -> loop expression do expression .)
    }               reduce using rule 38 (expression -> loop expression do expression .)
    ;               reduce using rule 38 (expression -> loop expression do expression .)
    then            reduce using rule 38 (expression -> loop expression do expression .)
    ,               reduce using rule 38 (expression -> loop expression do expression .)
    ]               reduce using rule 38 (expression -> loop expression do expression .)
    do              reduce using rule 38 (expression -> loop expression do expression .)
    )               reduce using rule 38 (expression -> loop expression do expression .)
    in              reduce using rule 38 (expression -> loop expression do expression .)
    lambda          reduce using rule 38 (expression -> loop expression do expression .)
    else            reduce using rule 38 (expression -> loop expression do expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 38 (expression -> loop expression do expression .) ]


state 106

    (46) expression -> ( id_list ) lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 113

state 107

    (43) expression -> for expression ; expression . ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ;               shift and go to state 114
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 108

    (47) expression -> while expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 47 (expression -> while expression do expression .)
    }               reduce using rule 47 (expression -> while expression do expression .)
    ;               reduce using rule 47 (expression -> while expression do expression .)
    then            reduce using rule 47 (expression -> while expression do expression .)
    ,               reduce using rule 47 (expression -> while expression do expression .)
    ]               reduce using rule 47 (expression -> while expression do expression .)
    do              reduce using rule 47 (expression -> while expression do expression .)
    )               reduce using rule 47 (expression -> while expression do expression .)
    in              reduce using rule 47 (expression -> while expression do expression .)
    lambda          reduce using rule 47 (expression -> while expression do expression .)
    else            reduce using rule 47 (expression -> while expression do expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 47 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 47 (expression -> while expression do expression .) ]


state 109

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 115

state 110

    (5) expression -> letrec ID assign expression lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 116

state 111

    (32) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 117

state 112

    (35) expression -> extend struct { sequence } .

    and             reduce using rule 35 (expression -> extend struct { sequence } .)
    eq              reduce using rule 35 (expression -> extend struct { sequence } .)
    =               reduce using rule 35 (expression -> extend struct { sequence } .)
    >               reduce using rule 35 (expression -> extend struct { sequence } .)
    <               reduce using rule 35 (expression -> extend struct { sequence } .)
    ge              reduce using rule 35 (expression -> extend struct { sequence } .)
    le              reduce using rule 35 (expression -> extend struct { sequence } .)
    neqs            reduce using rule 35 (expression -> extend struct { sequence } .)
    or              reduce using rule 35 (expression -> extend struct { sequence } .)
    nand            reduce using rule 35 (expression -> extend struct { sequence } .)
    +               reduce using rule 35 (expression -> extend struct { sequence } .)
    -               reduce using rule 35 (expression -> extend struct { sequence } .)
    *               reduce using rule 35 (expression -> extend struct { sequence } .)
    /               reduce using rule 35 (expression -> extend struct { sequence } .)
    $end            reduce using rule 35 (expression -> extend struct { sequence } .)
    }               reduce using rule 35 (expression -> extend struct { sequence } .)
    ;               reduce using rule 35 (expression -> extend struct { sequence } .)
    then            reduce using rule 35 (expression -> extend struct { sequence } .)
    ,               reduce using rule 35 (expression -> extend struct { sequence } .)
    ]               reduce using rule 35 (expression -> extend struct { sequence } .)
    do              reduce using rule 35 (expression -> extend struct { sequence } .)
    )               reduce using rule 35 (expression -> extend struct { sequence } .)
    in              reduce using rule 35 (expression -> extend struct { sequence } .)
    lambda          reduce using rule 35 (expression -> extend struct { sequence } .)
    else            reduce using rule 35 (expression -> extend struct { sequence } .)


state 113

    (46) expression -> ( id_list ) lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    }               reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    ;               reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    then            reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    ,               reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    ]               reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    do              reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    )               reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    in              reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    lambda          reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    else            reduce using rule 46 (expression -> ( id_list ) lambda expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! eq              [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! =               [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! >               [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! <               [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! ge              [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! le              [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! neqs            [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! or              [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! nand            [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! +               [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! -               [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! *               [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]
  ! /               [ reduce using rule 46 (expression -> ( id_list ) lambda expression .) ]


state 114

    (43) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 118

state 115

    (2) expression -> local ID assign expression in expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    ,               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ]               reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    lambda          reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 116

    (5) expression -> letrec ID assign expression lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    }               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ;               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    then            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ,               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ]               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    do              reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    )               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    in              reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    lambda          reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    else            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]


state 117

    (32) expression -> if expression then expression else expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 32 (expression -> if expression then expression else expression .)
    }               reduce using rule 32 (expression -> if expression then expression else expression .)
    ;               reduce using rule 32 (expression -> if expression then expression else expression .)
    then            reduce using rule 32 (expression -> if expression then expression else expression .)
    ,               reduce using rule 32 (expression -> if expression then expression else expression .)
    ]               reduce using rule 32 (expression -> if expression then expression else expression .)
    do              reduce using rule 32 (expression -> if expression then expression else expression .)
    )               reduce using rule 32 (expression -> if expression then expression else expression .)
    in              reduce using rule 32 (expression -> if expression then expression else expression .)
    lambda          reduce using rule 32 (expression -> if expression then expression else expression .)
    else            reduce using rule 32 (expression -> if expression then expression else expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]


state 118

    (43) expression -> for expression ; expression ; expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 119
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36


state 119

    (43) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (24) expression -> . ID . ID
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ id_list ]
    (32) expression -> . if expression then expression else expression
    (35) expression -> . extend struct { sequence }
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( id_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . lambda expression
    (45) expression -> . ID lambda expression
    (46) expression -> . ( id_list ) lambda expression
    (47) expression -> . while expression do expression
    (48) expression -> . ID ( )
    (49) expression -> . ID ( id_list )

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    extend          shift and go to state 15
    not             shift and go to state 17
    loop            shift and go to state 18
    (               shift and go to state 19
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 120

state 120

    (43) expression -> for expression ; expression ; expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ,               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ]               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    lambda          reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 23
    eq              shift and go to state 24
    =               shift and go to state 25
    >               shift and go to state 26
    <               shift and go to state 27
    ge              shift and go to state 28
    le              shift and go to state 29
    neqs            shift and go to state 30
    or              shift and go to state 31
    nand            shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    *               shift and go to state 35
    /               shift and go to state 36

  ! and             [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for lambda in state 4 resolved as shift
WARNING: shift/reduce conflict for ) in state 57 resolved as shift
WARNING: shift/reduce conflict for lambda in state 91 resolved as shift
WARNING: shift/reduce conflict for and in state 115 resolved as shift
WARNING: shift/reduce conflict for eq in state 115 resolved as shift
WARNING: shift/reduce conflict for = in state 115 resolved as shift
WARNING: shift/reduce conflict for > in state 115 resolved as shift
WARNING: shift/reduce conflict for < in state 115 resolved as shift
WARNING: shift/reduce conflict for ge in state 115 resolved as shift
WARNING: shift/reduce conflict for le in state 115 resolved as shift
WARNING: shift/reduce conflict for neqs in state 115 resolved as shift
WARNING: shift/reduce conflict for or in state 115 resolved as shift
WARNING: shift/reduce conflict for nand in state 115 resolved as shift
WARNING: shift/reduce conflict for + in state 115 resolved as shift
WARNING: shift/reduce conflict for - in state 115 resolved as shift
WARNING: shift/reduce conflict for * in state 115 resolved as shift
WARNING: shift/reduce conflict for / in state 115 resolved as shift
