Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    array
    list

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> ID lambda expression
Rule 6     expression -> lambda expression
Rule 7     expression -> letrec ID assign expression lambda expression
Rule 8     expression -> { sequence }
Rule 9     expression -> struct { sequence }
Rule 10    expression -> expression and expression
Rule 11    expression -> expression eq expression
Rule 12    expression -> expression = expression
Rule 13    expression -> expression > expression
Rule 14    expression -> expression < expression
Rule 15    expression -> expression ge expression
Rule 16    expression -> expression le expression
Rule 17    expression -> expression neqs expression
Rule 18    expression -> expression or expression
Rule 19    expression -> expression nand expression
Rule 20    expression -> string
Rule 21    expression -> ID assign expression
Rule 22    expression -> import ID
Rule 23    sequence -> sequence ; expression
Rule 24    sequence -> expression
Rule 25    expression -> ID . ID
Rule 26    expression -> - expression
Rule 27    expression -> char
Rule 28    expression -> if expression then expression
Rule 29    expression -> expression + expression
Rule 30    expression -> expression - expression
Rule 31    expression -> expression * expression
Rule 32    expression -> expression / expression
Rule 33    id_list -> expression , id_list
Rule 34    id_list -> expression
Rule 35    expression -> [ id_list ]
Rule 36    expression -> if expression then expression else expression
Rule 37    expression -> ID [ NUMBER ]
Rule 38    expression -> not expression
Rule 39    expression -> loop expression do expression
Rule 40    expression -> ( id_list )
Rule 41    expression -> NUMBER
Rule 42    expression -> ( id_list ) lambda expression
Rule 43    expression -> BOOL
Rule 44    expression -> ( expression )
Rule 45    expression -> ID ( )
Rule 46    expression -> ID ( id_list )
Rule 47    expression -> for expression ; expression ; expression do expression
Rule 48    expression -> while expression do expression

Terminals, with rules where they appear

(                    : 40 42 44 45 46
)                    : 40 42 44 45 46
*                    : 31
+                    : 29
,                    : 33
-                    : 26 30
.                    : 25
/                    : 32
;                    : 23 47 47
<                    : 14
=                    : 12
>                    : 13
BOOL                 : 43
ID                   : 2 3 4 4 5 7 21 22 25 25 37 45 46
NUMBER               : 37 41
[                    : 35 37
]                    : 35 37
and                  : 10
array                : 
as                   : 4
assign               : 2 7 21
char                 : 27
do                   : 39 47 48
else                 : 36
eq                   : 11
error                : 
float                : 1
for                  : 47
ge                   : 15
if                   : 28 36
import               : 4 22
in                   : 2
lambda               : 5 6 7 42
le                   : 16
letrec               : 7
list                 : 
local                : 2
loop                 : 39
nand                 : 19
neqs                 : 17
not                  : 38
or                   : 18
string               : 20
struct               : 9
then                 : 28 36
while                : 48
{                    : 8 9
}                    : 8 9

Nonterminals, with rules where they appear

expression           : 2 2 5 6 7 7 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 21 23 24 26 28 28 29 29 30 30 31 31 32 32 33 34 36 36 36 38 39 39 42 44 47 47 47 47 48 48 0
id_list              : 33 35 40 42 46
sequence             : 8 9 23

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    ,               reduce using rule 1 (expression -> float .)
    ]               reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    lambda          reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 36


state 4

    (3) expression -> ID .
    (5) expression -> ID . lambda expression
    (21) expression -> ID . assign expression
    (25) expression -> ID . . ID
    (37) expression -> ID . [ NUMBER ]
    (45) expression -> ID . ( )
    (46) expression -> ID . ( id_list )

  ! shift/reduce conflict for lambda resolved as shift
    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    ,               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    lambda          shift and go to state 37
    assign          shift and go to state 38
    .               shift and go to state 39
    [               shift and go to state 40
    (               shift and go to state 41

  ! lambda          [ reduce using rule 3 (expression -> ID .) ]


state 5

    (4) expression -> import . ID as ID
    (22) expression -> import . ID

    ID              shift and go to state 42


state 6

    (6) expression -> lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 43

state 7

    (7) expression -> letrec . ID assign expression lambda expression

    ID              shift and go to state 44


state 8

    (8) expression -> { . sequence }
    (23) sequence -> . sequence ; expression
    (24) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    sequence                       shift and go to state 45
    expression                     shift and go to state 46

state 9

    (9) expression -> struct . { sequence }

    {               shift and go to state 47


state 10

    (20) expression -> string .

    and             reduce using rule 20 (expression -> string .)
    eq              reduce using rule 20 (expression -> string .)
    =               reduce using rule 20 (expression -> string .)
    >               reduce using rule 20 (expression -> string .)
    <               reduce using rule 20 (expression -> string .)
    ge              reduce using rule 20 (expression -> string .)
    le              reduce using rule 20 (expression -> string .)
    neqs            reduce using rule 20 (expression -> string .)
    or              reduce using rule 20 (expression -> string .)
    nand            reduce using rule 20 (expression -> string .)
    +               reduce using rule 20 (expression -> string .)
    -               reduce using rule 20 (expression -> string .)
    *               reduce using rule 20 (expression -> string .)
    /               reduce using rule 20 (expression -> string .)
    $end            reduce using rule 20 (expression -> string .)
    }               reduce using rule 20 (expression -> string .)
    ;               reduce using rule 20 (expression -> string .)
    then            reduce using rule 20 (expression -> string .)
    ,               reduce using rule 20 (expression -> string .)
    ]               reduce using rule 20 (expression -> string .)
    do              reduce using rule 20 (expression -> string .)
    )               reduce using rule 20 (expression -> string .)
    in              reduce using rule 20 (expression -> string .)
    lambda          reduce using rule 20 (expression -> string .)
    else            reduce using rule 20 (expression -> string .)


state 11

    (26) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 48

state 12

    (27) expression -> char .

    and             reduce using rule 27 (expression -> char .)
    eq              reduce using rule 27 (expression -> char .)
    =               reduce using rule 27 (expression -> char .)
    >               reduce using rule 27 (expression -> char .)
    <               reduce using rule 27 (expression -> char .)
    ge              reduce using rule 27 (expression -> char .)
    le              reduce using rule 27 (expression -> char .)
    neqs            reduce using rule 27 (expression -> char .)
    or              reduce using rule 27 (expression -> char .)
    nand            reduce using rule 27 (expression -> char .)
    +               reduce using rule 27 (expression -> char .)
    -               reduce using rule 27 (expression -> char .)
    *               reduce using rule 27 (expression -> char .)
    /               reduce using rule 27 (expression -> char .)
    $end            reduce using rule 27 (expression -> char .)
    }               reduce using rule 27 (expression -> char .)
    ;               reduce using rule 27 (expression -> char .)
    then            reduce using rule 27 (expression -> char .)
    ,               reduce using rule 27 (expression -> char .)
    ]               reduce using rule 27 (expression -> char .)
    do              reduce using rule 27 (expression -> char .)
    )               reduce using rule 27 (expression -> char .)
    in              reduce using rule 27 (expression -> char .)
    lambda          reduce using rule 27 (expression -> char .)
    else            reduce using rule 27 (expression -> char .)


state 13

    (28) expression -> if . expression then expression
    (36) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 49

state 14

    (35) expression -> [ . id_list ]
    (33) id_list -> . expression , id_list
    (34) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    id_list                        shift and go to state 50
    expression                     shift and go to state 51

state 15

    (41) expression -> NUMBER .

    and             reduce using rule 41 (expression -> NUMBER .)
    eq              reduce using rule 41 (expression -> NUMBER .)
    =               reduce using rule 41 (expression -> NUMBER .)
    >               reduce using rule 41 (expression -> NUMBER .)
    <               reduce using rule 41 (expression -> NUMBER .)
    ge              reduce using rule 41 (expression -> NUMBER .)
    le              reduce using rule 41 (expression -> NUMBER .)
    neqs            reduce using rule 41 (expression -> NUMBER .)
    or              reduce using rule 41 (expression -> NUMBER .)
    nand            reduce using rule 41 (expression -> NUMBER .)
    +               reduce using rule 41 (expression -> NUMBER .)
    -               reduce using rule 41 (expression -> NUMBER .)
    *               reduce using rule 41 (expression -> NUMBER .)
    /               reduce using rule 41 (expression -> NUMBER .)
    $end            reduce using rule 41 (expression -> NUMBER .)
    }               reduce using rule 41 (expression -> NUMBER .)
    ;               reduce using rule 41 (expression -> NUMBER .)
    then            reduce using rule 41 (expression -> NUMBER .)
    ,               reduce using rule 41 (expression -> NUMBER .)
    ]               reduce using rule 41 (expression -> NUMBER .)
    do              reduce using rule 41 (expression -> NUMBER .)
    )               reduce using rule 41 (expression -> NUMBER .)
    in              reduce using rule 41 (expression -> NUMBER .)
    lambda          reduce using rule 41 (expression -> NUMBER .)
    else            reduce using rule 41 (expression -> NUMBER .)


state 16

    (38) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 52

state 17

    (39) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 53

state 18

    (40) expression -> ( . id_list )
    (42) expression -> ( . id_list ) lambda expression
    (44) expression -> ( . expression )
    (33) id_list -> . expression , id_list
    (34) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    id_list                        shift and go to state 54
    expression                     shift and go to state 55

state 19

    (43) expression -> BOOL .

    and             reduce using rule 43 (expression -> BOOL .)
    eq              reduce using rule 43 (expression -> BOOL .)
    =               reduce using rule 43 (expression -> BOOL .)
    >               reduce using rule 43 (expression -> BOOL .)
    <               reduce using rule 43 (expression -> BOOL .)
    ge              reduce using rule 43 (expression -> BOOL .)
    le              reduce using rule 43 (expression -> BOOL .)
    neqs            reduce using rule 43 (expression -> BOOL .)
    or              reduce using rule 43 (expression -> BOOL .)
    nand            reduce using rule 43 (expression -> BOOL .)
    +               reduce using rule 43 (expression -> BOOL .)
    -               reduce using rule 43 (expression -> BOOL .)
    *               reduce using rule 43 (expression -> BOOL .)
    /               reduce using rule 43 (expression -> BOOL .)
    $end            reduce using rule 43 (expression -> BOOL .)
    }               reduce using rule 43 (expression -> BOOL .)
    ;               reduce using rule 43 (expression -> BOOL .)
    then            reduce using rule 43 (expression -> BOOL .)
    ,               reduce using rule 43 (expression -> BOOL .)
    ]               reduce using rule 43 (expression -> BOOL .)
    do              reduce using rule 43 (expression -> BOOL .)
    )               reduce using rule 43 (expression -> BOOL .)
    in              reduce using rule 43 (expression -> BOOL .)
    lambda          reduce using rule 43 (expression -> BOOL .)
    else            reduce using rule 43 (expression -> BOOL .)


state 20

    (47) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 56

state 21

    (48) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 57

state 22

    (10) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 58

state 23

    (11) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 59

state 24

    (12) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 60

state 25

    (13) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 61

state 26

    (14) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 62

state 27

    (15) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 63

state 28

    (16) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 64

state 29

    (17) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 65

state 30

    (18) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 66

state 31

    (19) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 67

state 32

    (29) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 68

state 33

    (30) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 69

state 34

    (31) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 70

state 35

    (32) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 71

state 36

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 72


state 37

    (5) expression -> ID lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 73

state 38

    (21) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 74

state 39

    (25) expression -> ID . . ID

    ID              shift and go to state 75


state 40

    (37) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 76


state 41

    (45) expression -> ID ( . )
    (46) expression -> ID ( . id_list )
    (33) id_list -> . expression , id_list
    (34) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    )               shift and go to state 77
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    id_list                        shift and go to state 78
    expression                     shift and go to state 51

state 42

    (4) expression -> import ID . as ID
    (22) expression -> import ID .

    as              shift and go to state 79
    and             reduce using rule 22 (expression -> import ID .)
    eq              reduce using rule 22 (expression -> import ID .)
    =               reduce using rule 22 (expression -> import ID .)
    >               reduce using rule 22 (expression -> import ID .)
    <               reduce using rule 22 (expression -> import ID .)
    ge              reduce using rule 22 (expression -> import ID .)
    le              reduce using rule 22 (expression -> import ID .)
    neqs            reduce using rule 22 (expression -> import ID .)
    or              reduce using rule 22 (expression -> import ID .)
    nand            reduce using rule 22 (expression -> import ID .)
    +               reduce using rule 22 (expression -> import ID .)
    -               reduce using rule 22 (expression -> import ID .)
    *               reduce using rule 22 (expression -> import ID .)
    /               reduce using rule 22 (expression -> import ID .)
    $end            reduce using rule 22 (expression -> import ID .)
    }               reduce using rule 22 (expression -> import ID .)
    ;               reduce using rule 22 (expression -> import ID .)
    then            reduce using rule 22 (expression -> import ID .)
    ,               reduce using rule 22 (expression -> import ID .)
    ]               reduce using rule 22 (expression -> import ID .)
    do              reduce using rule 22 (expression -> import ID .)
    )               reduce using rule 22 (expression -> import ID .)
    in              reduce using rule 22 (expression -> import ID .)
    lambda          reduce using rule 22 (expression -> import ID .)
    else            reduce using rule 22 (expression -> import ID .)


state 43

    (6) expression -> lambda expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 6 (expression -> lambda expression .)
    }               reduce using rule 6 (expression -> lambda expression .)
    ;               reduce using rule 6 (expression -> lambda expression .)
    then            reduce using rule 6 (expression -> lambda expression .)
    ,               reduce using rule 6 (expression -> lambda expression .)
    ]               reduce using rule 6 (expression -> lambda expression .)
    do              reduce using rule 6 (expression -> lambda expression .)
    )               reduce using rule 6 (expression -> lambda expression .)
    in              reduce using rule 6 (expression -> lambda expression .)
    lambda          reduce using rule 6 (expression -> lambda expression .)
    else            reduce using rule 6 (expression -> lambda expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 6 (expression -> lambda expression .) ]
  ! eq              [ reduce using rule 6 (expression -> lambda expression .) ]
  ! =               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! >               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! <               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! ge              [ reduce using rule 6 (expression -> lambda expression .) ]
  ! le              [ reduce using rule 6 (expression -> lambda expression .) ]
  ! neqs            [ reduce using rule 6 (expression -> lambda expression .) ]
  ! or              [ reduce using rule 6 (expression -> lambda expression .) ]
  ! nand            [ reduce using rule 6 (expression -> lambda expression .) ]
  ! +               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! -               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! *               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! /               [ reduce using rule 6 (expression -> lambda expression .) ]


state 44

    (7) expression -> letrec ID . assign expression lambda expression

    assign          shift and go to state 80


state 45

    (8) expression -> { sequence . }
    (23) sequence -> sequence . ; expression

    }               shift and go to state 81
    ;               shift and go to state 82


state 46

    (24) sequence -> expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    }               reduce using rule 24 (sequence -> expression .)
    ;               reduce using rule 24 (sequence -> expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 47

    (9) expression -> struct { . sequence }
    (23) sequence -> . sequence ; expression
    (24) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    sequence                       shift and go to state 83
    expression                     shift and go to state 46

state 48

    (26) expression -> - expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 26 (expression -> - expression .)
    eq              reduce using rule 26 (expression -> - expression .)
    =               reduce using rule 26 (expression -> - expression .)
    >               reduce using rule 26 (expression -> - expression .)
    <               reduce using rule 26 (expression -> - expression .)
    ge              reduce using rule 26 (expression -> - expression .)
    le              reduce using rule 26 (expression -> - expression .)
    neqs            reduce using rule 26 (expression -> - expression .)
    or              reduce using rule 26 (expression -> - expression .)
    nand            reduce using rule 26 (expression -> - expression .)
    +               reduce using rule 26 (expression -> - expression .)
    -               reduce using rule 26 (expression -> - expression .)
    *               reduce using rule 26 (expression -> - expression .)
    /               reduce using rule 26 (expression -> - expression .)
    $end            reduce using rule 26 (expression -> - expression .)
    }               reduce using rule 26 (expression -> - expression .)
    ;               reduce using rule 26 (expression -> - expression .)
    then            reduce using rule 26 (expression -> - expression .)
    ,               reduce using rule 26 (expression -> - expression .)
    ]               reduce using rule 26 (expression -> - expression .)
    do              reduce using rule 26 (expression -> - expression .)
    )               reduce using rule 26 (expression -> - expression .)
    in              reduce using rule 26 (expression -> - expression .)
    lambda          reduce using rule 26 (expression -> - expression .)
    else            reduce using rule 26 (expression -> - expression .)

  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 34 ]
  ! /               [ shift and go to state 35 ]


state 49

    (28) expression -> if expression . then expression
    (36) expression -> if expression . then expression else expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    then            shift and go to state 84
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 50

    (35) expression -> [ id_list . ]

    ]               shift and go to state 85


state 51

    (33) id_list -> expression . , id_list
    (34) id_list -> expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    ,               shift and go to state 86
    ]               reduce using rule 34 (id_list -> expression .)
    )               reduce using rule 34 (id_list -> expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 52

    (38) expression -> not expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 38 (expression -> not expression .)
    eq              reduce using rule 38 (expression -> not expression .)
    =               reduce using rule 38 (expression -> not expression .)
    >               reduce using rule 38 (expression -> not expression .)
    <               reduce using rule 38 (expression -> not expression .)
    ge              reduce using rule 38 (expression -> not expression .)
    le              reduce using rule 38 (expression -> not expression .)
    neqs            reduce using rule 38 (expression -> not expression .)
    or              reduce using rule 38 (expression -> not expression .)
    nand            reduce using rule 38 (expression -> not expression .)
    +               reduce using rule 38 (expression -> not expression .)
    -               reduce using rule 38 (expression -> not expression .)
    *               reduce using rule 38 (expression -> not expression .)
    /               reduce using rule 38 (expression -> not expression .)
    $end            reduce using rule 38 (expression -> not expression .)
    }               reduce using rule 38 (expression -> not expression .)
    ;               reduce using rule 38 (expression -> not expression .)
    then            reduce using rule 38 (expression -> not expression .)
    ,               reduce using rule 38 (expression -> not expression .)
    ]               reduce using rule 38 (expression -> not expression .)
    do              reduce using rule 38 (expression -> not expression .)
    )               reduce using rule 38 (expression -> not expression .)
    in              reduce using rule 38 (expression -> not expression .)
    lambda          reduce using rule 38 (expression -> not expression .)
    else            reduce using rule 38 (expression -> not expression .)

  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 34 ]
  ! /               [ shift and go to state 35 ]


state 53

    (39) expression -> loop expression . do expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    do              shift and go to state 87
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 54

    (40) expression -> ( id_list . )
    (42) expression -> ( id_list . ) lambda expression

    )               shift and go to state 88


state 55

    (44) expression -> ( expression . )
    (33) id_list -> expression . , id_list
    (34) id_list -> expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 89
    ,               shift and go to state 86
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! )               [ reduce using rule 34 (id_list -> expression .) ]


state 56

    (47) expression -> for expression . ; expression ; expression do expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    ;               shift and go to state 90
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 57

    (48) expression -> while expression . do expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    do              shift and go to state 91
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 58

    (10) expression -> expression and expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression and expression .)
    or              reduce using rule 10 (expression -> expression and expression .)
    nand            reduce using rule 10 (expression -> expression and expression .)
    $end            reduce using rule 10 (expression -> expression and expression .)
    }               reduce using rule 10 (expression -> expression and expression .)
    ;               reduce using rule 10 (expression -> expression and expression .)
    then            reduce using rule 10 (expression -> expression and expression .)
    ,               reduce using rule 10 (expression -> expression and expression .)
    ]               reduce using rule 10 (expression -> expression and expression .)
    do              reduce using rule 10 (expression -> expression and expression .)
    )               reduce using rule 10 (expression -> expression and expression .)
    in              reduce using rule 10 (expression -> expression and expression .)
    lambda          reduce using rule 10 (expression -> expression and expression .)
    else            reduce using rule 10 (expression -> expression and expression .)
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! eq              [ reduce using rule 10 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 10 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 10 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 10 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 10 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 10 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 10 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 10 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 22 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 59

    (11) expression -> expression eq expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression eq expression .)
    eq              reduce using rule 11 (expression -> expression eq expression .)
    =               reduce using rule 11 (expression -> expression eq expression .)
    neqs            reduce using rule 11 (expression -> expression eq expression .)
    or              reduce using rule 11 (expression -> expression eq expression .)
    nand            reduce using rule 11 (expression -> expression eq expression .)
    $end            reduce using rule 11 (expression -> expression eq expression .)
    }               reduce using rule 11 (expression -> expression eq expression .)
    ;               reduce using rule 11 (expression -> expression eq expression .)
    then            reduce using rule 11 (expression -> expression eq expression .)
    ,               reduce using rule 11 (expression -> expression eq expression .)
    ]               reduce using rule 11 (expression -> expression eq expression .)
    do              reduce using rule 11 (expression -> expression eq expression .)
    )               reduce using rule 11 (expression -> expression eq expression .)
    in              reduce using rule 11 (expression -> expression eq expression .)
    lambda          reduce using rule 11 (expression -> expression eq expression .)
    else            reduce using rule 11 (expression -> expression eq expression .)
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! >               [ reduce using rule 11 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 11 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 11 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 11 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 11 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 60

    (12) expression -> expression = expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression = expression .)
    eq              reduce using rule 12 (expression -> expression = expression .)
    =               reduce using rule 12 (expression -> expression = expression .)
    neqs            reduce using rule 12 (expression -> expression = expression .)
    or              reduce using rule 12 (expression -> expression = expression .)
    nand            reduce using rule 12 (expression -> expression = expression .)
    $end            reduce using rule 12 (expression -> expression = expression .)
    }               reduce using rule 12 (expression -> expression = expression .)
    ;               reduce using rule 12 (expression -> expression = expression .)
    then            reduce using rule 12 (expression -> expression = expression .)
    ,               reduce using rule 12 (expression -> expression = expression .)
    ]               reduce using rule 12 (expression -> expression = expression .)
    do              reduce using rule 12 (expression -> expression = expression .)
    )               reduce using rule 12 (expression -> expression = expression .)
    in              reduce using rule 12 (expression -> expression = expression .)
    lambda          reduce using rule 12 (expression -> expression = expression .)
    else            reduce using rule 12 (expression -> expression = expression .)
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! >               [ reduce using rule 12 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 12 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 12 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 12 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 12 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 61

    (13) expression -> expression > expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression > expression .)
    eq              reduce using rule 13 (expression -> expression > expression .)
    =               reduce using rule 13 (expression -> expression > expression .)
    >               reduce using rule 13 (expression -> expression > expression .)
    <               reduce using rule 13 (expression -> expression > expression .)
    ge              reduce using rule 13 (expression -> expression > expression .)
    le              reduce using rule 13 (expression -> expression > expression .)
    neqs            reduce using rule 13 (expression -> expression > expression .)
    or              reduce using rule 13 (expression -> expression > expression .)
    nand            reduce using rule 13 (expression -> expression > expression .)
    $end            reduce using rule 13 (expression -> expression > expression .)
    }               reduce using rule 13 (expression -> expression > expression .)
    ;               reduce using rule 13 (expression -> expression > expression .)
    then            reduce using rule 13 (expression -> expression > expression .)
    ,               reduce using rule 13 (expression -> expression > expression .)
    ]               reduce using rule 13 (expression -> expression > expression .)
    do              reduce using rule 13 (expression -> expression > expression .)
    )               reduce using rule 13 (expression -> expression > expression .)
    in              reduce using rule 13 (expression -> expression > expression .)
    lambda          reduce using rule 13 (expression -> expression > expression .)
    else            reduce using rule 13 (expression -> expression > expression .)
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! +               [ reduce using rule 13 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 62

    (14) expression -> expression < expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression < expression .)
    eq              reduce using rule 14 (expression -> expression < expression .)
    =               reduce using rule 14 (expression -> expression < expression .)
    >               reduce using rule 14 (expression -> expression < expression .)
    <               reduce using rule 14 (expression -> expression < expression .)
    ge              reduce using rule 14 (expression -> expression < expression .)
    le              reduce using rule 14 (expression -> expression < expression .)
    neqs            reduce using rule 14 (expression -> expression < expression .)
    or              reduce using rule 14 (expression -> expression < expression .)
    nand            reduce using rule 14 (expression -> expression < expression .)
    $end            reduce using rule 14 (expression -> expression < expression .)
    }               reduce using rule 14 (expression -> expression < expression .)
    ;               reduce using rule 14 (expression -> expression < expression .)
    then            reduce using rule 14 (expression -> expression < expression .)
    ,               reduce using rule 14 (expression -> expression < expression .)
    ]               reduce using rule 14 (expression -> expression < expression .)
    do              reduce using rule 14 (expression -> expression < expression .)
    )               reduce using rule 14 (expression -> expression < expression .)
    in              reduce using rule 14 (expression -> expression < expression .)
    lambda          reduce using rule 14 (expression -> expression < expression .)
    else            reduce using rule 14 (expression -> expression < expression .)
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! +               [ reduce using rule 14 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 63

    (15) expression -> expression ge expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 15 (expression -> expression ge expression .)
    eq              reduce using rule 15 (expression -> expression ge expression .)
    =               reduce using rule 15 (expression -> expression ge expression .)
    >               reduce using rule 15 (expression -> expression ge expression .)
    <               reduce using rule 15 (expression -> expression ge expression .)
    ge              reduce using rule 15 (expression -> expression ge expression .)
    le              reduce using rule 15 (expression -> expression ge expression .)
    neqs            reduce using rule 15 (expression -> expression ge expression .)
    or              reduce using rule 15 (expression -> expression ge expression .)
    nand            reduce using rule 15 (expression -> expression ge expression .)
    $end            reduce using rule 15 (expression -> expression ge expression .)
    }               reduce using rule 15 (expression -> expression ge expression .)
    ;               reduce using rule 15 (expression -> expression ge expression .)
    then            reduce using rule 15 (expression -> expression ge expression .)
    ,               reduce using rule 15 (expression -> expression ge expression .)
    ]               reduce using rule 15 (expression -> expression ge expression .)
    do              reduce using rule 15 (expression -> expression ge expression .)
    )               reduce using rule 15 (expression -> expression ge expression .)
    in              reduce using rule 15 (expression -> expression ge expression .)
    lambda          reduce using rule 15 (expression -> expression ge expression .)
    else            reduce using rule 15 (expression -> expression ge expression .)
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! +               [ reduce using rule 15 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 64

    (16) expression -> expression le expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 16 (expression -> expression le expression .)
    eq              reduce using rule 16 (expression -> expression le expression .)
    =               reduce using rule 16 (expression -> expression le expression .)
    >               reduce using rule 16 (expression -> expression le expression .)
    <               reduce using rule 16 (expression -> expression le expression .)
    ge              reduce using rule 16 (expression -> expression le expression .)
    le              reduce using rule 16 (expression -> expression le expression .)
    neqs            reduce using rule 16 (expression -> expression le expression .)
    or              reduce using rule 16 (expression -> expression le expression .)
    nand            reduce using rule 16 (expression -> expression le expression .)
    $end            reduce using rule 16 (expression -> expression le expression .)
    }               reduce using rule 16 (expression -> expression le expression .)
    ;               reduce using rule 16 (expression -> expression le expression .)
    then            reduce using rule 16 (expression -> expression le expression .)
    ,               reduce using rule 16 (expression -> expression le expression .)
    ]               reduce using rule 16 (expression -> expression le expression .)
    do              reduce using rule 16 (expression -> expression le expression .)
    )               reduce using rule 16 (expression -> expression le expression .)
    in              reduce using rule 16 (expression -> expression le expression .)
    lambda          reduce using rule 16 (expression -> expression le expression .)
    else            reduce using rule 16 (expression -> expression le expression .)
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! +               [ reduce using rule 16 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 65

    (17) expression -> expression neqs expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 17 (expression -> expression neqs expression .)
    eq              reduce using rule 17 (expression -> expression neqs expression .)
    =               reduce using rule 17 (expression -> expression neqs expression .)
    neqs            reduce using rule 17 (expression -> expression neqs expression .)
    or              reduce using rule 17 (expression -> expression neqs expression .)
    nand            reduce using rule 17 (expression -> expression neqs expression .)
    $end            reduce using rule 17 (expression -> expression neqs expression .)
    }               reduce using rule 17 (expression -> expression neqs expression .)
    ;               reduce using rule 17 (expression -> expression neqs expression .)
    then            reduce using rule 17 (expression -> expression neqs expression .)
    ,               reduce using rule 17 (expression -> expression neqs expression .)
    ]               reduce using rule 17 (expression -> expression neqs expression .)
    do              reduce using rule 17 (expression -> expression neqs expression .)
    )               reduce using rule 17 (expression -> expression neqs expression .)
    in              reduce using rule 17 (expression -> expression neqs expression .)
    lambda          reduce using rule 17 (expression -> expression neqs expression .)
    else            reduce using rule 17 (expression -> expression neqs expression .)
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! >               [ reduce using rule 17 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 17 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 17 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 17 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 17 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 17 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 17 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 66

    (18) expression -> expression or expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    or              reduce using rule 18 (expression -> expression or expression .)
    $end            reduce using rule 18 (expression -> expression or expression .)
    }               reduce using rule 18 (expression -> expression or expression .)
    ;               reduce using rule 18 (expression -> expression or expression .)
    then            reduce using rule 18 (expression -> expression or expression .)
    ,               reduce using rule 18 (expression -> expression or expression .)
    ]               reduce using rule 18 (expression -> expression or expression .)
    do              reduce using rule 18 (expression -> expression or expression .)
    )               reduce using rule 18 (expression -> expression or expression .)
    in              reduce using rule 18 (expression -> expression or expression .)
    lambda          reduce using rule 18 (expression -> expression or expression .)
    else            reduce using rule 18 (expression -> expression or expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 18 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 18 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 18 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 18 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 18 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 18 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 18 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 18 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 18 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 18 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 18 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 18 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 18 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 30 ]


state 67

    (19) expression -> expression nand expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 19 (expression -> expression nand expression .)
    or              reduce using rule 19 (expression -> expression nand expression .)
    nand            reduce using rule 19 (expression -> expression nand expression .)
    $end            reduce using rule 19 (expression -> expression nand expression .)
    }               reduce using rule 19 (expression -> expression nand expression .)
    ;               reduce using rule 19 (expression -> expression nand expression .)
    then            reduce using rule 19 (expression -> expression nand expression .)
    ,               reduce using rule 19 (expression -> expression nand expression .)
    ]               reduce using rule 19 (expression -> expression nand expression .)
    do              reduce using rule 19 (expression -> expression nand expression .)
    )               reduce using rule 19 (expression -> expression nand expression .)
    in              reduce using rule 19 (expression -> expression nand expression .)
    lambda          reduce using rule 19 (expression -> expression nand expression .)
    else            reduce using rule 19 (expression -> expression nand expression .)
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! eq              [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 19 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 22 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]


state 68

    (29) expression -> expression + expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 29 (expression -> expression + expression .)
    eq              reduce using rule 29 (expression -> expression + expression .)
    =               reduce using rule 29 (expression -> expression + expression .)
    >               reduce using rule 29 (expression -> expression + expression .)
    <               reduce using rule 29 (expression -> expression + expression .)
    ge              reduce using rule 29 (expression -> expression + expression .)
    le              reduce using rule 29 (expression -> expression + expression .)
    neqs            reduce using rule 29 (expression -> expression + expression .)
    or              reduce using rule 29 (expression -> expression + expression .)
    nand            reduce using rule 29 (expression -> expression + expression .)
    +               reduce using rule 29 (expression -> expression + expression .)
    -               reduce using rule 29 (expression -> expression + expression .)
    $end            reduce using rule 29 (expression -> expression + expression .)
    }               reduce using rule 29 (expression -> expression + expression .)
    ;               reduce using rule 29 (expression -> expression + expression .)
    then            reduce using rule 29 (expression -> expression + expression .)
    ,               reduce using rule 29 (expression -> expression + expression .)
    ]               reduce using rule 29 (expression -> expression + expression .)
    do              reduce using rule 29 (expression -> expression + expression .)
    )               reduce using rule 29 (expression -> expression + expression .)
    in              reduce using rule 29 (expression -> expression + expression .)
    lambda          reduce using rule 29 (expression -> expression + expression .)
    else            reduce using rule 29 (expression -> expression + expression .)
    *               shift and go to state 34
    /               shift and go to state 35

  ! *               [ reduce using rule 29 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]


state 69

    (30) expression -> expression - expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 30 (expression -> expression - expression .)
    eq              reduce using rule 30 (expression -> expression - expression .)
    =               reduce using rule 30 (expression -> expression - expression .)
    >               reduce using rule 30 (expression -> expression - expression .)
    <               reduce using rule 30 (expression -> expression - expression .)
    ge              reduce using rule 30 (expression -> expression - expression .)
    le              reduce using rule 30 (expression -> expression - expression .)
    neqs            reduce using rule 30 (expression -> expression - expression .)
    or              reduce using rule 30 (expression -> expression - expression .)
    nand            reduce using rule 30 (expression -> expression - expression .)
    +               reduce using rule 30 (expression -> expression - expression .)
    -               reduce using rule 30 (expression -> expression - expression .)
    $end            reduce using rule 30 (expression -> expression - expression .)
    }               reduce using rule 30 (expression -> expression - expression .)
    ;               reduce using rule 30 (expression -> expression - expression .)
    then            reduce using rule 30 (expression -> expression - expression .)
    ,               reduce using rule 30 (expression -> expression - expression .)
    ]               reduce using rule 30 (expression -> expression - expression .)
    do              reduce using rule 30 (expression -> expression - expression .)
    )               reduce using rule 30 (expression -> expression - expression .)
    in              reduce using rule 30 (expression -> expression - expression .)
    lambda          reduce using rule 30 (expression -> expression - expression .)
    else            reduce using rule 30 (expression -> expression - expression .)
    *               shift and go to state 34
    /               shift and go to state 35

  ! *               [ reduce using rule 30 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 30 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]


state 70

    (31) expression -> expression * expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 31 (expression -> expression * expression .)
    eq              reduce using rule 31 (expression -> expression * expression .)
    =               reduce using rule 31 (expression -> expression * expression .)
    >               reduce using rule 31 (expression -> expression * expression .)
    <               reduce using rule 31 (expression -> expression * expression .)
    ge              reduce using rule 31 (expression -> expression * expression .)
    le              reduce using rule 31 (expression -> expression * expression .)
    neqs            reduce using rule 31 (expression -> expression * expression .)
    or              reduce using rule 31 (expression -> expression * expression .)
    nand            reduce using rule 31 (expression -> expression * expression .)
    +               reduce using rule 31 (expression -> expression * expression .)
    -               reduce using rule 31 (expression -> expression * expression .)
    *               reduce using rule 31 (expression -> expression * expression .)
    /               reduce using rule 31 (expression -> expression * expression .)
    $end            reduce using rule 31 (expression -> expression * expression .)
    }               reduce using rule 31 (expression -> expression * expression .)
    ;               reduce using rule 31 (expression -> expression * expression .)
    then            reduce using rule 31 (expression -> expression * expression .)
    ,               reduce using rule 31 (expression -> expression * expression .)
    ]               reduce using rule 31 (expression -> expression * expression .)
    do              reduce using rule 31 (expression -> expression * expression .)
    )               reduce using rule 31 (expression -> expression * expression .)
    in              reduce using rule 31 (expression -> expression * expression .)
    lambda          reduce using rule 31 (expression -> expression * expression .)
    else            reduce using rule 31 (expression -> expression * expression .)

  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 34 ]
  ! /               [ shift and go to state 35 ]


state 71

    (32) expression -> expression / expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    and             reduce using rule 32 (expression -> expression / expression .)
    eq              reduce using rule 32 (expression -> expression / expression .)
    =               reduce using rule 32 (expression -> expression / expression .)
    >               reduce using rule 32 (expression -> expression / expression .)
    <               reduce using rule 32 (expression -> expression / expression .)
    ge              reduce using rule 32 (expression -> expression / expression .)
    le              reduce using rule 32 (expression -> expression / expression .)
    neqs            reduce using rule 32 (expression -> expression / expression .)
    or              reduce using rule 32 (expression -> expression / expression .)
    nand            reduce using rule 32 (expression -> expression / expression .)
    +               reduce using rule 32 (expression -> expression / expression .)
    -               reduce using rule 32 (expression -> expression / expression .)
    *               reduce using rule 32 (expression -> expression / expression .)
    /               reduce using rule 32 (expression -> expression / expression .)
    $end            reduce using rule 32 (expression -> expression / expression .)
    }               reduce using rule 32 (expression -> expression / expression .)
    ;               reduce using rule 32 (expression -> expression / expression .)
    then            reduce using rule 32 (expression -> expression / expression .)
    ,               reduce using rule 32 (expression -> expression / expression .)
    ]               reduce using rule 32 (expression -> expression / expression .)
    do              reduce using rule 32 (expression -> expression / expression .)
    )               reduce using rule 32 (expression -> expression / expression .)
    in              reduce using rule 32 (expression -> expression / expression .)
    lambda          reduce using rule 32 (expression -> expression / expression .)
    else            reduce using rule 32 (expression -> expression / expression .)

  ! and             [ shift and go to state 22 ]
  ! eq              [ shift and go to state 23 ]
  ! =               [ shift and go to state 24 ]
  ! >               [ shift and go to state 25 ]
  ! <               [ shift and go to state 26 ]
  ! ge              [ shift and go to state 27 ]
  ! le              [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 29 ]
  ! or              [ shift and go to state 30 ]
  ! nand            [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 34 ]
  ! /               [ shift and go to state 35 ]


state 72

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 92

state 73

    (5) expression -> ID lambda expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> ID lambda expression .)
    }               reduce using rule 5 (expression -> ID lambda expression .)
    ;               reduce using rule 5 (expression -> ID lambda expression .)
    then            reduce using rule 5 (expression -> ID lambda expression .)
    ,               reduce using rule 5 (expression -> ID lambda expression .)
    ]               reduce using rule 5 (expression -> ID lambda expression .)
    do              reduce using rule 5 (expression -> ID lambda expression .)
    )               reduce using rule 5 (expression -> ID lambda expression .)
    in              reduce using rule 5 (expression -> ID lambda expression .)
    lambda          reduce using rule 5 (expression -> ID lambda expression .)
    else            reduce using rule 5 (expression -> ID lambda expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> ID lambda expression .) ]


state 74

    (21) expression -> ID assign expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 21 (expression -> ID assign expression .)
    }               reduce using rule 21 (expression -> ID assign expression .)
    ;               reduce using rule 21 (expression -> ID assign expression .)
    then            reduce using rule 21 (expression -> ID assign expression .)
    ,               reduce using rule 21 (expression -> ID assign expression .)
    ]               reduce using rule 21 (expression -> ID assign expression .)
    do              reduce using rule 21 (expression -> ID assign expression .)
    )               reduce using rule 21 (expression -> ID assign expression .)
    in              reduce using rule 21 (expression -> ID assign expression .)
    lambda          reduce using rule 21 (expression -> ID assign expression .)
    else            reduce using rule 21 (expression -> ID assign expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 21 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 21 (expression -> ID assign expression .) ]


state 75

    (25) expression -> ID . ID .

    and             reduce using rule 25 (expression -> ID . ID .)
    eq              reduce using rule 25 (expression -> ID . ID .)
    =               reduce using rule 25 (expression -> ID . ID .)
    >               reduce using rule 25 (expression -> ID . ID .)
    <               reduce using rule 25 (expression -> ID . ID .)
    ge              reduce using rule 25 (expression -> ID . ID .)
    le              reduce using rule 25 (expression -> ID . ID .)
    neqs            reduce using rule 25 (expression -> ID . ID .)
    or              reduce using rule 25 (expression -> ID . ID .)
    nand            reduce using rule 25 (expression -> ID . ID .)
    +               reduce using rule 25 (expression -> ID . ID .)
    -               reduce using rule 25 (expression -> ID . ID .)
    *               reduce using rule 25 (expression -> ID . ID .)
    /               reduce using rule 25 (expression -> ID . ID .)
    $end            reduce using rule 25 (expression -> ID . ID .)
    }               reduce using rule 25 (expression -> ID . ID .)
    ;               reduce using rule 25 (expression -> ID . ID .)
    then            reduce using rule 25 (expression -> ID . ID .)
    ,               reduce using rule 25 (expression -> ID . ID .)
    ]               reduce using rule 25 (expression -> ID . ID .)
    do              reduce using rule 25 (expression -> ID . ID .)
    )               reduce using rule 25 (expression -> ID . ID .)
    in              reduce using rule 25 (expression -> ID . ID .)
    lambda          reduce using rule 25 (expression -> ID . ID .)
    else            reduce using rule 25 (expression -> ID . ID .)


state 76

    (37) expression -> ID [ NUMBER . ]

    ]               shift and go to state 93


state 77

    (45) expression -> ID ( ) .

    and             reduce using rule 45 (expression -> ID ( ) .)
    eq              reduce using rule 45 (expression -> ID ( ) .)
    =               reduce using rule 45 (expression -> ID ( ) .)
    >               reduce using rule 45 (expression -> ID ( ) .)
    <               reduce using rule 45 (expression -> ID ( ) .)
    ge              reduce using rule 45 (expression -> ID ( ) .)
    le              reduce using rule 45 (expression -> ID ( ) .)
    neqs            reduce using rule 45 (expression -> ID ( ) .)
    or              reduce using rule 45 (expression -> ID ( ) .)
    nand            reduce using rule 45 (expression -> ID ( ) .)
    +               reduce using rule 45 (expression -> ID ( ) .)
    -               reduce using rule 45 (expression -> ID ( ) .)
    *               reduce using rule 45 (expression -> ID ( ) .)
    /               reduce using rule 45 (expression -> ID ( ) .)
    $end            reduce using rule 45 (expression -> ID ( ) .)
    }               reduce using rule 45 (expression -> ID ( ) .)
    ;               reduce using rule 45 (expression -> ID ( ) .)
    then            reduce using rule 45 (expression -> ID ( ) .)
    ,               reduce using rule 45 (expression -> ID ( ) .)
    ]               reduce using rule 45 (expression -> ID ( ) .)
    do              reduce using rule 45 (expression -> ID ( ) .)
    )               reduce using rule 45 (expression -> ID ( ) .)
    in              reduce using rule 45 (expression -> ID ( ) .)
    lambda          reduce using rule 45 (expression -> ID ( ) .)
    else            reduce using rule 45 (expression -> ID ( ) .)


state 78

    (46) expression -> ID ( id_list . )

    )               shift and go to state 94


state 79

    (4) expression -> import ID as . ID

    ID              shift and go to state 95


state 80

    (7) expression -> letrec ID assign . expression lambda expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 96

state 81

    (8) expression -> { sequence } .

    and             reduce using rule 8 (expression -> { sequence } .)
    eq              reduce using rule 8 (expression -> { sequence } .)
    =               reduce using rule 8 (expression -> { sequence } .)
    >               reduce using rule 8 (expression -> { sequence } .)
    <               reduce using rule 8 (expression -> { sequence } .)
    ge              reduce using rule 8 (expression -> { sequence } .)
    le              reduce using rule 8 (expression -> { sequence } .)
    neqs            reduce using rule 8 (expression -> { sequence } .)
    or              reduce using rule 8 (expression -> { sequence } .)
    nand            reduce using rule 8 (expression -> { sequence } .)
    +               reduce using rule 8 (expression -> { sequence } .)
    -               reduce using rule 8 (expression -> { sequence } .)
    *               reduce using rule 8 (expression -> { sequence } .)
    /               reduce using rule 8 (expression -> { sequence } .)
    $end            reduce using rule 8 (expression -> { sequence } .)
    }               reduce using rule 8 (expression -> { sequence } .)
    ;               reduce using rule 8 (expression -> { sequence } .)
    then            reduce using rule 8 (expression -> { sequence } .)
    ,               reduce using rule 8 (expression -> { sequence } .)
    ]               reduce using rule 8 (expression -> { sequence } .)
    do              reduce using rule 8 (expression -> { sequence } .)
    )               reduce using rule 8 (expression -> { sequence } .)
    in              reduce using rule 8 (expression -> { sequence } .)
    lambda          reduce using rule 8 (expression -> { sequence } .)
    else            reduce using rule 8 (expression -> { sequence } .)


state 82

    (23) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 97

state 83

    (9) expression -> struct { sequence . }
    (23) sequence -> sequence . ; expression

    }               shift and go to state 98
    ;               shift and go to state 82


state 84

    (28) expression -> if expression then . expression
    (36) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 99

state 85

    (35) expression -> [ id_list ] .

    and             reduce using rule 35 (expression -> [ id_list ] .)
    eq              reduce using rule 35 (expression -> [ id_list ] .)
    =               reduce using rule 35 (expression -> [ id_list ] .)
    >               reduce using rule 35 (expression -> [ id_list ] .)
    <               reduce using rule 35 (expression -> [ id_list ] .)
    ge              reduce using rule 35 (expression -> [ id_list ] .)
    le              reduce using rule 35 (expression -> [ id_list ] .)
    neqs            reduce using rule 35 (expression -> [ id_list ] .)
    or              reduce using rule 35 (expression -> [ id_list ] .)
    nand            reduce using rule 35 (expression -> [ id_list ] .)
    +               reduce using rule 35 (expression -> [ id_list ] .)
    -               reduce using rule 35 (expression -> [ id_list ] .)
    *               reduce using rule 35 (expression -> [ id_list ] .)
    /               reduce using rule 35 (expression -> [ id_list ] .)
    $end            reduce using rule 35 (expression -> [ id_list ] .)
    }               reduce using rule 35 (expression -> [ id_list ] .)
    ;               reduce using rule 35 (expression -> [ id_list ] .)
    then            reduce using rule 35 (expression -> [ id_list ] .)
    ,               reduce using rule 35 (expression -> [ id_list ] .)
    ]               reduce using rule 35 (expression -> [ id_list ] .)
    do              reduce using rule 35 (expression -> [ id_list ] .)
    )               reduce using rule 35 (expression -> [ id_list ] .)
    in              reduce using rule 35 (expression -> [ id_list ] .)
    lambda          reduce using rule 35 (expression -> [ id_list ] .)
    else            reduce using rule 35 (expression -> [ id_list ] .)


state 86

    (33) id_list -> expression , . id_list
    (33) id_list -> . expression , id_list
    (34) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 51
    id_list                        shift and go to state 100

state 87

    (39) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 101

state 88

    (40) expression -> ( id_list ) .
    (42) expression -> ( id_list ) . lambda expression

    and             reduce using rule 40 (expression -> ( id_list ) .)
    eq              reduce using rule 40 (expression -> ( id_list ) .)
    =               reduce using rule 40 (expression -> ( id_list ) .)
    >               reduce using rule 40 (expression -> ( id_list ) .)
    <               reduce using rule 40 (expression -> ( id_list ) .)
    ge              reduce using rule 40 (expression -> ( id_list ) .)
    le              reduce using rule 40 (expression -> ( id_list ) .)
    neqs            reduce using rule 40 (expression -> ( id_list ) .)
    or              reduce using rule 40 (expression -> ( id_list ) .)
    nand            reduce using rule 40 (expression -> ( id_list ) .)
    +               reduce using rule 40 (expression -> ( id_list ) .)
    -               reduce using rule 40 (expression -> ( id_list ) .)
    *               reduce using rule 40 (expression -> ( id_list ) .)
    /               reduce using rule 40 (expression -> ( id_list ) .)
    $end            reduce using rule 40 (expression -> ( id_list ) .)
    }               reduce using rule 40 (expression -> ( id_list ) .)
    ;               reduce using rule 40 (expression -> ( id_list ) .)
    then            reduce using rule 40 (expression -> ( id_list ) .)
    ,               reduce using rule 40 (expression -> ( id_list ) .)
    ]               reduce using rule 40 (expression -> ( id_list ) .)
    do              reduce using rule 40 (expression -> ( id_list ) .)
    )               reduce using rule 40 (expression -> ( id_list ) .)
    in              reduce using rule 40 (expression -> ( id_list ) .)
    lambda          reduce using rule 40 (expression -> ( id_list ) .)
    else            reduce using rule 40 (expression -> ( id_list ) .)

  ! lambda          [ shift and go to state 102 ]


state 89

    (44) expression -> ( expression ) .

    and             reduce using rule 44 (expression -> ( expression ) .)
    eq              reduce using rule 44 (expression -> ( expression ) .)
    =               reduce using rule 44 (expression -> ( expression ) .)
    >               reduce using rule 44 (expression -> ( expression ) .)
    <               reduce using rule 44 (expression -> ( expression ) .)
    ge              reduce using rule 44 (expression -> ( expression ) .)
    le              reduce using rule 44 (expression -> ( expression ) .)
    neqs            reduce using rule 44 (expression -> ( expression ) .)
    or              reduce using rule 44 (expression -> ( expression ) .)
    nand            reduce using rule 44 (expression -> ( expression ) .)
    +               reduce using rule 44 (expression -> ( expression ) .)
    -               reduce using rule 44 (expression -> ( expression ) .)
    *               reduce using rule 44 (expression -> ( expression ) .)
    /               reduce using rule 44 (expression -> ( expression ) .)
    $end            reduce using rule 44 (expression -> ( expression ) .)
    }               reduce using rule 44 (expression -> ( expression ) .)
    ;               reduce using rule 44 (expression -> ( expression ) .)
    then            reduce using rule 44 (expression -> ( expression ) .)
    ,               reduce using rule 44 (expression -> ( expression ) .)
    ]               reduce using rule 44 (expression -> ( expression ) .)
    do              reduce using rule 44 (expression -> ( expression ) .)
    )               reduce using rule 44 (expression -> ( expression ) .)
    in              reduce using rule 44 (expression -> ( expression ) .)
    lambda          reduce using rule 44 (expression -> ( expression ) .)
    else            reduce using rule 44 (expression -> ( expression ) .)


state 90

    (47) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 103

state 91

    (48) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 104

state 92

    (2) expression -> local ID assign expression . in expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    in              shift and go to state 105
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 93

    (37) expression -> ID [ NUMBER ] .

    and             reduce using rule 37 (expression -> ID [ NUMBER ] .)
    eq              reduce using rule 37 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    ge              reduce using rule 37 (expression -> ID [ NUMBER ] .)
    le              reduce using rule 37 (expression -> ID [ NUMBER ] .)
    neqs            reduce using rule 37 (expression -> ID [ NUMBER ] .)
    or              reduce using rule 37 (expression -> ID [ NUMBER ] .)
    nand            reduce using rule 37 (expression -> ID [ NUMBER ] .)
    +               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 37 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    then            reduce using rule 37 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    do              reduce using rule 37 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 37 (expression -> ID [ NUMBER ] .)
    in              reduce using rule 37 (expression -> ID [ NUMBER ] .)
    lambda          reduce using rule 37 (expression -> ID [ NUMBER ] .)
    else            reduce using rule 37 (expression -> ID [ NUMBER ] .)


state 94

    (46) expression -> ID ( id_list ) .

    and             reduce using rule 46 (expression -> ID ( id_list ) .)
    eq              reduce using rule 46 (expression -> ID ( id_list ) .)
    =               reduce using rule 46 (expression -> ID ( id_list ) .)
    >               reduce using rule 46 (expression -> ID ( id_list ) .)
    <               reduce using rule 46 (expression -> ID ( id_list ) .)
    ge              reduce using rule 46 (expression -> ID ( id_list ) .)
    le              reduce using rule 46 (expression -> ID ( id_list ) .)
    neqs            reduce using rule 46 (expression -> ID ( id_list ) .)
    or              reduce using rule 46 (expression -> ID ( id_list ) .)
    nand            reduce using rule 46 (expression -> ID ( id_list ) .)
    +               reduce using rule 46 (expression -> ID ( id_list ) .)
    -               reduce using rule 46 (expression -> ID ( id_list ) .)
    *               reduce using rule 46 (expression -> ID ( id_list ) .)
    /               reduce using rule 46 (expression -> ID ( id_list ) .)
    $end            reduce using rule 46 (expression -> ID ( id_list ) .)
    }               reduce using rule 46 (expression -> ID ( id_list ) .)
    ;               reduce using rule 46 (expression -> ID ( id_list ) .)
    then            reduce using rule 46 (expression -> ID ( id_list ) .)
    ,               reduce using rule 46 (expression -> ID ( id_list ) .)
    ]               reduce using rule 46 (expression -> ID ( id_list ) .)
    do              reduce using rule 46 (expression -> ID ( id_list ) .)
    )               reduce using rule 46 (expression -> ID ( id_list ) .)
    in              reduce using rule 46 (expression -> ID ( id_list ) .)
    lambda          reduce using rule 46 (expression -> ID ( id_list ) .)
    else            reduce using rule 46 (expression -> ID ( id_list ) .)


state 95

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    ,               reduce using rule 4 (expression -> import ID as ID .)
    ]               reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    lambda          reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 96

    (7) expression -> letrec ID assign expression . lambda expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    lambda          shift and go to state 106
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 97

    (23) sequence -> sequence ; expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    }               reduce using rule 23 (sequence -> sequence ; expression .)
    ;               reduce using rule 23 (sequence -> sequence ; expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 98

    (9) expression -> struct { sequence } .

    and             reduce using rule 9 (expression -> struct { sequence } .)
    eq              reduce using rule 9 (expression -> struct { sequence } .)
    =               reduce using rule 9 (expression -> struct { sequence } .)
    >               reduce using rule 9 (expression -> struct { sequence } .)
    <               reduce using rule 9 (expression -> struct { sequence } .)
    ge              reduce using rule 9 (expression -> struct { sequence } .)
    le              reduce using rule 9 (expression -> struct { sequence } .)
    neqs            reduce using rule 9 (expression -> struct { sequence } .)
    or              reduce using rule 9 (expression -> struct { sequence } .)
    nand            reduce using rule 9 (expression -> struct { sequence } .)
    +               reduce using rule 9 (expression -> struct { sequence } .)
    -               reduce using rule 9 (expression -> struct { sequence } .)
    *               reduce using rule 9 (expression -> struct { sequence } .)
    /               reduce using rule 9 (expression -> struct { sequence } .)
    $end            reduce using rule 9 (expression -> struct { sequence } .)
    }               reduce using rule 9 (expression -> struct { sequence } .)
    ;               reduce using rule 9 (expression -> struct { sequence } .)
    then            reduce using rule 9 (expression -> struct { sequence } .)
    ,               reduce using rule 9 (expression -> struct { sequence } .)
    ]               reduce using rule 9 (expression -> struct { sequence } .)
    do              reduce using rule 9 (expression -> struct { sequence } .)
    )               reduce using rule 9 (expression -> struct { sequence } .)
    in              reduce using rule 9 (expression -> struct { sequence } .)
    lambda          reduce using rule 9 (expression -> struct { sequence } .)
    else            reduce using rule 9 (expression -> struct { sequence } .)


state 99

    (28) expression -> if expression then expression .
    (36) expression -> if expression then expression . else expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 28 (expression -> if expression then expression .)
    }               reduce using rule 28 (expression -> if expression then expression .)
    ;               reduce using rule 28 (expression -> if expression then expression .)
    then            reduce using rule 28 (expression -> if expression then expression .)
    ,               reduce using rule 28 (expression -> if expression then expression .)
    ]               reduce using rule 28 (expression -> if expression then expression .)
    do              reduce using rule 28 (expression -> if expression then expression .)
    )               reduce using rule 28 (expression -> if expression then expression .)
    in              reduce using rule 28 (expression -> if expression then expression .)
    lambda          reduce using rule 28 (expression -> if expression then expression .)
    else            shift and go to state 107
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 28 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 28 (expression -> if expression then expression .) ]


state 100

    (33) id_list -> expression , id_list .

    ]               reduce using rule 33 (id_list -> expression , id_list .)
    )               reduce using rule 33 (id_list -> expression , id_list .)


state 101

    (39) expression -> loop expression do expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 39 (expression -> loop expression do expression .)
    }               reduce using rule 39 (expression -> loop expression do expression .)
    ;               reduce using rule 39 (expression -> loop expression do expression .)
    then            reduce using rule 39 (expression -> loop expression do expression .)
    ,               reduce using rule 39 (expression -> loop expression do expression .)
    ]               reduce using rule 39 (expression -> loop expression do expression .)
    do              reduce using rule 39 (expression -> loop expression do expression .)
    )               reduce using rule 39 (expression -> loop expression do expression .)
    in              reduce using rule 39 (expression -> loop expression do expression .)
    lambda          reduce using rule 39 (expression -> loop expression do expression .)
    else            reduce using rule 39 (expression -> loop expression do expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 39 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 39 (expression -> loop expression do expression .) ]


state 102

    (42) expression -> ( id_list ) lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 108

state 103

    (47) expression -> for expression ; expression . ; expression do expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    ;               shift and go to state 109
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 104

    (48) expression -> while expression do expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 48 (expression -> while expression do expression .)
    }               reduce using rule 48 (expression -> while expression do expression .)
    ;               reduce using rule 48 (expression -> while expression do expression .)
    then            reduce using rule 48 (expression -> while expression do expression .)
    ,               reduce using rule 48 (expression -> while expression do expression .)
    ]               reduce using rule 48 (expression -> while expression do expression .)
    do              reduce using rule 48 (expression -> while expression do expression .)
    )               reduce using rule 48 (expression -> while expression do expression .)
    in              reduce using rule 48 (expression -> while expression do expression .)
    lambda          reduce using rule 48 (expression -> while expression do expression .)
    else            reduce using rule 48 (expression -> while expression do expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 48 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 48 (expression -> while expression do expression .) ]


state 105

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 110

state 106

    (7) expression -> letrec ID assign expression lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 111

state 107

    (36) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 112

state 108

    (42) expression -> ( id_list ) lambda expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    }               reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    ;               reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    then            reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    ,               reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    ]               reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    do              reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    )               reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    in              reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    lambda          reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    else            reduce using rule 42 (expression -> ( id_list ) lambda expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! eq              [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! =               [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! >               [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! <               [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! ge              [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! le              [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! neqs            [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! or              [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! nand            [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! +               [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! -               [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! *               [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]
  ! /               [ reduce using rule 42 (expression -> ( id_list ) lambda expression .) ]


state 109

    (47) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 113

state 110

    (2) expression -> local ID assign expression in expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    ,               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ]               reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    lambda          reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 111

    (7) expression -> letrec ID assign expression lambda expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    }               reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    ;               reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    then            reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    ,               reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    ]               reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    do              reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    )               reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    in              reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    lambda          reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    else            reduce using rule 7 (expression -> letrec ID assign expression lambda expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! eq              [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! =               [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! >               [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! <               [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! ge              [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! le              [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! neqs            [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! or              [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! nand            [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! +               [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! -               [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! *               [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]
  ! /               [ reduce using rule 7 (expression -> letrec ID assign expression lambda expression .) ]


state 112

    (36) expression -> if expression then expression else expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 36 (expression -> if expression then expression else expression .)
    }               reduce using rule 36 (expression -> if expression then expression else expression .)
    ;               reduce using rule 36 (expression -> if expression then expression else expression .)
    then            reduce using rule 36 (expression -> if expression then expression else expression .)
    ,               reduce using rule 36 (expression -> if expression then expression else expression .)
    ]               reduce using rule 36 (expression -> if expression then expression else expression .)
    do              reduce using rule 36 (expression -> if expression then expression else expression .)
    )               reduce using rule 36 (expression -> if expression then expression else expression .)
    in              reduce using rule 36 (expression -> if expression then expression else expression .)
    lambda          reduce using rule 36 (expression -> if expression then expression else expression .)
    else            reduce using rule 36 (expression -> if expression then expression else expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 36 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 36 (expression -> if expression then expression else expression .) ]


state 113

    (47) expression -> for expression ; expression ; expression . do expression
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    do              shift and go to state 114
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35


state 114

    (47) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . letrec ID assign expression lambda expression
    (8) expression -> . { sequence }
    (9) expression -> . struct { sequence }
    (10) expression -> . expression and expression
    (11) expression -> . expression eq expression
    (12) expression -> . expression = expression
    (13) expression -> . expression > expression
    (14) expression -> . expression < expression
    (15) expression -> . expression ge expression
    (16) expression -> . expression le expression
    (17) expression -> . expression neqs expression
    (18) expression -> . expression or expression
    (19) expression -> . expression nand expression
    (20) expression -> . string
    (21) expression -> . ID assign expression
    (22) expression -> . import ID
    (25) expression -> . ID . ID
    (26) expression -> . - expression
    (27) expression -> . char
    (28) expression -> . if expression then expression
    (29) expression -> . expression + expression
    (30) expression -> . expression - expression
    (31) expression -> . expression * expression
    (32) expression -> . expression / expression
    (35) expression -> . [ id_list ]
    (36) expression -> . if expression then expression else expression
    (37) expression -> . ID [ NUMBER ]
    (38) expression -> . not expression
    (39) expression -> . loop expression do expression
    (40) expression -> . ( id_list )
    (41) expression -> . NUMBER
    (42) expression -> . ( id_list ) lambda expression
    (43) expression -> . BOOL
    (44) expression -> . ( expression )
    (45) expression -> . ID ( )
    (46) expression -> . ID ( id_list )
    (47) expression -> . for expression ; expression ; expression do expression
    (48) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    letrec          shift and go to state 7
    {               shift and go to state 8
    struct          shift and go to state 9
    string          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21

    expression                     shift and go to state 115

state 115

    (47) expression -> for expression ; expression ; expression do expression .
    (10) expression -> expression . and expression
    (11) expression -> expression . eq expression
    (12) expression -> expression . = expression
    (13) expression -> expression . > expression
    (14) expression -> expression . < expression
    (15) expression -> expression . ge expression
    (16) expression -> expression . le expression
    (17) expression -> expression . neqs expression
    (18) expression -> expression . or expression
    (19) expression -> expression . nand expression
    (29) expression -> expression . + expression
    (30) expression -> expression . - expression
    (31) expression -> expression . * expression
    (32) expression -> expression . / expression

    $end            reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    ,               reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    ]               reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    lambda          reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 47 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 22
    eq              shift and go to state 23
    =               shift and go to state 24
    >               shift and go to state 25
    <               shift and go to state 26
    ge              shift and go to state 27
    le              shift and go to state 28
    neqs            shift and go to state 29
    or              shift and go to state 30
    nand            shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! and             [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 47 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for lambda in state 4 resolved as shift
WARNING: shift/reduce conflict for ) in state 55 resolved as shift
WARNING: shift/reduce conflict for and in state 110 resolved as shift
WARNING: shift/reduce conflict for eq in state 110 resolved as shift
WARNING: shift/reduce conflict for = in state 110 resolved as shift
WARNING: shift/reduce conflict for > in state 110 resolved as shift
WARNING: shift/reduce conflict for < in state 110 resolved as shift
WARNING: shift/reduce conflict for ge in state 110 resolved as shift
WARNING: shift/reduce conflict for le in state 110 resolved as shift
WARNING: shift/reduce conflict for neqs in state 110 resolved as shift
WARNING: shift/reduce conflict for or in state 110 resolved as shift
WARNING: shift/reduce conflict for nand in state 110 resolved as shift
WARNING: shift/reduce conflict for + in state 110 resolved as shift
WARNING: shift/reduce conflict for - in state 110 resolved as shift
WARNING: shift/reduce conflict for * in state 110 resolved as shift
WARNING: shift/reduce conflict for / in state 110 resolved as shift
