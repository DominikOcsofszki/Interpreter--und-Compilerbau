Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression + expression
Rule 2     expression -> expression - expression
Rule 3     expression -> expression * expression
Rule 4     expression -> expression / expression
Rule 5     expression -> LOCAL ID ASSIGN expression IN expression
Rule 6     expression -> FLOAT
Rule 7     expression_list -> expression , expression_list
Rule 8     expression_list -> expression
Rule 9     expression -> ID
Rule 10    expression -> IF expression THEN expression
Rule 11    expression -> IMPORT ID AS ID
Rule 12    expression -> { sequence }
Rule 13    sequence_struct -> sequence_struct ; . ID ASSIGN expression
Rule 14    sequence_struct -> . ID ASSIGN expression
Rule 15    expression -> STRING
Rule 16    expression -> dots ID
Rule 17    expression -> IF expression THEN expression ELSE expression
Rule 18    expression -> IMPORT ID
Rule 19    sequence -> sequence ; expression
Rule 20    sequence -> expression
Rule 21    expression -> expression AND expression
Rule 22    expression -> expression EQ expression
Rule 23    expression -> expression = expression
Rule 24    expression -> expression > expression
Rule 25    expression -> expression < expression
Rule 26    expression -> expression GE expression
Rule 27    expression -> expression LE expression
Rule 28    expression -> expression NEQS expression
Rule 29    expression -> expression OR expression
Rule 30    expression -> expression NAND expression
Rule 31    expression -> LAMBDA_START LAMBDA expression
Rule 32    expression -> LAMBDA_START expression_list LAMBDA expression
Rule 33    expression -> CHAR
Rule 34    expression -> STRUCT { sequence_struct }
Rule 35    expression -> ID ASSIGN expression
Rule 36    expression -> LOOP expression DO expression
Rule 37    expression -> [ expression_list ]
Rule 38    expression -> EXTEND ID { sequence_struct }
Rule 39    expression -> dots ID ASSIGN expression
Rule 40    expression -> - expression
Rule 41    expression -> ID ( )
Rule 42    expression -> ID ( expression_list )
Rule 43    expression -> ID [ NUMBER ]
Rule 44    expression -> FOR expression ; expression ; expression DO expression
Rule 45    dots -> .
Rule 46    dots -> . dots
Rule 47    expression -> NUMBER
Rule 48    expression -> ( expression_list )
Rule 49    expression -> WHILE expression DO expression
Rule 50    dot_expression -> ID dots ID
Rule 51    dot_expression -> dots ID
Rule 52    expression -> dot_expression
Rule 53    expression -> dot_expression ( )
Rule 54    expression -> dot_expression ( expression_list )
Rule 55    expression -> NOT expression
Rule 56    expression -> BOOL

Terminals, with rules where they appear

(                    : 41 42 48 53 54
)                    : 41 42 48 53 54
*                    : 3
+                    : 1
,                    : 7
-                    : 2 40
.                    : 13 14 45 46
/                    : 4
;                    : 13 19 44 44
<                    : 25
=                    : 23
>                    : 24
AND                  : 21
AS                   : 11
ASSIGN               : 5 13 14 35 39
BOOL                 : 56
CHAR                 : 33
DO                   : 36 44 49
ELSE                 : 17
EQ                   : 22
EXTEND               : 38
FLOAT                : 6
FOR                  : 44
GE                   : 26
ID                   : 5 9 11 11 13 14 16 18 35 38 39 41 42 43 50 50 51
IF                   : 10 17
IMPORT               : 11 18
IN                   : 5
LAMBDA               : 31 32
LAMBDA_START         : 31 32
LE                   : 27
LOCAL                : 5
LOOP                 : 36
NAND                 : 30
NEQS                 : 28
NOT                  : 55
NUMBER               : 43 47
OR                   : 29
STRING               : 15
STRUCT               : 34
THEN                 : 10 17
WHILE                : 49
[                    : 37 43
]                    : 37 43
error                : 
{                    : 12 34 38
}                    : 12 34 38

Nonterminals, with rules where they appear

dot_expression       : 52 53 54
dots                 : 16 39 46 50 51
expression           : 1 1 2 2 3 3 4 4 5 5 7 8 10 10 13 14 17 17 17 19 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 32 35 36 36 39 40 44 44 44 44 49 49 55 0
expression_list      : 7 32 37 42 48 54
sequence             : 12 19
sequence_struct      : 13 34 38

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 1
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 1

    (0) S' -> expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 2

    (40) expression -> - . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 39
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 3

    (5) expression -> LOCAL . ID ASSIGN expression IN expression

    ID              shift and go to state 40


state 4

    (9) expression -> ID .
    (35) expression -> ID . ASSIGN expression
    (41) expression -> ID . ( )
    (42) expression -> ID . ( expression_list )
    (43) expression -> ID . [ NUMBER ]
    (50) dot_expression -> ID . dots ID
    (45) dots -> . .
    (46) dots -> . . dots

    +               reduce using rule 9 (expression -> ID .)
    -               reduce using rule 9 (expression -> ID .)
    *               reduce using rule 9 (expression -> ID .)
    /               reduce using rule 9 (expression -> ID .)
    AND             reduce using rule 9 (expression -> ID .)
    EQ              reduce using rule 9 (expression -> ID .)
    =               reduce using rule 9 (expression -> ID .)
    >               reduce using rule 9 (expression -> ID .)
    <               reduce using rule 9 (expression -> ID .)
    GE              reduce using rule 9 (expression -> ID .)
    LE              reduce using rule 9 (expression -> ID .)
    NEQS            reduce using rule 9 (expression -> ID .)
    OR              reduce using rule 9 (expression -> ID .)
    NAND            reduce using rule 9 (expression -> ID .)
    $end            reduce using rule 9 (expression -> ID .)
    THEN            reduce using rule 9 (expression -> ID .)
    }               reduce using rule 9 (expression -> ID .)
    ;               reduce using rule 9 (expression -> ID .)
    ,               reduce using rule 9 (expression -> ID .)
    LAMBDA          reduce using rule 9 (expression -> ID .)
    DO              reduce using rule 9 (expression -> ID .)
    ]               reduce using rule 9 (expression -> ID .)
    )               reduce using rule 9 (expression -> ID .)
    IN              reduce using rule 9 (expression -> ID .)
    ELSE            reduce using rule 9 (expression -> ID .)
    ASSIGN          shift and go to state 41
    (               shift and go to state 42
    [               shift and go to state 43
    .               shift and go to state 24

    dots                           shift and go to state 44

state 5

    (6) expression -> FLOAT .

    +               reduce using rule 6 (expression -> FLOAT .)
    -               reduce using rule 6 (expression -> FLOAT .)
    *               reduce using rule 6 (expression -> FLOAT .)
    /               reduce using rule 6 (expression -> FLOAT .)
    AND             reduce using rule 6 (expression -> FLOAT .)
    EQ              reduce using rule 6 (expression -> FLOAT .)
    =               reduce using rule 6 (expression -> FLOAT .)
    >               reduce using rule 6 (expression -> FLOAT .)
    <               reduce using rule 6 (expression -> FLOAT .)
    GE              reduce using rule 6 (expression -> FLOAT .)
    LE              reduce using rule 6 (expression -> FLOAT .)
    NEQS            reduce using rule 6 (expression -> FLOAT .)
    OR              reduce using rule 6 (expression -> FLOAT .)
    NAND            reduce using rule 6 (expression -> FLOAT .)
    $end            reduce using rule 6 (expression -> FLOAT .)
    THEN            reduce using rule 6 (expression -> FLOAT .)
    }               reduce using rule 6 (expression -> FLOAT .)
    ;               reduce using rule 6 (expression -> FLOAT .)
    ,               reduce using rule 6 (expression -> FLOAT .)
    LAMBDA          reduce using rule 6 (expression -> FLOAT .)
    DO              reduce using rule 6 (expression -> FLOAT .)
    ]               reduce using rule 6 (expression -> FLOAT .)
    )               reduce using rule 6 (expression -> FLOAT .)
    IN              reduce using rule 6 (expression -> FLOAT .)
    ELSE            reduce using rule 6 (expression -> FLOAT .)


state 6

    (10) expression -> IF . expression THEN expression
    (17) expression -> IF . expression THEN expression ELSE expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 45
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 7

    (11) expression -> IMPORT . ID AS ID
    (18) expression -> IMPORT . ID

    ID              shift and go to state 46


state 8

    (12) expression -> { . sequence }
    (19) sequence -> . sequence ; expression
    (20) sequence -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    sequence                       shift and go to state 47
    expression                     shift and go to state 48
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 9

    (15) expression -> STRING .

    +               reduce using rule 15 (expression -> STRING .)
    -               reduce using rule 15 (expression -> STRING .)
    *               reduce using rule 15 (expression -> STRING .)
    /               reduce using rule 15 (expression -> STRING .)
    AND             reduce using rule 15 (expression -> STRING .)
    EQ              reduce using rule 15 (expression -> STRING .)
    =               reduce using rule 15 (expression -> STRING .)
    >               reduce using rule 15 (expression -> STRING .)
    <               reduce using rule 15 (expression -> STRING .)
    GE              reduce using rule 15 (expression -> STRING .)
    LE              reduce using rule 15 (expression -> STRING .)
    NEQS            reduce using rule 15 (expression -> STRING .)
    OR              reduce using rule 15 (expression -> STRING .)
    NAND            reduce using rule 15 (expression -> STRING .)
    $end            reduce using rule 15 (expression -> STRING .)
    THEN            reduce using rule 15 (expression -> STRING .)
    }               reduce using rule 15 (expression -> STRING .)
    ;               reduce using rule 15 (expression -> STRING .)
    ,               reduce using rule 15 (expression -> STRING .)
    LAMBDA          reduce using rule 15 (expression -> STRING .)
    DO              reduce using rule 15 (expression -> STRING .)
    ]               reduce using rule 15 (expression -> STRING .)
    )               reduce using rule 15 (expression -> STRING .)
    IN              reduce using rule 15 (expression -> STRING .)
    ELSE            reduce using rule 15 (expression -> STRING .)


state 10

    (16) expression -> dots . ID
    (39) expression -> dots . ID ASSIGN expression
    (51) dot_expression -> dots . ID

    ID              shift and go to state 49


state 11

    (31) expression -> LAMBDA_START . LAMBDA expression
    (32) expression -> LAMBDA_START . expression_list LAMBDA expression
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LAMBDA          shift and go to state 50
    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 51
    expression_list                shift and go to state 52
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 12

    (33) expression -> CHAR .

    +               reduce using rule 33 (expression -> CHAR .)
    -               reduce using rule 33 (expression -> CHAR .)
    *               reduce using rule 33 (expression -> CHAR .)
    /               reduce using rule 33 (expression -> CHAR .)
    AND             reduce using rule 33 (expression -> CHAR .)
    EQ              reduce using rule 33 (expression -> CHAR .)
    =               reduce using rule 33 (expression -> CHAR .)
    >               reduce using rule 33 (expression -> CHAR .)
    <               reduce using rule 33 (expression -> CHAR .)
    GE              reduce using rule 33 (expression -> CHAR .)
    LE              reduce using rule 33 (expression -> CHAR .)
    NEQS            reduce using rule 33 (expression -> CHAR .)
    OR              reduce using rule 33 (expression -> CHAR .)
    NAND            reduce using rule 33 (expression -> CHAR .)
    $end            reduce using rule 33 (expression -> CHAR .)
    THEN            reduce using rule 33 (expression -> CHAR .)
    }               reduce using rule 33 (expression -> CHAR .)
    ;               reduce using rule 33 (expression -> CHAR .)
    ,               reduce using rule 33 (expression -> CHAR .)
    LAMBDA          reduce using rule 33 (expression -> CHAR .)
    DO              reduce using rule 33 (expression -> CHAR .)
    ]               reduce using rule 33 (expression -> CHAR .)
    )               reduce using rule 33 (expression -> CHAR .)
    IN              reduce using rule 33 (expression -> CHAR .)
    ELSE            reduce using rule 33 (expression -> CHAR .)


state 13

    (34) expression -> STRUCT . { sequence_struct }

    {               shift and go to state 53


state 14

    (36) expression -> LOOP . expression DO expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 54
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 15

    (37) expression -> [ . expression_list ]
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression_list                shift and go to state 55
    expression                     shift and go to state 51
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 16

    (38) expression -> EXTEND . ID { sequence_struct }

    ID              shift and go to state 56


state 17

    (48) expression -> ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression_list                shift and go to state 57
    expression                     shift and go to state 51
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 18

    (47) expression -> NUMBER .

    +               reduce using rule 47 (expression -> NUMBER .)
    -               reduce using rule 47 (expression -> NUMBER .)
    *               reduce using rule 47 (expression -> NUMBER .)
    /               reduce using rule 47 (expression -> NUMBER .)
    AND             reduce using rule 47 (expression -> NUMBER .)
    EQ              reduce using rule 47 (expression -> NUMBER .)
    =               reduce using rule 47 (expression -> NUMBER .)
    >               reduce using rule 47 (expression -> NUMBER .)
    <               reduce using rule 47 (expression -> NUMBER .)
    GE              reduce using rule 47 (expression -> NUMBER .)
    LE              reduce using rule 47 (expression -> NUMBER .)
    NEQS            reduce using rule 47 (expression -> NUMBER .)
    OR              reduce using rule 47 (expression -> NUMBER .)
    NAND            reduce using rule 47 (expression -> NUMBER .)
    $end            reduce using rule 47 (expression -> NUMBER .)
    THEN            reduce using rule 47 (expression -> NUMBER .)
    }               reduce using rule 47 (expression -> NUMBER .)
    ;               reduce using rule 47 (expression -> NUMBER .)
    ,               reduce using rule 47 (expression -> NUMBER .)
    LAMBDA          reduce using rule 47 (expression -> NUMBER .)
    DO              reduce using rule 47 (expression -> NUMBER .)
    ]               reduce using rule 47 (expression -> NUMBER .)
    )               reduce using rule 47 (expression -> NUMBER .)
    IN              reduce using rule 47 (expression -> NUMBER .)
    ELSE            reduce using rule 47 (expression -> NUMBER .)


state 19

    (44) expression -> FOR . expression ; expression ; expression DO expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 58
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 20

    (49) expression -> WHILE . expression DO expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 59
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 21

    (52) expression -> dot_expression .
    (53) expression -> dot_expression . ( )
    (54) expression -> dot_expression . ( expression_list )

    +               reduce using rule 52 (expression -> dot_expression .)
    -               reduce using rule 52 (expression -> dot_expression .)
    *               reduce using rule 52 (expression -> dot_expression .)
    /               reduce using rule 52 (expression -> dot_expression .)
    AND             reduce using rule 52 (expression -> dot_expression .)
    EQ              reduce using rule 52 (expression -> dot_expression .)
    =               reduce using rule 52 (expression -> dot_expression .)
    >               reduce using rule 52 (expression -> dot_expression .)
    <               reduce using rule 52 (expression -> dot_expression .)
    GE              reduce using rule 52 (expression -> dot_expression .)
    LE              reduce using rule 52 (expression -> dot_expression .)
    NEQS            reduce using rule 52 (expression -> dot_expression .)
    OR              reduce using rule 52 (expression -> dot_expression .)
    NAND            reduce using rule 52 (expression -> dot_expression .)
    $end            reduce using rule 52 (expression -> dot_expression .)
    THEN            reduce using rule 52 (expression -> dot_expression .)
    }               reduce using rule 52 (expression -> dot_expression .)
    ;               reduce using rule 52 (expression -> dot_expression .)
    ,               reduce using rule 52 (expression -> dot_expression .)
    LAMBDA          reduce using rule 52 (expression -> dot_expression .)
    DO              reduce using rule 52 (expression -> dot_expression .)
    ]               reduce using rule 52 (expression -> dot_expression .)
    )               reduce using rule 52 (expression -> dot_expression .)
    IN              reduce using rule 52 (expression -> dot_expression .)
    ELSE            reduce using rule 52 (expression -> dot_expression .)
    (               shift and go to state 60


state 22

    (55) expression -> NOT . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 61
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 23

    (56) expression -> BOOL .

    +               reduce using rule 56 (expression -> BOOL .)
    -               reduce using rule 56 (expression -> BOOL .)
    *               reduce using rule 56 (expression -> BOOL .)
    /               reduce using rule 56 (expression -> BOOL .)
    AND             reduce using rule 56 (expression -> BOOL .)
    EQ              reduce using rule 56 (expression -> BOOL .)
    =               reduce using rule 56 (expression -> BOOL .)
    >               reduce using rule 56 (expression -> BOOL .)
    <               reduce using rule 56 (expression -> BOOL .)
    GE              reduce using rule 56 (expression -> BOOL .)
    LE              reduce using rule 56 (expression -> BOOL .)
    NEQS            reduce using rule 56 (expression -> BOOL .)
    OR              reduce using rule 56 (expression -> BOOL .)
    NAND            reduce using rule 56 (expression -> BOOL .)
    $end            reduce using rule 56 (expression -> BOOL .)
    THEN            reduce using rule 56 (expression -> BOOL .)
    }               reduce using rule 56 (expression -> BOOL .)
    ;               reduce using rule 56 (expression -> BOOL .)
    ,               reduce using rule 56 (expression -> BOOL .)
    LAMBDA          reduce using rule 56 (expression -> BOOL .)
    DO              reduce using rule 56 (expression -> BOOL .)
    ]               reduce using rule 56 (expression -> BOOL .)
    )               reduce using rule 56 (expression -> BOOL .)
    IN              reduce using rule 56 (expression -> BOOL .)
    ELSE            reduce using rule 56 (expression -> BOOL .)


state 24

    (45) dots -> . .
    (46) dots -> . . dots
    (45) dots -> . .
    (46) dots -> . . dots

    ID              reduce using rule 45 (dots -> . .)
    .               shift and go to state 24

    dots                           shift and go to state 62

state 25

    (1) expression -> expression + . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 63
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 26

    (2) expression -> expression - . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 64
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 27

    (3) expression -> expression * . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 65
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 28

    (4) expression -> expression / . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 66
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 29

    (21) expression -> expression AND . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 67
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 30

    (22) expression -> expression EQ . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 68
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 31

    (23) expression -> expression = . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 69
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 32

    (24) expression -> expression > . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 70
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 33

    (25) expression -> expression < . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 71
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 34

    (26) expression -> expression GE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 72
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 35

    (27) expression -> expression LE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 73
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 36

    (28) expression -> expression NEQS . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 74
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 37

    (29) expression -> expression OR . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 75
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 38

    (30) expression -> expression NAND . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 76
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 39

    (40) expression -> - expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    +               reduce using rule 40 (expression -> - expression .)
    -               reduce using rule 40 (expression -> - expression .)
    *               reduce using rule 40 (expression -> - expression .)
    /               reduce using rule 40 (expression -> - expression .)
    AND             reduce using rule 40 (expression -> - expression .)
    EQ              reduce using rule 40 (expression -> - expression .)
    =               reduce using rule 40 (expression -> - expression .)
    >               reduce using rule 40 (expression -> - expression .)
    <               reduce using rule 40 (expression -> - expression .)
    GE              reduce using rule 40 (expression -> - expression .)
    LE              reduce using rule 40 (expression -> - expression .)
    NEQS            reduce using rule 40 (expression -> - expression .)
    OR              reduce using rule 40 (expression -> - expression .)
    NAND            reduce using rule 40 (expression -> - expression .)
    $end            reduce using rule 40 (expression -> - expression .)
    THEN            reduce using rule 40 (expression -> - expression .)
    }               reduce using rule 40 (expression -> - expression .)
    ;               reduce using rule 40 (expression -> - expression .)
    ,               reduce using rule 40 (expression -> - expression .)
    LAMBDA          reduce using rule 40 (expression -> - expression .)
    DO              reduce using rule 40 (expression -> - expression .)
    ]               reduce using rule 40 (expression -> - expression .)
    )               reduce using rule 40 (expression -> - expression .)
    IN              reduce using rule 40 (expression -> - expression .)
    ELSE            reduce using rule 40 (expression -> - expression .)

  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! /               [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 40

    (5) expression -> LOCAL ID . ASSIGN expression IN expression

    ASSIGN          shift and go to state 77


state 41

    (35) expression -> ID ASSIGN . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 78
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 42

    (41) expression -> ID ( . )
    (42) expression -> ID ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    )               shift and go to state 79
    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression_list                shift and go to state 80
    expression                     shift and go to state 51
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 43

    (43) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 81


state 44

    (50) dot_expression -> ID dots . ID

    ID              shift and go to state 82


state 45

    (10) expression -> IF expression . THEN expression
    (17) expression -> IF expression . THEN expression ELSE expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    THEN            shift and go to state 83
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 46

    (11) expression -> IMPORT ID . AS ID
    (18) expression -> IMPORT ID .

    AS              shift and go to state 84
    +               reduce using rule 18 (expression -> IMPORT ID .)
    -               reduce using rule 18 (expression -> IMPORT ID .)
    *               reduce using rule 18 (expression -> IMPORT ID .)
    /               reduce using rule 18 (expression -> IMPORT ID .)
    AND             reduce using rule 18 (expression -> IMPORT ID .)
    EQ              reduce using rule 18 (expression -> IMPORT ID .)
    =               reduce using rule 18 (expression -> IMPORT ID .)
    >               reduce using rule 18 (expression -> IMPORT ID .)
    <               reduce using rule 18 (expression -> IMPORT ID .)
    GE              reduce using rule 18 (expression -> IMPORT ID .)
    LE              reduce using rule 18 (expression -> IMPORT ID .)
    NEQS            reduce using rule 18 (expression -> IMPORT ID .)
    OR              reduce using rule 18 (expression -> IMPORT ID .)
    NAND            reduce using rule 18 (expression -> IMPORT ID .)
    $end            reduce using rule 18 (expression -> IMPORT ID .)
    THEN            reduce using rule 18 (expression -> IMPORT ID .)
    }               reduce using rule 18 (expression -> IMPORT ID .)
    ;               reduce using rule 18 (expression -> IMPORT ID .)
    ,               reduce using rule 18 (expression -> IMPORT ID .)
    LAMBDA          reduce using rule 18 (expression -> IMPORT ID .)
    DO              reduce using rule 18 (expression -> IMPORT ID .)
    ]               reduce using rule 18 (expression -> IMPORT ID .)
    )               reduce using rule 18 (expression -> IMPORT ID .)
    IN              reduce using rule 18 (expression -> IMPORT ID .)
    ELSE            reduce using rule 18 (expression -> IMPORT ID .)


state 47

    (12) expression -> { sequence . }
    (19) sequence -> sequence . ; expression

    }               shift and go to state 85
    ;               shift and go to state 86


state 48

    (20) sequence -> expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    }               reduce using rule 20 (sequence -> expression .)
    ;               reduce using rule 20 (sequence -> expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 49

    (16) expression -> dots ID .
    (39) expression -> dots ID . ASSIGN expression
    (51) dot_expression -> dots ID .

  ! reduce/reduce conflict for + resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for - resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for * resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for / resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for AND resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for EQ resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for = resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for > resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for < resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for GE resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for LE resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for NEQS resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for OR resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for NAND resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for $end resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for THEN resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for } resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for ; resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for , resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for DO resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for ] resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for ) resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for IN resolved using rule 16 (expression -> dots ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (expression -> dots ID .)
    +               reduce using rule 16 (expression -> dots ID .)
    -               reduce using rule 16 (expression -> dots ID .)
    *               reduce using rule 16 (expression -> dots ID .)
    /               reduce using rule 16 (expression -> dots ID .)
    AND             reduce using rule 16 (expression -> dots ID .)
    EQ              reduce using rule 16 (expression -> dots ID .)
    =               reduce using rule 16 (expression -> dots ID .)
    >               reduce using rule 16 (expression -> dots ID .)
    <               reduce using rule 16 (expression -> dots ID .)
    GE              reduce using rule 16 (expression -> dots ID .)
    LE              reduce using rule 16 (expression -> dots ID .)
    NEQS            reduce using rule 16 (expression -> dots ID .)
    OR              reduce using rule 16 (expression -> dots ID .)
    NAND            reduce using rule 16 (expression -> dots ID .)
    $end            reduce using rule 16 (expression -> dots ID .)
    THEN            reduce using rule 16 (expression -> dots ID .)
    }               reduce using rule 16 (expression -> dots ID .)
    ;               reduce using rule 16 (expression -> dots ID .)
    ,               reduce using rule 16 (expression -> dots ID .)
    LAMBDA          reduce using rule 16 (expression -> dots ID .)
    DO              reduce using rule 16 (expression -> dots ID .)
    ]               reduce using rule 16 (expression -> dots ID .)
    )               reduce using rule 16 (expression -> dots ID .)
    IN              reduce using rule 16 (expression -> dots ID .)
    ELSE            reduce using rule 16 (expression -> dots ID .)
    ASSIGN          shift and go to state 87
    (               reduce using rule 51 (dot_expression -> dots ID .)

  ! +               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! -               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! *               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! /               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! AND             [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! EQ              [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! =               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! >               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! <               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! GE              [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! LE              [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! NEQS            [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! OR              [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! NAND            [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! $end            [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! THEN            [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! }               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! ;               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! ,               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! LAMBDA          [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! DO              [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! ]               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! )               [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! IN              [ reduce using rule 51 (dot_expression -> dots ID .) ]
  ! ELSE            [ reduce using rule 51 (dot_expression -> dots ID .) ]


state 50

    (31) expression -> LAMBDA_START LAMBDA . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 88
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 51

    (7) expression_list -> expression . , expression_list
    (8) expression_list -> expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    ,               shift and go to state 89
    LAMBDA          reduce using rule 8 (expression_list -> expression .)
    ]               reduce using rule 8 (expression_list -> expression .)
    )               reduce using rule 8 (expression_list -> expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 52

    (32) expression -> LAMBDA_START expression_list . LAMBDA expression

    LAMBDA          shift and go to state 90


state 53

    (34) expression -> STRUCT { . sequence_struct }
    (13) sequence_struct -> . sequence_struct ; . ID ASSIGN expression
    (14) sequence_struct -> . . ID ASSIGN expression

    .               shift and go to state 92

    sequence_struct                shift and go to state 91

state 54

    (36) expression -> LOOP expression . DO expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    DO              shift and go to state 93
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 55

    (37) expression -> [ expression_list . ]

    ]               shift and go to state 94


state 56

    (38) expression -> EXTEND ID . { sequence_struct }

    {               shift and go to state 95


state 57

    (48) expression -> ( expression_list . )

    )               shift and go to state 96


state 58

    (44) expression -> FOR expression . ; expression ; expression DO expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    ;               shift and go to state 97
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 59

    (49) expression -> WHILE expression . DO expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    DO              shift and go to state 98
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 60

    (53) expression -> dot_expression ( . )
    (54) expression -> dot_expression ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    )               shift and go to state 99
    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    dot_expression                 shift and go to state 21
    expression_list                shift and go to state 100
    expression                     shift and go to state 51
    dots                           shift and go to state 10

state 61

    (55) expression -> NOT expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    +               reduce using rule 55 (expression -> NOT expression .)
    -               reduce using rule 55 (expression -> NOT expression .)
    *               reduce using rule 55 (expression -> NOT expression .)
    /               reduce using rule 55 (expression -> NOT expression .)
    AND             reduce using rule 55 (expression -> NOT expression .)
    EQ              reduce using rule 55 (expression -> NOT expression .)
    =               reduce using rule 55 (expression -> NOT expression .)
    >               reduce using rule 55 (expression -> NOT expression .)
    <               reduce using rule 55 (expression -> NOT expression .)
    GE              reduce using rule 55 (expression -> NOT expression .)
    LE              reduce using rule 55 (expression -> NOT expression .)
    NEQS            reduce using rule 55 (expression -> NOT expression .)
    OR              reduce using rule 55 (expression -> NOT expression .)
    NAND            reduce using rule 55 (expression -> NOT expression .)
    $end            reduce using rule 55 (expression -> NOT expression .)
    THEN            reduce using rule 55 (expression -> NOT expression .)
    }               reduce using rule 55 (expression -> NOT expression .)
    ;               reduce using rule 55 (expression -> NOT expression .)
    ,               reduce using rule 55 (expression -> NOT expression .)
    LAMBDA          reduce using rule 55 (expression -> NOT expression .)
    DO              reduce using rule 55 (expression -> NOT expression .)
    ]               reduce using rule 55 (expression -> NOT expression .)
    )               reduce using rule 55 (expression -> NOT expression .)
    IN              reduce using rule 55 (expression -> NOT expression .)
    ELSE            reduce using rule 55 (expression -> NOT expression .)

  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! /               [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 62

    (46) dots -> . dots .

    ID              reduce using rule 46 (dots -> . dots .)


state 63

    (1) expression -> expression + expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    +               reduce using rule 1 (expression -> expression + expression .)
    -               reduce using rule 1 (expression -> expression + expression .)
    AND             reduce using rule 1 (expression -> expression + expression .)
    EQ              reduce using rule 1 (expression -> expression + expression .)
    =               reduce using rule 1 (expression -> expression + expression .)
    >               reduce using rule 1 (expression -> expression + expression .)
    <               reduce using rule 1 (expression -> expression + expression .)
    GE              reduce using rule 1 (expression -> expression + expression .)
    LE              reduce using rule 1 (expression -> expression + expression .)
    NEQS            reduce using rule 1 (expression -> expression + expression .)
    OR              reduce using rule 1 (expression -> expression + expression .)
    NAND            reduce using rule 1 (expression -> expression + expression .)
    $end            reduce using rule 1 (expression -> expression + expression .)
    THEN            reduce using rule 1 (expression -> expression + expression .)
    }               reduce using rule 1 (expression -> expression + expression .)
    ;               reduce using rule 1 (expression -> expression + expression .)
    ,               reduce using rule 1 (expression -> expression + expression .)
    LAMBDA          reduce using rule 1 (expression -> expression + expression .)
    DO              reduce using rule 1 (expression -> expression + expression .)
    ]               reduce using rule 1 (expression -> expression + expression .)
    )               reduce using rule 1 (expression -> expression + expression .)
    IN              reduce using rule 1 (expression -> expression + expression .)
    ELSE            reduce using rule 1 (expression -> expression + expression .)
    *               shift and go to state 27
    /               shift and go to state 28

  ! *               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 64

    (2) expression -> expression - expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    +               reduce using rule 2 (expression -> expression - expression .)
    -               reduce using rule 2 (expression -> expression - expression .)
    AND             reduce using rule 2 (expression -> expression - expression .)
    EQ              reduce using rule 2 (expression -> expression - expression .)
    =               reduce using rule 2 (expression -> expression - expression .)
    >               reduce using rule 2 (expression -> expression - expression .)
    <               reduce using rule 2 (expression -> expression - expression .)
    GE              reduce using rule 2 (expression -> expression - expression .)
    LE              reduce using rule 2 (expression -> expression - expression .)
    NEQS            reduce using rule 2 (expression -> expression - expression .)
    OR              reduce using rule 2 (expression -> expression - expression .)
    NAND            reduce using rule 2 (expression -> expression - expression .)
    $end            reduce using rule 2 (expression -> expression - expression .)
    THEN            reduce using rule 2 (expression -> expression - expression .)
    }               reduce using rule 2 (expression -> expression - expression .)
    ;               reduce using rule 2 (expression -> expression - expression .)
    ,               reduce using rule 2 (expression -> expression - expression .)
    LAMBDA          reduce using rule 2 (expression -> expression - expression .)
    DO              reduce using rule 2 (expression -> expression - expression .)
    ]               reduce using rule 2 (expression -> expression - expression .)
    )               reduce using rule 2 (expression -> expression - expression .)
    IN              reduce using rule 2 (expression -> expression - expression .)
    ELSE            reduce using rule 2 (expression -> expression - expression .)
    *               shift and go to state 27
    /               shift and go to state 28

  ! *               [ reduce using rule 2 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 2 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 65

    (3) expression -> expression * expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    +               reduce using rule 3 (expression -> expression * expression .)
    -               reduce using rule 3 (expression -> expression * expression .)
    *               reduce using rule 3 (expression -> expression * expression .)
    /               reduce using rule 3 (expression -> expression * expression .)
    AND             reduce using rule 3 (expression -> expression * expression .)
    EQ              reduce using rule 3 (expression -> expression * expression .)
    =               reduce using rule 3 (expression -> expression * expression .)
    >               reduce using rule 3 (expression -> expression * expression .)
    <               reduce using rule 3 (expression -> expression * expression .)
    GE              reduce using rule 3 (expression -> expression * expression .)
    LE              reduce using rule 3 (expression -> expression * expression .)
    NEQS            reduce using rule 3 (expression -> expression * expression .)
    OR              reduce using rule 3 (expression -> expression * expression .)
    NAND            reduce using rule 3 (expression -> expression * expression .)
    $end            reduce using rule 3 (expression -> expression * expression .)
    THEN            reduce using rule 3 (expression -> expression * expression .)
    }               reduce using rule 3 (expression -> expression * expression .)
    ;               reduce using rule 3 (expression -> expression * expression .)
    ,               reduce using rule 3 (expression -> expression * expression .)
    LAMBDA          reduce using rule 3 (expression -> expression * expression .)
    DO              reduce using rule 3 (expression -> expression * expression .)
    ]               reduce using rule 3 (expression -> expression * expression .)
    )               reduce using rule 3 (expression -> expression * expression .)
    IN              reduce using rule 3 (expression -> expression * expression .)
    ELSE            reduce using rule 3 (expression -> expression * expression .)

  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! /               [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 66

    (4) expression -> expression / expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    +               reduce using rule 4 (expression -> expression / expression .)
    -               reduce using rule 4 (expression -> expression / expression .)
    *               reduce using rule 4 (expression -> expression / expression .)
    /               reduce using rule 4 (expression -> expression / expression .)
    AND             reduce using rule 4 (expression -> expression / expression .)
    EQ              reduce using rule 4 (expression -> expression / expression .)
    =               reduce using rule 4 (expression -> expression / expression .)
    >               reduce using rule 4 (expression -> expression / expression .)
    <               reduce using rule 4 (expression -> expression / expression .)
    GE              reduce using rule 4 (expression -> expression / expression .)
    LE              reduce using rule 4 (expression -> expression / expression .)
    NEQS            reduce using rule 4 (expression -> expression / expression .)
    OR              reduce using rule 4 (expression -> expression / expression .)
    NAND            reduce using rule 4 (expression -> expression / expression .)
    $end            reduce using rule 4 (expression -> expression / expression .)
    THEN            reduce using rule 4 (expression -> expression / expression .)
    }               reduce using rule 4 (expression -> expression / expression .)
    ;               reduce using rule 4 (expression -> expression / expression .)
    ,               reduce using rule 4 (expression -> expression / expression .)
    LAMBDA          reduce using rule 4 (expression -> expression / expression .)
    DO              reduce using rule 4 (expression -> expression / expression .)
    ]               reduce using rule 4 (expression -> expression / expression .)
    )               reduce using rule 4 (expression -> expression / expression .)
    IN              reduce using rule 4 (expression -> expression / expression .)
    ELSE            reduce using rule 4 (expression -> expression / expression .)

  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! /               [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 67

    (21) expression -> expression AND expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 21 (expression -> expression AND expression .)
    OR              reduce using rule 21 (expression -> expression AND expression .)
    NAND            reduce using rule 21 (expression -> expression AND expression .)
    $end            reduce using rule 21 (expression -> expression AND expression .)
    THEN            reduce using rule 21 (expression -> expression AND expression .)
    }               reduce using rule 21 (expression -> expression AND expression .)
    ;               reduce using rule 21 (expression -> expression AND expression .)
    ,               reduce using rule 21 (expression -> expression AND expression .)
    LAMBDA          reduce using rule 21 (expression -> expression AND expression .)
    DO              reduce using rule 21 (expression -> expression AND expression .)
    ]               reduce using rule 21 (expression -> expression AND expression .)
    )               reduce using rule 21 (expression -> expression AND expression .)
    IN              reduce using rule 21 (expression -> expression AND expression .)
    ELSE            reduce using rule 21 (expression -> expression AND expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36

  ! +               [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! =               [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! NEQS            [ reduce using rule 21 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 68

    (22) expression -> expression EQ expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 22 (expression -> expression EQ expression .)
    EQ              reduce using rule 22 (expression -> expression EQ expression .)
    =               reduce using rule 22 (expression -> expression EQ expression .)
    NEQS            reduce using rule 22 (expression -> expression EQ expression .)
    OR              reduce using rule 22 (expression -> expression EQ expression .)
    NAND            reduce using rule 22 (expression -> expression EQ expression .)
    $end            reduce using rule 22 (expression -> expression EQ expression .)
    THEN            reduce using rule 22 (expression -> expression EQ expression .)
    }               reduce using rule 22 (expression -> expression EQ expression .)
    ;               reduce using rule 22 (expression -> expression EQ expression .)
    ,               reduce using rule 22 (expression -> expression EQ expression .)
    LAMBDA          reduce using rule 22 (expression -> expression EQ expression .)
    DO              reduce using rule 22 (expression -> expression EQ expression .)
    ]               reduce using rule 22 (expression -> expression EQ expression .)
    )               reduce using rule 22 (expression -> expression EQ expression .)
    IN              reduce using rule 22 (expression -> expression EQ expression .)
    ELSE            reduce using rule 22 (expression -> expression EQ expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35

  ! +               [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! >               [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! <               [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 22 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 69

    (23) expression -> expression = expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 23 (expression -> expression = expression .)
    EQ              reduce using rule 23 (expression -> expression = expression .)
    =               reduce using rule 23 (expression -> expression = expression .)
    NEQS            reduce using rule 23 (expression -> expression = expression .)
    OR              reduce using rule 23 (expression -> expression = expression .)
    NAND            reduce using rule 23 (expression -> expression = expression .)
    $end            reduce using rule 23 (expression -> expression = expression .)
    THEN            reduce using rule 23 (expression -> expression = expression .)
    }               reduce using rule 23 (expression -> expression = expression .)
    ;               reduce using rule 23 (expression -> expression = expression .)
    ,               reduce using rule 23 (expression -> expression = expression .)
    LAMBDA          reduce using rule 23 (expression -> expression = expression .)
    DO              reduce using rule 23 (expression -> expression = expression .)
    ]               reduce using rule 23 (expression -> expression = expression .)
    )               reduce using rule 23 (expression -> expression = expression .)
    IN              reduce using rule 23 (expression -> expression = expression .)
    ELSE            reduce using rule 23 (expression -> expression = expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35

  ! +               [ reduce using rule 23 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 23 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 23 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 23 (expression -> expression = expression .) ]
  ! >               [ reduce using rule 23 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 23 (expression -> expression = expression .) ]
  ! GE              [ reduce using rule 23 (expression -> expression = expression .) ]
  ! LE              [ reduce using rule 23 (expression -> expression = expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 70

    (24) expression -> expression > expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 24 (expression -> expression > expression .)
    EQ              reduce using rule 24 (expression -> expression > expression .)
    =               reduce using rule 24 (expression -> expression > expression .)
    >               reduce using rule 24 (expression -> expression > expression .)
    <               reduce using rule 24 (expression -> expression > expression .)
    GE              reduce using rule 24 (expression -> expression > expression .)
    LE              reduce using rule 24 (expression -> expression > expression .)
    NEQS            reduce using rule 24 (expression -> expression > expression .)
    OR              reduce using rule 24 (expression -> expression > expression .)
    NAND            reduce using rule 24 (expression -> expression > expression .)
    $end            reduce using rule 24 (expression -> expression > expression .)
    THEN            reduce using rule 24 (expression -> expression > expression .)
    }               reduce using rule 24 (expression -> expression > expression .)
    ;               reduce using rule 24 (expression -> expression > expression .)
    ,               reduce using rule 24 (expression -> expression > expression .)
    LAMBDA          reduce using rule 24 (expression -> expression > expression .)
    DO              reduce using rule 24 (expression -> expression > expression .)
    ]               reduce using rule 24 (expression -> expression > expression .)
    )               reduce using rule 24 (expression -> expression > expression .)
    IN              reduce using rule 24 (expression -> expression > expression .)
    ELSE            reduce using rule 24 (expression -> expression > expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28

  ! +               [ reduce using rule 24 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression > expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 71

    (25) expression -> expression < expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 25 (expression -> expression < expression .)
    EQ              reduce using rule 25 (expression -> expression < expression .)
    =               reduce using rule 25 (expression -> expression < expression .)
    >               reduce using rule 25 (expression -> expression < expression .)
    <               reduce using rule 25 (expression -> expression < expression .)
    GE              reduce using rule 25 (expression -> expression < expression .)
    LE              reduce using rule 25 (expression -> expression < expression .)
    NEQS            reduce using rule 25 (expression -> expression < expression .)
    OR              reduce using rule 25 (expression -> expression < expression .)
    NAND            reduce using rule 25 (expression -> expression < expression .)
    $end            reduce using rule 25 (expression -> expression < expression .)
    THEN            reduce using rule 25 (expression -> expression < expression .)
    }               reduce using rule 25 (expression -> expression < expression .)
    ;               reduce using rule 25 (expression -> expression < expression .)
    ,               reduce using rule 25 (expression -> expression < expression .)
    LAMBDA          reduce using rule 25 (expression -> expression < expression .)
    DO              reduce using rule 25 (expression -> expression < expression .)
    ]               reduce using rule 25 (expression -> expression < expression .)
    )               reduce using rule 25 (expression -> expression < expression .)
    IN              reduce using rule 25 (expression -> expression < expression .)
    ELSE            reduce using rule 25 (expression -> expression < expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28

  ! +               [ reduce using rule 25 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression < expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 72

    (26) expression -> expression GE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 26 (expression -> expression GE expression .)
    EQ              reduce using rule 26 (expression -> expression GE expression .)
    =               reduce using rule 26 (expression -> expression GE expression .)
    >               reduce using rule 26 (expression -> expression GE expression .)
    <               reduce using rule 26 (expression -> expression GE expression .)
    GE              reduce using rule 26 (expression -> expression GE expression .)
    LE              reduce using rule 26 (expression -> expression GE expression .)
    NEQS            reduce using rule 26 (expression -> expression GE expression .)
    OR              reduce using rule 26 (expression -> expression GE expression .)
    NAND            reduce using rule 26 (expression -> expression GE expression .)
    $end            reduce using rule 26 (expression -> expression GE expression .)
    THEN            reduce using rule 26 (expression -> expression GE expression .)
    }               reduce using rule 26 (expression -> expression GE expression .)
    ;               reduce using rule 26 (expression -> expression GE expression .)
    ,               reduce using rule 26 (expression -> expression GE expression .)
    LAMBDA          reduce using rule 26 (expression -> expression GE expression .)
    DO              reduce using rule 26 (expression -> expression GE expression .)
    ]               reduce using rule 26 (expression -> expression GE expression .)
    )               reduce using rule 26 (expression -> expression GE expression .)
    IN              reduce using rule 26 (expression -> expression GE expression .)
    ELSE            reduce using rule 26 (expression -> expression GE expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28

  ! +               [ reduce using rule 26 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 73

    (27) expression -> expression LE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 27 (expression -> expression LE expression .)
    EQ              reduce using rule 27 (expression -> expression LE expression .)
    =               reduce using rule 27 (expression -> expression LE expression .)
    >               reduce using rule 27 (expression -> expression LE expression .)
    <               reduce using rule 27 (expression -> expression LE expression .)
    GE              reduce using rule 27 (expression -> expression LE expression .)
    LE              reduce using rule 27 (expression -> expression LE expression .)
    NEQS            reduce using rule 27 (expression -> expression LE expression .)
    OR              reduce using rule 27 (expression -> expression LE expression .)
    NAND            reduce using rule 27 (expression -> expression LE expression .)
    $end            reduce using rule 27 (expression -> expression LE expression .)
    THEN            reduce using rule 27 (expression -> expression LE expression .)
    }               reduce using rule 27 (expression -> expression LE expression .)
    ;               reduce using rule 27 (expression -> expression LE expression .)
    ,               reduce using rule 27 (expression -> expression LE expression .)
    LAMBDA          reduce using rule 27 (expression -> expression LE expression .)
    DO              reduce using rule 27 (expression -> expression LE expression .)
    ]               reduce using rule 27 (expression -> expression LE expression .)
    )               reduce using rule 27 (expression -> expression LE expression .)
    IN              reduce using rule 27 (expression -> expression LE expression .)
    ELSE            reduce using rule 27 (expression -> expression LE expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28

  ! +               [ reduce using rule 27 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 27 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 27 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 74

    (28) expression -> expression NEQS expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 28 (expression -> expression NEQS expression .)
    EQ              reduce using rule 28 (expression -> expression NEQS expression .)
    =               reduce using rule 28 (expression -> expression NEQS expression .)
    NEQS            reduce using rule 28 (expression -> expression NEQS expression .)
    OR              reduce using rule 28 (expression -> expression NEQS expression .)
    NAND            reduce using rule 28 (expression -> expression NEQS expression .)
    $end            reduce using rule 28 (expression -> expression NEQS expression .)
    THEN            reduce using rule 28 (expression -> expression NEQS expression .)
    }               reduce using rule 28 (expression -> expression NEQS expression .)
    ;               reduce using rule 28 (expression -> expression NEQS expression .)
    ,               reduce using rule 28 (expression -> expression NEQS expression .)
    LAMBDA          reduce using rule 28 (expression -> expression NEQS expression .)
    DO              reduce using rule 28 (expression -> expression NEQS expression .)
    ]               reduce using rule 28 (expression -> expression NEQS expression .)
    )               reduce using rule 28 (expression -> expression NEQS expression .)
    IN              reduce using rule 28 (expression -> expression NEQS expression .)
    ELSE            reduce using rule 28 (expression -> expression NEQS expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35

  ! +               [ reduce using rule 28 (expression -> expression NEQS expression .) ]
  ! -               [ reduce using rule 28 (expression -> expression NEQS expression .) ]
  ! *               [ reduce using rule 28 (expression -> expression NEQS expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression NEQS expression .) ]
  ! >               [ reduce using rule 28 (expression -> expression NEQS expression .) ]
  ! <               [ reduce using rule 28 (expression -> expression NEQS expression .) ]
  ! GE              [ reduce using rule 28 (expression -> expression NEQS expression .) ]
  ! LE              [ reduce using rule 28 (expression -> expression NEQS expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 75

    (29) expression -> expression OR expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    OR              reduce using rule 29 (expression -> expression OR expression .)
    $end            reduce using rule 29 (expression -> expression OR expression .)
    THEN            reduce using rule 29 (expression -> expression OR expression .)
    }               reduce using rule 29 (expression -> expression OR expression .)
    ;               reduce using rule 29 (expression -> expression OR expression .)
    ,               reduce using rule 29 (expression -> expression OR expression .)
    LAMBDA          reduce using rule 29 (expression -> expression OR expression .)
    DO              reduce using rule 29 (expression -> expression OR expression .)
    ]               reduce using rule 29 (expression -> expression OR expression .)
    )               reduce using rule 29 (expression -> expression OR expression .)
    IN              reduce using rule 29 (expression -> expression OR expression .)
    ELSE            reduce using rule 29 (expression -> expression OR expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    NAND            shift and go to state 38

  ! +               [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! =               [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! NEQS            [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! NAND            [ reduce using rule 29 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 37 ]


state 76

    (30) expression -> expression NAND expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    AND             reduce using rule 30 (expression -> expression NAND expression .)
    OR              reduce using rule 30 (expression -> expression NAND expression .)
    NAND            reduce using rule 30 (expression -> expression NAND expression .)
    $end            reduce using rule 30 (expression -> expression NAND expression .)
    THEN            reduce using rule 30 (expression -> expression NAND expression .)
    }               reduce using rule 30 (expression -> expression NAND expression .)
    ;               reduce using rule 30 (expression -> expression NAND expression .)
    ,               reduce using rule 30 (expression -> expression NAND expression .)
    LAMBDA          reduce using rule 30 (expression -> expression NAND expression .)
    DO              reduce using rule 30 (expression -> expression NAND expression .)
    ]               reduce using rule 30 (expression -> expression NAND expression .)
    )               reduce using rule 30 (expression -> expression NAND expression .)
    IN              reduce using rule 30 (expression -> expression NAND expression .)
    ELSE            reduce using rule 30 (expression -> expression NAND expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36

  ! +               [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! -               [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! *               [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! /               [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! EQ              [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! =               [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! >               [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! <               [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! GE              [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! LE              [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! NEQS            [ reduce using rule 30 (expression -> expression NAND expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 77

    (5) expression -> LOCAL ID ASSIGN . expression IN expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 101
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 78

    (35) expression -> ID ASSIGN expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 35 (expression -> ID ASSIGN expression .)
    THEN            reduce using rule 35 (expression -> ID ASSIGN expression .)
    }               reduce using rule 35 (expression -> ID ASSIGN expression .)
    ;               reduce using rule 35 (expression -> ID ASSIGN expression .)
    ,               reduce using rule 35 (expression -> ID ASSIGN expression .)
    LAMBDA          reduce using rule 35 (expression -> ID ASSIGN expression .)
    DO              reduce using rule 35 (expression -> ID ASSIGN expression .)
    ]               reduce using rule 35 (expression -> ID ASSIGN expression .)
    )               reduce using rule 35 (expression -> ID ASSIGN expression .)
    IN              reduce using rule 35 (expression -> ID ASSIGN expression .)
    ELSE            reduce using rule 35 (expression -> ID ASSIGN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! -               [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! *               [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! /               [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! AND             [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! EQ              [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! =               [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! >               [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! <               [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! GE              [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! LE              [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! NEQS            [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! OR              [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]
  ! NAND            [ reduce using rule 35 (expression -> ID ASSIGN expression .) ]


state 79

    (41) expression -> ID ( ) .

    +               reduce using rule 41 (expression -> ID ( ) .)
    -               reduce using rule 41 (expression -> ID ( ) .)
    *               reduce using rule 41 (expression -> ID ( ) .)
    /               reduce using rule 41 (expression -> ID ( ) .)
    AND             reduce using rule 41 (expression -> ID ( ) .)
    EQ              reduce using rule 41 (expression -> ID ( ) .)
    =               reduce using rule 41 (expression -> ID ( ) .)
    >               reduce using rule 41 (expression -> ID ( ) .)
    <               reduce using rule 41 (expression -> ID ( ) .)
    GE              reduce using rule 41 (expression -> ID ( ) .)
    LE              reduce using rule 41 (expression -> ID ( ) .)
    NEQS            reduce using rule 41 (expression -> ID ( ) .)
    OR              reduce using rule 41 (expression -> ID ( ) .)
    NAND            reduce using rule 41 (expression -> ID ( ) .)
    $end            reduce using rule 41 (expression -> ID ( ) .)
    THEN            reduce using rule 41 (expression -> ID ( ) .)
    }               reduce using rule 41 (expression -> ID ( ) .)
    ;               reduce using rule 41 (expression -> ID ( ) .)
    ,               reduce using rule 41 (expression -> ID ( ) .)
    LAMBDA          reduce using rule 41 (expression -> ID ( ) .)
    DO              reduce using rule 41 (expression -> ID ( ) .)
    ]               reduce using rule 41 (expression -> ID ( ) .)
    )               reduce using rule 41 (expression -> ID ( ) .)
    IN              reduce using rule 41 (expression -> ID ( ) .)
    ELSE            reduce using rule 41 (expression -> ID ( ) .)


state 80

    (42) expression -> ID ( expression_list . )

    )               shift and go to state 102


state 81

    (43) expression -> ID [ NUMBER . ]

    ]               shift and go to state 103


state 82

    (50) dot_expression -> ID dots ID .

    (               reduce using rule 50 (dot_expression -> ID dots ID .)
    +               reduce using rule 50 (dot_expression -> ID dots ID .)
    -               reduce using rule 50 (dot_expression -> ID dots ID .)
    *               reduce using rule 50 (dot_expression -> ID dots ID .)
    /               reduce using rule 50 (dot_expression -> ID dots ID .)
    AND             reduce using rule 50 (dot_expression -> ID dots ID .)
    EQ              reduce using rule 50 (dot_expression -> ID dots ID .)
    =               reduce using rule 50 (dot_expression -> ID dots ID .)
    >               reduce using rule 50 (dot_expression -> ID dots ID .)
    <               reduce using rule 50 (dot_expression -> ID dots ID .)
    GE              reduce using rule 50 (dot_expression -> ID dots ID .)
    LE              reduce using rule 50 (dot_expression -> ID dots ID .)
    NEQS            reduce using rule 50 (dot_expression -> ID dots ID .)
    OR              reduce using rule 50 (dot_expression -> ID dots ID .)
    NAND            reduce using rule 50 (dot_expression -> ID dots ID .)
    $end            reduce using rule 50 (dot_expression -> ID dots ID .)
    THEN            reduce using rule 50 (dot_expression -> ID dots ID .)
    }               reduce using rule 50 (dot_expression -> ID dots ID .)
    ;               reduce using rule 50 (dot_expression -> ID dots ID .)
    ,               reduce using rule 50 (dot_expression -> ID dots ID .)
    LAMBDA          reduce using rule 50 (dot_expression -> ID dots ID .)
    DO              reduce using rule 50 (dot_expression -> ID dots ID .)
    ]               reduce using rule 50 (dot_expression -> ID dots ID .)
    )               reduce using rule 50 (dot_expression -> ID dots ID .)
    IN              reduce using rule 50 (dot_expression -> ID dots ID .)
    ELSE            reduce using rule 50 (dot_expression -> ID dots ID .)


state 83

    (10) expression -> IF expression THEN . expression
    (17) expression -> IF expression THEN . expression ELSE expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 104
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 84

    (11) expression -> IMPORT ID AS . ID

    ID              shift and go to state 105


state 85

    (12) expression -> { sequence } .

    +               reduce using rule 12 (expression -> { sequence } .)
    -               reduce using rule 12 (expression -> { sequence } .)
    *               reduce using rule 12 (expression -> { sequence } .)
    /               reduce using rule 12 (expression -> { sequence } .)
    AND             reduce using rule 12 (expression -> { sequence } .)
    EQ              reduce using rule 12 (expression -> { sequence } .)
    =               reduce using rule 12 (expression -> { sequence } .)
    >               reduce using rule 12 (expression -> { sequence } .)
    <               reduce using rule 12 (expression -> { sequence } .)
    GE              reduce using rule 12 (expression -> { sequence } .)
    LE              reduce using rule 12 (expression -> { sequence } .)
    NEQS            reduce using rule 12 (expression -> { sequence } .)
    OR              reduce using rule 12 (expression -> { sequence } .)
    NAND            reduce using rule 12 (expression -> { sequence } .)
    $end            reduce using rule 12 (expression -> { sequence } .)
    THEN            reduce using rule 12 (expression -> { sequence } .)
    }               reduce using rule 12 (expression -> { sequence } .)
    ;               reduce using rule 12 (expression -> { sequence } .)
    ,               reduce using rule 12 (expression -> { sequence } .)
    LAMBDA          reduce using rule 12 (expression -> { sequence } .)
    DO              reduce using rule 12 (expression -> { sequence } .)
    ]               reduce using rule 12 (expression -> { sequence } .)
    )               reduce using rule 12 (expression -> { sequence } .)
    IN              reduce using rule 12 (expression -> { sequence } .)
    ELSE            reduce using rule 12 (expression -> { sequence } .)


state 86

    (19) sequence -> sequence ; . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 106
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 87

    (39) expression -> dots ID ASSIGN . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    dots                           shift and go to state 10
    expression                     shift and go to state 107
    dot_expression                 shift and go to state 21

state 88

    (31) expression -> LAMBDA_START LAMBDA expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    THEN            reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    }               reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    ;               reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    ,               reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    LAMBDA          reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    DO              reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    ]               reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    )               reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    IN              reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    ELSE            reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! -               [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! *               [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! /               [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! AND             [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! EQ              [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! =               [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! >               [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! <               [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! GE              [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! LE              [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! NEQS            [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! OR              [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! NAND            [ reduce using rule 31 (expression -> LAMBDA_START LAMBDA expression .) ]


state 89

    (7) expression_list -> expression , . expression_list
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 51
    expression_list                shift and go to state 108
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 90

    (32) expression -> LAMBDA_START expression_list LAMBDA . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 109
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 91

    (34) expression -> STRUCT { sequence_struct . }
    (13) sequence_struct -> sequence_struct . ; . ID ASSIGN expression

    }               shift and go to state 110
    ;               shift and go to state 111


state 92

    (14) sequence_struct -> . . ID ASSIGN expression

    ID              shift and go to state 112


state 93

    (36) expression -> LOOP expression DO . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 113
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 94

    (37) expression -> [ expression_list ] .

    +               reduce using rule 37 (expression -> [ expression_list ] .)
    -               reduce using rule 37 (expression -> [ expression_list ] .)
    *               reduce using rule 37 (expression -> [ expression_list ] .)
    /               reduce using rule 37 (expression -> [ expression_list ] .)
    AND             reduce using rule 37 (expression -> [ expression_list ] .)
    EQ              reduce using rule 37 (expression -> [ expression_list ] .)
    =               reduce using rule 37 (expression -> [ expression_list ] .)
    >               reduce using rule 37 (expression -> [ expression_list ] .)
    <               reduce using rule 37 (expression -> [ expression_list ] .)
    GE              reduce using rule 37 (expression -> [ expression_list ] .)
    LE              reduce using rule 37 (expression -> [ expression_list ] .)
    NEQS            reduce using rule 37 (expression -> [ expression_list ] .)
    OR              reduce using rule 37 (expression -> [ expression_list ] .)
    NAND            reduce using rule 37 (expression -> [ expression_list ] .)
    $end            reduce using rule 37 (expression -> [ expression_list ] .)
    THEN            reduce using rule 37 (expression -> [ expression_list ] .)
    }               reduce using rule 37 (expression -> [ expression_list ] .)
    ;               reduce using rule 37 (expression -> [ expression_list ] .)
    ,               reduce using rule 37 (expression -> [ expression_list ] .)
    LAMBDA          reduce using rule 37 (expression -> [ expression_list ] .)
    DO              reduce using rule 37 (expression -> [ expression_list ] .)
    ]               reduce using rule 37 (expression -> [ expression_list ] .)
    )               reduce using rule 37 (expression -> [ expression_list ] .)
    IN              reduce using rule 37 (expression -> [ expression_list ] .)
    ELSE            reduce using rule 37 (expression -> [ expression_list ] .)


state 95

    (38) expression -> EXTEND ID { . sequence_struct }
    (13) sequence_struct -> . sequence_struct ; . ID ASSIGN expression
    (14) sequence_struct -> . . ID ASSIGN expression

    .               shift and go to state 92

    sequence_struct                shift and go to state 114

state 96

    (48) expression -> ( expression_list ) .

    +               reduce using rule 48 (expression -> ( expression_list ) .)
    -               reduce using rule 48 (expression -> ( expression_list ) .)
    *               reduce using rule 48 (expression -> ( expression_list ) .)
    /               reduce using rule 48 (expression -> ( expression_list ) .)
    AND             reduce using rule 48 (expression -> ( expression_list ) .)
    EQ              reduce using rule 48 (expression -> ( expression_list ) .)
    =               reduce using rule 48 (expression -> ( expression_list ) .)
    >               reduce using rule 48 (expression -> ( expression_list ) .)
    <               reduce using rule 48 (expression -> ( expression_list ) .)
    GE              reduce using rule 48 (expression -> ( expression_list ) .)
    LE              reduce using rule 48 (expression -> ( expression_list ) .)
    NEQS            reduce using rule 48 (expression -> ( expression_list ) .)
    OR              reduce using rule 48 (expression -> ( expression_list ) .)
    NAND            reduce using rule 48 (expression -> ( expression_list ) .)
    $end            reduce using rule 48 (expression -> ( expression_list ) .)
    THEN            reduce using rule 48 (expression -> ( expression_list ) .)
    }               reduce using rule 48 (expression -> ( expression_list ) .)
    ;               reduce using rule 48 (expression -> ( expression_list ) .)
    ,               reduce using rule 48 (expression -> ( expression_list ) .)
    LAMBDA          reduce using rule 48 (expression -> ( expression_list ) .)
    DO              reduce using rule 48 (expression -> ( expression_list ) .)
    ]               reduce using rule 48 (expression -> ( expression_list ) .)
    )               reduce using rule 48 (expression -> ( expression_list ) .)
    IN              reduce using rule 48 (expression -> ( expression_list ) .)
    ELSE            reduce using rule 48 (expression -> ( expression_list ) .)


state 97

    (44) expression -> FOR expression ; . expression ; expression DO expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 115
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 98

    (49) expression -> WHILE expression DO . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 116
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 99

    (53) expression -> dot_expression ( ) .

    +               reduce using rule 53 (expression -> dot_expression ( ) .)
    -               reduce using rule 53 (expression -> dot_expression ( ) .)
    *               reduce using rule 53 (expression -> dot_expression ( ) .)
    /               reduce using rule 53 (expression -> dot_expression ( ) .)
    AND             reduce using rule 53 (expression -> dot_expression ( ) .)
    EQ              reduce using rule 53 (expression -> dot_expression ( ) .)
    =               reduce using rule 53 (expression -> dot_expression ( ) .)
    >               reduce using rule 53 (expression -> dot_expression ( ) .)
    <               reduce using rule 53 (expression -> dot_expression ( ) .)
    GE              reduce using rule 53 (expression -> dot_expression ( ) .)
    LE              reduce using rule 53 (expression -> dot_expression ( ) .)
    NEQS            reduce using rule 53 (expression -> dot_expression ( ) .)
    OR              reduce using rule 53 (expression -> dot_expression ( ) .)
    NAND            reduce using rule 53 (expression -> dot_expression ( ) .)
    $end            reduce using rule 53 (expression -> dot_expression ( ) .)
    THEN            reduce using rule 53 (expression -> dot_expression ( ) .)
    }               reduce using rule 53 (expression -> dot_expression ( ) .)
    ;               reduce using rule 53 (expression -> dot_expression ( ) .)
    ,               reduce using rule 53 (expression -> dot_expression ( ) .)
    LAMBDA          reduce using rule 53 (expression -> dot_expression ( ) .)
    DO              reduce using rule 53 (expression -> dot_expression ( ) .)
    ]               reduce using rule 53 (expression -> dot_expression ( ) .)
    )               reduce using rule 53 (expression -> dot_expression ( ) .)
    IN              reduce using rule 53 (expression -> dot_expression ( ) .)
    ELSE            reduce using rule 53 (expression -> dot_expression ( ) .)


state 100

    (54) expression -> dot_expression ( expression_list . )

    )               shift and go to state 117


state 101

    (5) expression -> LOCAL ID ASSIGN expression . IN expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    IN              shift and go to state 118
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 102

    (42) expression -> ID ( expression_list ) .

    +               reduce using rule 42 (expression -> ID ( expression_list ) .)
    -               reduce using rule 42 (expression -> ID ( expression_list ) .)
    *               reduce using rule 42 (expression -> ID ( expression_list ) .)
    /               reduce using rule 42 (expression -> ID ( expression_list ) .)
    AND             reduce using rule 42 (expression -> ID ( expression_list ) .)
    EQ              reduce using rule 42 (expression -> ID ( expression_list ) .)
    =               reduce using rule 42 (expression -> ID ( expression_list ) .)
    >               reduce using rule 42 (expression -> ID ( expression_list ) .)
    <               reduce using rule 42 (expression -> ID ( expression_list ) .)
    GE              reduce using rule 42 (expression -> ID ( expression_list ) .)
    LE              reduce using rule 42 (expression -> ID ( expression_list ) .)
    NEQS            reduce using rule 42 (expression -> ID ( expression_list ) .)
    OR              reduce using rule 42 (expression -> ID ( expression_list ) .)
    NAND            reduce using rule 42 (expression -> ID ( expression_list ) .)
    $end            reduce using rule 42 (expression -> ID ( expression_list ) .)
    THEN            reduce using rule 42 (expression -> ID ( expression_list ) .)
    }               reduce using rule 42 (expression -> ID ( expression_list ) .)
    ;               reduce using rule 42 (expression -> ID ( expression_list ) .)
    ,               reduce using rule 42 (expression -> ID ( expression_list ) .)
    LAMBDA          reduce using rule 42 (expression -> ID ( expression_list ) .)
    DO              reduce using rule 42 (expression -> ID ( expression_list ) .)
    ]               reduce using rule 42 (expression -> ID ( expression_list ) .)
    )               reduce using rule 42 (expression -> ID ( expression_list ) .)
    IN              reduce using rule 42 (expression -> ID ( expression_list ) .)
    ELSE            reduce using rule 42 (expression -> ID ( expression_list ) .)


state 103

    (43) expression -> ID [ NUMBER ] .

    +               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    AND             reduce using rule 43 (expression -> ID [ NUMBER ] .)
    EQ              reduce using rule 43 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    GE              reduce using rule 43 (expression -> ID [ NUMBER ] .)
    LE              reduce using rule 43 (expression -> ID [ NUMBER ] .)
    NEQS            reduce using rule 43 (expression -> ID [ NUMBER ] .)
    OR              reduce using rule 43 (expression -> ID [ NUMBER ] .)
    NAND            reduce using rule 43 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 43 (expression -> ID [ NUMBER ] .)
    THEN            reduce using rule 43 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    LAMBDA          reduce using rule 43 (expression -> ID [ NUMBER ] .)
    DO              reduce using rule 43 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 43 (expression -> ID [ NUMBER ] .)
    IN              reduce using rule 43 (expression -> ID [ NUMBER ] .)
    ELSE            reduce using rule 43 (expression -> ID [ NUMBER ] .)


state 104

    (10) expression -> IF expression THEN expression .
    (17) expression -> IF expression THEN expression . ELSE expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 10 (expression -> IF expression THEN expression .)
    THEN            reduce using rule 10 (expression -> IF expression THEN expression .)
    }               reduce using rule 10 (expression -> IF expression THEN expression .)
    ;               reduce using rule 10 (expression -> IF expression THEN expression .)
    ,               reduce using rule 10 (expression -> IF expression THEN expression .)
    LAMBDA          reduce using rule 10 (expression -> IF expression THEN expression .)
    DO              reduce using rule 10 (expression -> IF expression THEN expression .)
    ]               reduce using rule 10 (expression -> IF expression THEN expression .)
    )               reduce using rule 10 (expression -> IF expression THEN expression .)
    IN              reduce using rule 10 (expression -> IF expression THEN expression .)
    ELSE            shift and go to state 119
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! -               [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! *               [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! /               [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! AND             [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! EQ              [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! =               [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! >               [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! <               [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! GE              [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! LE              [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! NEQS            [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! OR              [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! NAND            [ reduce using rule 10 (expression -> IF expression THEN expression .) ]
  ! ELSE            [ reduce using rule 10 (expression -> IF expression THEN expression .) ]


state 105

    (11) expression -> IMPORT ID AS ID .

    +               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    -               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    *               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    /               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    AND             reduce using rule 11 (expression -> IMPORT ID AS ID .)
    EQ              reduce using rule 11 (expression -> IMPORT ID AS ID .)
    =               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    >               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    <               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    GE              reduce using rule 11 (expression -> IMPORT ID AS ID .)
    LE              reduce using rule 11 (expression -> IMPORT ID AS ID .)
    NEQS            reduce using rule 11 (expression -> IMPORT ID AS ID .)
    OR              reduce using rule 11 (expression -> IMPORT ID AS ID .)
    NAND            reduce using rule 11 (expression -> IMPORT ID AS ID .)
    $end            reduce using rule 11 (expression -> IMPORT ID AS ID .)
    THEN            reduce using rule 11 (expression -> IMPORT ID AS ID .)
    }               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    ;               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    ,               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    LAMBDA          reduce using rule 11 (expression -> IMPORT ID AS ID .)
    DO              reduce using rule 11 (expression -> IMPORT ID AS ID .)
    ]               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    )               reduce using rule 11 (expression -> IMPORT ID AS ID .)
    IN              reduce using rule 11 (expression -> IMPORT ID AS ID .)
    ELSE            reduce using rule 11 (expression -> IMPORT ID AS ID .)


state 106

    (19) sequence -> sequence ; expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    }               reduce using rule 19 (sequence -> sequence ; expression .)
    ;               reduce using rule 19 (sequence -> sequence ; expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 107

    (39) expression -> dots ID ASSIGN expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    THEN            reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    }               reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    ;               reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    ,               reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    LAMBDA          reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    DO              reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    ]               reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    )               reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    IN              reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    ELSE            reduce using rule 39 (expression -> dots ID ASSIGN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! -               [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! *               [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! /               [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! AND             [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! EQ              [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! =               [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! >               [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! <               [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! GE              [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! LE              [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! NEQS            [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! OR              [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]
  ! NAND            [ reduce using rule 39 (expression -> dots ID ASSIGN expression .) ]


state 108

    (7) expression_list -> expression , expression_list .

    LAMBDA          reduce using rule 7 (expression_list -> expression , expression_list .)
    ]               reduce using rule 7 (expression_list -> expression , expression_list .)
    )               reduce using rule 7 (expression_list -> expression , expression_list .)


state 109

    (32) expression -> LAMBDA_START expression_list LAMBDA expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    THEN            reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    }               reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    ;               reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    ,               reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    LAMBDA          reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    DO              reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    ]               reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    )               reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    IN              reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    ELSE            reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! -               [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! *               [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! /               [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! AND             [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! EQ              [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! =               [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! >               [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! <               [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! GE              [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! LE              [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! NEQS            [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! OR              [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! NAND            [ reduce using rule 32 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]


state 110

    (34) expression -> STRUCT { sequence_struct } .

    +               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    -               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    *               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    /               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    AND             reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    EQ              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    =               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    >               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    <               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    GE              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    LE              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    NEQS            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    OR              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    NAND            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    $end            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    THEN            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    }               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    ;               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    ,               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    LAMBDA          reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    DO              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    ]               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    )               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    IN              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    ELSE            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)


state 111

    (13) sequence_struct -> sequence_struct ; . . ID ASSIGN expression

    .               shift and go to state 120


state 112

    (14) sequence_struct -> . ID . ASSIGN expression

    ASSIGN          shift and go to state 121


state 113

    (36) expression -> LOOP expression DO expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 36 (expression -> LOOP expression DO expression .)
    THEN            reduce using rule 36 (expression -> LOOP expression DO expression .)
    }               reduce using rule 36 (expression -> LOOP expression DO expression .)
    ;               reduce using rule 36 (expression -> LOOP expression DO expression .)
    ,               reduce using rule 36 (expression -> LOOP expression DO expression .)
    LAMBDA          reduce using rule 36 (expression -> LOOP expression DO expression .)
    DO              reduce using rule 36 (expression -> LOOP expression DO expression .)
    ]               reduce using rule 36 (expression -> LOOP expression DO expression .)
    )               reduce using rule 36 (expression -> LOOP expression DO expression .)
    IN              reduce using rule 36 (expression -> LOOP expression DO expression .)
    ELSE            reduce using rule 36 (expression -> LOOP expression DO expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! -               [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! *               [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! /               [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! AND             [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! EQ              [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! =               [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! >               [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! <               [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! GE              [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! LE              [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! NEQS            [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! OR              [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]
  ! NAND            [ reduce using rule 36 (expression -> LOOP expression DO expression .) ]


state 114

    (38) expression -> EXTEND ID { sequence_struct . }
    (13) sequence_struct -> sequence_struct . ; . ID ASSIGN expression

    }               shift and go to state 122
    ;               shift and go to state 111


state 115

    (44) expression -> FOR expression ; expression . ; expression DO expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    ;               shift and go to state 123
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 116

    (49) expression -> WHILE expression DO expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 49 (expression -> WHILE expression DO expression .)
    THEN            reduce using rule 49 (expression -> WHILE expression DO expression .)
    }               reduce using rule 49 (expression -> WHILE expression DO expression .)
    ;               reduce using rule 49 (expression -> WHILE expression DO expression .)
    ,               reduce using rule 49 (expression -> WHILE expression DO expression .)
    LAMBDA          reduce using rule 49 (expression -> WHILE expression DO expression .)
    DO              reduce using rule 49 (expression -> WHILE expression DO expression .)
    ]               reduce using rule 49 (expression -> WHILE expression DO expression .)
    )               reduce using rule 49 (expression -> WHILE expression DO expression .)
    IN              reduce using rule 49 (expression -> WHILE expression DO expression .)
    ELSE            reduce using rule 49 (expression -> WHILE expression DO expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! -               [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! *               [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! /               [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! AND             [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! EQ              [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! =               [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! >               [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! <               [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! GE              [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! LE              [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! NEQS            [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! OR              [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]
  ! NAND            [ reduce using rule 49 (expression -> WHILE expression DO expression .) ]


state 117

    (54) expression -> dot_expression ( expression_list ) .

    +               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    -               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    *               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    /               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    AND             reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    EQ              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    =               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    >               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    <               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    GE              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    LE              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    NEQS            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    OR              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    NAND            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    $end            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    THEN            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    }               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    ;               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    ,               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    LAMBDA          reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    DO              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    ]               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    )               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    IN              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    ELSE            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)


state 118

    (5) expression -> LOCAL ID ASSIGN expression IN . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 124
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 119

    (17) expression -> IF expression THEN expression ELSE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 125
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 120

    (13) sequence_struct -> sequence_struct ; . . ID ASSIGN expression

    ID              shift and go to state 126


state 121

    (14) sequence_struct -> . ID ASSIGN . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 127
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 122

    (38) expression -> EXTEND ID { sequence_struct } .

    +               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    -               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    *               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    /               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    AND             reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    EQ              reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    =               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    >               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    <               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    GE              reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    LE              reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    NEQS            reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    OR              reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    NAND            reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    $end            reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    THEN            reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    }               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    ;               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    ,               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    LAMBDA          reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    DO              reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    ]               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    )               reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    IN              reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)
    ELSE            reduce using rule 38 (expression -> EXTEND ID { sequence_struct } .)


state 123

    (44) expression -> FOR expression ; expression ; . expression DO expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 128
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 124

    (5) expression -> LOCAL ID ASSIGN expression IN expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NEQS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
    $end            reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    THEN            reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    }               reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ;               reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ,               reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    LAMBDA          reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    DO              reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ]               reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    )               reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    IN              reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ELSE            reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! -               [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! *               [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! /               [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! AND             [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! EQ              [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! =               [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! >               [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! <               [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! GE              [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! LE              [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! NEQS            [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! OR              [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! NAND            [ reduce using rule 5 (expression -> LOCAL ID ASSIGN expression IN expression .) ]


state 125

    (17) expression -> IF expression THEN expression ELSE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    }               reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    ;               reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    ,               reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    LAMBDA          reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    DO              reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    ]               reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    )               reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    IN              reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! -               [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! *               [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! /               [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! AND             [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! EQ              [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! =               [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! >               [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! <               [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! GE              [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LE              [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! NEQS            [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! OR              [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]
  ! NAND            [ reduce using rule 17 (expression -> IF expression THEN expression ELSE expression .) ]


state 126

    (13) sequence_struct -> sequence_struct ; . ID . ASSIGN expression

    ASSIGN          shift and go to state 129


state 127

    (14) sequence_struct -> . ID ASSIGN expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    }               reduce using rule 14 (sequence_struct -> . ID ASSIGN expression .)
    ;               reduce using rule 14 (sequence_struct -> . ID ASSIGN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 128

    (44) expression -> FOR expression ; expression ; expression . DO expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    DO              shift and go to state 130
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 129

    (13) sequence_struct -> sequence_struct ; . ID ASSIGN . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 131
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 130

    (44) expression -> FOR expression ; expression ; expression DO . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . LOCAL ID ASSIGN expression IN expression
    (6) expression -> . FLOAT
    (9) expression -> . ID
    (10) expression -> . IF expression THEN expression
    (11) expression -> . IMPORT ID AS ID
    (12) expression -> . { sequence }
    (15) expression -> . STRING
    (16) expression -> . dots ID
    (17) expression -> . IF expression THEN expression ELSE expression
    (18) expression -> . IMPORT ID
    (21) expression -> . expression AND expression
    (22) expression -> . expression EQ expression
    (23) expression -> . expression = expression
    (24) expression -> . expression > expression
    (25) expression -> . expression < expression
    (26) expression -> . expression GE expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression NEQS expression
    (29) expression -> . expression OR expression
    (30) expression -> . expression NAND expression
    (31) expression -> . LAMBDA_START LAMBDA expression
    (32) expression -> . LAMBDA_START expression_list LAMBDA expression
    (33) expression -> . CHAR
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . ID ASSIGN expression
    (36) expression -> . LOOP expression DO expression
    (37) expression -> . [ expression_list ]
    (38) expression -> . EXTEND ID { sequence_struct }
    (39) expression -> . dots ID ASSIGN expression
    (40) expression -> . - expression
    (41) expression -> . ID ( )
    (42) expression -> . ID ( expression_list )
    (43) expression -> . ID [ NUMBER ]
    (44) expression -> . FOR expression ; expression ; expression DO expression
    (47) expression -> . NUMBER
    (48) expression -> . ( expression_list )
    (49) expression -> . WHILE expression DO expression
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (55) expression -> . NOT expression
    (56) expression -> . BOOL
    (45) dots -> . .
    (46) dots -> . . dots
    (50) dot_expression -> . ID dots ID
    (51) dot_expression -> . dots ID

    LOCAL           shift and go to state 3
    FLOAT           shift and go to state 5
    ID              shift and go to state 4
    IF              shift and go to state 6
    IMPORT          shift and go to state 7
    {               shift and go to state 8
    STRING          shift and go to state 9
    LAMBDA_START    shift and go to state 11
    CHAR            shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    [               shift and go to state 15
    EXTEND          shift and go to state 16
    -               shift and go to state 2
    FOR             shift and go to state 19
    NUMBER          shift and go to state 18
    (               shift and go to state 17
    WHILE           shift and go to state 20
    NOT             shift and go to state 22
    BOOL            shift and go to state 23
    .               shift and go to state 24

    expression                     shift and go to state 132
    dots                           shift and go to state 10
    dot_expression                 shift and go to state 21

state 131

    (13) sequence_struct -> sequence_struct ; . ID ASSIGN expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    }               reduce using rule 13 (sequence_struct -> sequence_struct ; . ID ASSIGN expression .)
    ;               reduce using rule 13 (sequence_struct -> sequence_struct ; . ID ASSIGN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 132

    (44) expression -> FOR expression ; expression ; expression DO expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (21) expression -> expression . AND expression
    (22) expression -> expression . EQ expression
    (23) expression -> expression . = expression
    (24) expression -> expression . > expression
    (25) expression -> expression . < expression
    (26) expression -> expression . GE expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . NEQS expression
    (29) expression -> expression . OR expression
    (30) expression -> expression . NAND expression

    $end            reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    THEN            reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    }               reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    ;               reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    ,               reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    LAMBDA          reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    DO              reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    ]               reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    )               reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    IN              reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    ELSE            reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! -               [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! *               [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! /               [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! AND             [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! =               [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! >               [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! <               [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! GE              [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! LE              [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! NEQS            [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! OR              [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! NAND            [ reduce using rule 44 (expression -> FOR expression ; expression ; expression DO expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 124 resolved as shift
WARNING: shift/reduce conflict for - in state 124 resolved as shift
WARNING: shift/reduce conflict for * in state 124 resolved as shift
WARNING: shift/reduce conflict for / in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for = in state 124 resolved as shift
WARNING: shift/reduce conflict for > in state 124 resolved as shift
WARNING: shift/reduce conflict for < in state 124 resolved as shift
WARNING: shift/reduce conflict for GE in state 124 resolved as shift
WARNING: shift/reduce conflict for LE in state 124 resolved as shift
WARNING: shift/reduce conflict for NEQS in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for NAND in state 124 resolved as shift
WARNING: reduce/reduce conflict in state 49 resolved using rule (expression -> dots ID)
WARNING: rejected rule (dot_expression -> dots ID) in state 49
