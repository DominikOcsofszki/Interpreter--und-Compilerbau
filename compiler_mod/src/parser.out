Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    array
    list

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> ID lambda expression
Rule 6     expression -> lambda expression
Rule 7     expression -> { sequence }
Rule 8     expression -> expression and expression
Rule 9     expression -> expression eq expression
Rule 10    expression -> expression = expression
Rule 11    expression -> expression > expression
Rule 12    expression -> expression < expression
Rule 13    expression -> expression ge expression
Rule 14    expression -> expression le expression
Rule 15    expression -> expression neqs expression
Rule 16    expression -> expression or expression
Rule 17    expression -> expression nand expression
Rule 18    expression -> string
Rule 19    expression -> letrec ID assign expression in expression
Rule 20    expression -> ID assign expression
Rule 21    expression -> - expression
Rule 22    expression -> import ID
Rule 23    sequence -> sequence ; expression
Rule 24    sequence -> expression
Rule 25    expression -> char
Rule 26    expression -> if expression then expression
Rule 27    expression -> expression + expression
Rule 28    expression -> expression - expression
Rule 29    expression -> expression * expression
Rule 30    expression -> expression / expression
Rule 31    id_list -> expression , id_list
Rule 32    id_list -> expression
Rule 33    expression -> [ id_list ]
Rule 34    expression -> if expression then expression else expression
Rule 35    expression -> ID [ NUMBER ]
Rule 36    expression -> not expression
Rule 37    expression -> loop expression do expression
Rule 38    expression -> ( id_list )
Rule 39    expression -> NUMBER
Rule 40    expression -> ( id_list ) lambda expression
Rule 41    expression -> BOOL
Rule 42    expression -> ( expression )
Rule 43    expression -> ID ( )
Rule 44    expression -> ID ( id_list )
Rule 45    expression -> for expression ; expression ; expression do expression
Rule 46    expression -> while expression do expression

Terminals, with rules where they appear

(                    : 38 40 42 43 44
)                    : 38 40 42 43 44
*                    : 29
+                    : 27
,                    : 31
-                    : 21 28
/                    : 30
;                    : 23 45 45
<                    : 12
=                    : 10
>                    : 11
BOOL                 : 41
ID                   : 2 3 4 4 5 19 20 22 35 43 44
NUMBER               : 35 39
[                    : 33 35
]                    : 33 35
and                  : 8
array                : 
as                   : 4
assign               : 2 19 20
char                 : 25
do                   : 37 45 46
else                 : 34
eq                   : 9
error                : 
float                : 1
for                  : 45
ge                   : 13
if                   : 26 34
import               : 4 22
in                   : 2 19
lambda               : 5 6 40
le                   : 14
letrec               : 19
list                 : 
local                : 2
loop                 : 37
nand                 : 17
neqs                 : 15
not                  : 36
or                   : 16
string               : 18
then                 : 26 34
while                : 46
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

expression           : 2 2 5 6 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 19 19 20 21 23 24 26 26 27 27 28 28 29 29 30 30 31 32 34 34 34 36 37 37 40 42 45 45 45 45 46 46 0
id_list              : 31 33 38 40 44
sequence             : 7 23

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    ,               reduce using rule 1 (expression -> float .)
    ]               reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 35


state 4

    (3) expression -> ID .
    (5) expression -> ID . lambda expression
    (20) expression -> ID . assign expression
    (35) expression -> ID . [ NUMBER ]
    (43) expression -> ID . ( )
    (44) expression -> ID . ( id_list )

    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    ,               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    lambda          shift and go to state 36
    assign          shift and go to state 37
    [               shift and go to state 38
    (               shift and go to state 39


state 5

    (4) expression -> import . ID as ID
    (22) expression -> import . ID

    ID              shift and go to state 40


state 6

    (6) expression -> lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 41

state 7

    (7) expression -> { . sequence }
    (23) sequence -> . sequence ; expression
    (24) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    sequence                       shift and go to state 42
    expression                     shift and go to state 43

state 8

    (18) expression -> string .

    and             reduce using rule 18 (expression -> string .)
    eq              reduce using rule 18 (expression -> string .)
    =               reduce using rule 18 (expression -> string .)
    >               reduce using rule 18 (expression -> string .)
    <               reduce using rule 18 (expression -> string .)
    ge              reduce using rule 18 (expression -> string .)
    le              reduce using rule 18 (expression -> string .)
    neqs            reduce using rule 18 (expression -> string .)
    or              reduce using rule 18 (expression -> string .)
    nand            reduce using rule 18 (expression -> string .)
    +               reduce using rule 18 (expression -> string .)
    -               reduce using rule 18 (expression -> string .)
    *               reduce using rule 18 (expression -> string .)
    /               reduce using rule 18 (expression -> string .)
    $end            reduce using rule 18 (expression -> string .)
    }               reduce using rule 18 (expression -> string .)
    ;               reduce using rule 18 (expression -> string .)
    then            reduce using rule 18 (expression -> string .)
    ,               reduce using rule 18 (expression -> string .)
    ]               reduce using rule 18 (expression -> string .)
    do              reduce using rule 18 (expression -> string .)
    )               reduce using rule 18 (expression -> string .)
    in              reduce using rule 18 (expression -> string .)
    else            reduce using rule 18 (expression -> string .)


state 9

    (19) expression -> letrec . ID assign expression in expression

    ID              shift and go to state 44


state 10

    (21) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 45

state 11

    (25) expression -> char .

    and             reduce using rule 25 (expression -> char .)
    eq              reduce using rule 25 (expression -> char .)
    =               reduce using rule 25 (expression -> char .)
    >               reduce using rule 25 (expression -> char .)
    <               reduce using rule 25 (expression -> char .)
    ge              reduce using rule 25 (expression -> char .)
    le              reduce using rule 25 (expression -> char .)
    neqs            reduce using rule 25 (expression -> char .)
    or              reduce using rule 25 (expression -> char .)
    nand            reduce using rule 25 (expression -> char .)
    +               reduce using rule 25 (expression -> char .)
    -               reduce using rule 25 (expression -> char .)
    *               reduce using rule 25 (expression -> char .)
    /               reduce using rule 25 (expression -> char .)
    $end            reduce using rule 25 (expression -> char .)
    }               reduce using rule 25 (expression -> char .)
    ;               reduce using rule 25 (expression -> char .)
    then            reduce using rule 25 (expression -> char .)
    ,               reduce using rule 25 (expression -> char .)
    ]               reduce using rule 25 (expression -> char .)
    do              reduce using rule 25 (expression -> char .)
    )               reduce using rule 25 (expression -> char .)
    in              reduce using rule 25 (expression -> char .)
    else            reduce using rule 25 (expression -> char .)


state 12

    (26) expression -> if . expression then expression
    (34) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 46

state 13

    (33) expression -> [ . id_list ]
    (31) id_list -> . expression , id_list
    (32) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    id_list                        shift and go to state 47
    expression                     shift and go to state 48

state 14

    (39) expression -> NUMBER .

    and             reduce using rule 39 (expression -> NUMBER .)
    eq              reduce using rule 39 (expression -> NUMBER .)
    =               reduce using rule 39 (expression -> NUMBER .)
    >               reduce using rule 39 (expression -> NUMBER .)
    <               reduce using rule 39 (expression -> NUMBER .)
    ge              reduce using rule 39 (expression -> NUMBER .)
    le              reduce using rule 39 (expression -> NUMBER .)
    neqs            reduce using rule 39 (expression -> NUMBER .)
    or              reduce using rule 39 (expression -> NUMBER .)
    nand            reduce using rule 39 (expression -> NUMBER .)
    +               reduce using rule 39 (expression -> NUMBER .)
    -               reduce using rule 39 (expression -> NUMBER .)
    *               reduce using rule 39 (expression -> NUMBER .)
    /               reduce using rule 39 (expression -> NUMBER .)
    $end            reduce using rule 39 (expression -> NUMBER .)
    }               reduce using rule 39 (expression -> NUMBER .)
    ;               reduce using rule 39 (expression -> NUMBER .)
    then            reduce using rule 39 (expression -> NUMBER .)
    ,               reduce using rule 39 (expression -> NUMBER .)
    ]               reduce using rule 39 (expression -> NUMBER .)
    do              reduce using rule 39 (expression -> NUMBER .)
    )               reduce using rule 39 (expression -> NUMBER .)
    in              reduce using rule 39 (expression -> NUMBER .)
    else            reduce using rule 39 (expression -> NUMBER .)


state 15

    (36) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 49

state 16

    (37) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 50

state 17

    (38) expression -> ( . id_list )
    (40) expression -> ( . id_list ) lambda expression
    (42) expression -> ( . expression )
    (31) id_list -> . expression , id_list
    (32) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    id_list                        shift and go to state 51
    expression                     shift and go to state 52

state 18

    (41) expression -> BOOL .

    and             reduce using rule 41 (expression -> BOOL .)
    eq              reduce using rule 41 (expression -> BOOL .)
    =               reduce using rule 41 (expression -> BOOL .)
    >               reduce using rule 41 (expression -> BOOL .)
    <               reduce using rule 41 (expression -> BOOL .)
    ge              reduce using rule 41 (expression -> BOOL .)
    le              reduce using rule 41 (expression -> BOOL .)
    neqs            reduce using rule 41 (expression -> BOOL .)
    or              reduce using rule 41 (expression -> BOOL .)
    nand            reduce using rule 41 (expression -> BOOL .)
    +               reduce using rule 41 (expression -> BOOL .)
    -               reduce using rule 41 (expression -> BOOL .)
    *               reduce using rule 41 (expression -> BOOL .)
    /               reduce using rule 41 (expression -> BOOL .)
    $end            reduce using rule 41 (expression -> BOOL .)
    }               reduce using rule 41 (expression -> BOOL .)
    ;               reduce using rule 41 (expression -> BOOL .)
    then            reduce using rule 41 (expression -> BOOL .)
    ,               reduce using rule 41 (expression -> BOOL .)
    ]               reduce using rule 41 (expression -> BOOL .)
    do              reduce using rule 41 (expression -> BOOL .)
    )               reduce using rule 41 (expression -> BOOL .)
    in              reduce using rule 41 (expression -> BOOL .)
    else            reduce using rule 41 (expression -> BOOL .)


state 19

    (45) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 53

state 20

    (46) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 54

state 21

    (8) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 55

state 22

    (9) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 56

state 23

    (10) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 57

state 24

    (11) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 58

state 25

    (12) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 59

state 26

    (13) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 60

state 27

    (14) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 61

state 28

    (15) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 62

state 29

    (16) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 63

state 30

    (17) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 64

state 31

    (27) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 65

state 32

    (28) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 66

state 33

    (29) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 67

state 34

    (30) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 68

state 35

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 69


state 36

    (5) expression -> ID lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 70

state 37

    (20) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 71

state 38

    (35) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 72


state 39

    (43) expression -> ID ( . )
    (44) expression -> ID ( . id_list )
    (31) id_list -> . expression , id_list
    (32) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    )               shift and go to state 73
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    id_list                        shift and go to state 74
    expression                     shift and go to state 48

state 40

    (4) expression -> import ID . as ID
    (22) expression -> import ID .

    as              shift and go to state 75
    and             reduce using rule 22 (expression -> import ID .)
    eq              reduce using rule 22 (expression -> import ID .)
    =               reduce using rule 22 (expression -> import ID .)
    >               reduce using rule 22 (expression -> import ID .)
    <               reduce using rule 22 (expression -> import ID .)
    ge              reduce using rule 22 (expression -> import ID .)
    le              reduce using rule 22 (expression -> import ID .)
    neqs            reduce using rule 22 (expression -> import ID .)
    or              reduce using rule 22 (expression -> import ID .)
    nand            reduce using rule 22 (expression -> import ID .)
    +               reduce using rule 22 (expression -> import ID .)
    -               reduce using rule 22 (expression -> import ID .)
    *               reduce using rule 22 (expression -> import ID .)
    /               reduce using rule 22 (expression -> import ID .)
    $end            reduce using rule 22 (expression -> import ID .)
    }               reduce using rule 22 (expression -> import ID .)
    ;               reduce using rule 22 (expression -> import ID .)
    then            reduce using rule 22 (expression -> import ID .)
    ,               reduce using rule 22 (expression -> import ID .)
    ]               reduce using rule 22 (expression -> import ID .)
    do              reduce using rule 22 (expression -> import ID .)
    )               reduce using rule 22 (expression -> import ID .)
    in              reduce using rule 22 (expression -> import ID .)
    else            reduce using rule 22 (expression -> import ID .)


state 41

    (6) expression -> lambda expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 6 (expression -> lambda expression .)
    }               reduce using rule 6 (expression -> lambda expression .)
    ;               reduce using rule 6 (expression -> lambda expression .)
    then            reduce using rule 6 (expression -> lambda expression .)
    ,               reduce using rule 6 (expression -> lambda expression .)
    ]               reduce using rule 6 (expression -> lambda expression .)
    do              reduce using rule 6 (expression -> lambda expression .)
    )               reduce using rule 6 (expression -> lambda expression .)
    in              reduce using rule 6 (expression -> lambda expression .)
    else            reduce using rule 6 (expression -> lambda expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 6 (expression -> lambda expression .) ]
  ! eq              [ reduce using rule 6 (expression -> lambda expression .) ]
  ! =               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! >               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! <               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! ge              [ reduce using rule 6 (expression -> lambda expression .) ]
  ! le              [ reduce using rule 6 (expression -> lambda expression .) ]
  ! neqs            [ reduce using rule 6 (expression -> lambda expression .) ]
  ! or              [ reduce using rule 6 (expression -> lambda expression .) ]
  ! nand            [ reduce using rule 6 (expression -> lambda expression .) ]
  ! +               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! -               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! *               [ reduce using rule 6 (expression -> lambda expression .) ]
  ! /               [ reduce using rule 6 (expression -> lambda expression .) ]


state 42

    (7) expression -> { sequence . }
    (23) sequence -> sequence . ; expression

    }               shift and go to state 76
    ;               shift and go to state 77


state 43

    (24) sequence -> expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    }               reduce using rule 24 (sequence -> expression .)
    ;               reduce using rule 24 (sequence -> expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 44

    (19) expression -> letrec ID . assign expression in expression

    assign          shift and go to state 78


state 45

    (21) expression -> - expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 21 (expression -> - expression .)
    eq              reduce using rule 21 (expression -> - expression .)
    =               reduce using rule 21 (expression -> - expression .)
    >               reduce using rule 21 (expression -> - expression .)
    <               reduce using rule 21 (expression -> - expression .)
    ge              reduce using rule 21 (expression -> - expression .)
    le              reduce using rule 21 (expression -> - expression .)
    neqs            reduce using rule 21 (expression -> - expression .)
    or              reduce using rule 21 (expression -> - expression .)
    nand            reduce using rule 21 (expression -> - expression .)
    +               reduce using rule 21 (expression -> - expression .)
    -               reduce using rule 21 (expression -> - expression .)
    *               reduce using rule 21 (expression -> - expression .)
    /               reduce using rule 21 (expression -> - expression .)
    $end            reduce using rule 21 (expression -> - expression .)
    }               reduce using rule 21 (expression -> - expression .)
    ;               reduce using rule 21 (expression -> - expression .)
    then            reduce using rule 21 (expression -> - expression .)
    ,               reduce using rule 21 (expression -> - expression .)
    ]               reduce using rule 21 (expression -> - expression .)
    do              reduce using rule 21 (expression -> - expression .)
    )               reduce using rule 21 (expression -> - expression .)
    in              reduce using rule 21 (expression -> - expression .)
    else            reduce using rule 21 (expression -> - expression .)

  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]


state 46

    (26) expression -> if expression . then expression
    (34) expression -> if expression . then expression else expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    then            shift and go to state 79
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 47

    (33) expression -> [ id_list . ]

    ]               shift and go to state 80


state 48

    (31) id_list -> expression . , id_list
    (32) id_list -> expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ,               shift and go to state 81
    ]               reduce using rule 32 (id_list -> expression .)
    )               reduce using rule 32 (id_list -> expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 49

    (36) expression -> not expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 36 (expression -> not expression .)
    eq              reduce using rule 36 (expression -> not expression .)
    =               reduce using rule 36 (expression -> not expression .)
    >               reduce using rule 36 (expression -> not expression .)
    <               reduce using rule 36 (expression -> not expression .)
    ge              reduce using rule 36 (expression -> not expression .)
    le              reduce using rule 36 (expression -> not expression .)
    neqs            reduce using rule 36 (expression -> not expression .)
    or              reduce using rule 36 (expression -> not expression .)
    nand            reduce using rule 36 (expression -> not expression .)
    +               reduce using rule 36 (expression -> not expression .)
    -               reduce using rule 36 (expression -> not expression .)
    *               reduce using rule 36 (expression -> not expression .)
    /               reduce using rule 36 (expression -> not expression .)
    $end            reduce using rule 36 (expression -> not expression .)
    }               reduce using rule 36 (expression -> not expression .)
    ;               reduce using rule 36 (expression -> not expression .)
    then            reduce using rule 36 (expression -> not expression .)
    ,               reduce using rule 36 (expression -> not expression .)
    ]               reduce using rule 36 (expression -> not expression .)
    do              reduce using rule 36 (expression -> not expression .)
    )               reduce using rule 36 (expression -> not expression .)
    in              reduce using rule 36 (expression -> not expression .)
    else            reduce using rule 36 (expression -> not expression .)

  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]


state 50

    (37) expression -> loop expression . do expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 82
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 51

    (38) expression -> ( id_list . )
    (40) expression -> ( id_list . ) lambda expression

    )               shift and go to state 83


state 52

    (42) expression -> ( expression . )
    (31) id_list -> expression . , id_list
    (32) id_list -> expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 84
    ,               shift and go to state 81
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! )               [ reduce using rule 32 (id_list -> expression .) ]


state 53

    (45) expression -> for expression . ; expression ; expression do expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ;               shift and go to state 85
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 54

    (46) expression -> while expression . do expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 86
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 55

    (8) expression -> expression and expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 8 (expression -> expression and expression .)
    or              reduce using rule 8 (expression -> expression and expression .)
    nand            reduce using rule 8 (expression -> expression and expression .)
    $end            reduce using rule 8 (expression -> expression and expression .)
    }               reduce using rule 8 (expression -> expression and expression .)
    ;               reduce using rule 8 (expression -> expression and expression .)
    then            reduce using rule 8 (expression -> expression and expression .)
    ,               reduce using rule 8 (expression -> expression and expression .)
    ]               reduce using rule 8 (expression -> expression and expression .)
    do              reduce using rule 8 (expression -> expression and expression .)
    )               reduce using rule 8 (expression -> expression and expression .)
    in              reduce using rule 8 (expression -> expression and expression .)
    else            reduce using rule 8 (expression -> expression and expression .)
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! eq              [ reduce using rule 8 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 8 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 8 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 8 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 8 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 8 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 8 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 8 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 8 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 8 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 21 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 56

    (9) expression -> expression eq expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression eq expression .)
    eq              reduce using rule 9 (expression -> expression eq expression .)
    =               reduce using rule 9 (expression -> expression eq expression .)
    neqs            reduce using rule 9 (expression -> expression eq expression .)
    or              reduce using rule 9 (expression -> expression eq expression .)
    nand            reduce using rule 9 (expression -> expression eq expression .)
    $end            reduce using rule 9 (expression -> expression eq expression .)
    }               reduce using rule 9 (expression -> expression eq expression .)
    ;               reduce using rule 9 (expression -> expression eq expression .)
    then            reduce using rule 9 (expression -> expression eq expression .)
    ,               reduce using rule 9 (expression -> expression eq expression .)
    ]               reduce using rule 9 (expression -> expression eq expression .)
    do              reduce using rule 9 (expression -> expression eq expression .)
    )               reduce using rule 9 (expression -> expression eq expression .)
    in              reduce using rule 9 (expression -> expression eq expression .)
    else            reduce using rule 9 (expression -> expression eq expression .)
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! >               [ reduce using rule 9 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 9 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 9 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 9 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 57

    (10) expression -> expression = expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression = expression .)
    eq              reduce using rule 10 (expression -> expression = expression .)
    =               reduce using rule 10 (expression -> expression = expression .)
    neqs            reduce using rule 10 (expression -> expression = expression .)
    or              reduce using rule 10 (expression -> expression = expression .)
    nand            reduce using rule 10 (expression -> expression = expression .)
    $end            reduce using rule 10 (expression -> expression = expression .)
    }               reduce using rule 10 (expression -> expression = expression .)
    ;               reduce using rule 10 (expression -> expression = expression .)
    then            reduce using rule 10 (expression -> expression = expression .)
    ,               reduce using rule 10 (expression -> expression = expression .)
    ]               reduce using rule 10 (expression -> expression = expression .)
    do              reduce using rule 10 (expression -> expression = expression .)
    )               reduce using rule 10 (expression -> expression = expression .)
    in              reduce using rule 10 (expression -> expression = expression .)
    else            reduce using rule 10 (expression -> expression = expression .)
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! >               [ reduce using rule 10 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 10 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 10 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 10 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 10 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 58

    (11) expression -> expression > expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression > expression .)
    eq              reduce using rule 11 (expression -> expression > expression .)
    =               reduce using rule 11 (expression -> expression > expression .)
    >               reduce using rule 11 (expression -> expression > expression .)
    <               reduce using rule 11 (expression -> expression > expression .)
    ge              reduce using rule 11 (expression -> expression > expression .)
    le              reduce using rule 11 (expression -> expression > expression .)
    neqs            reduce using rule 11 (expression -> expression > expression .)
    or              reduce using rule 11 (expression -> expression > expression .)
    nand            reduce using rule 11 (expression -> expression > expression .)
    $end            reduce using rule 11 (expression -> expression > expression .)
    }               reduce using rule 11 (expression -> expression > expression .)
    ;               reduce using rule 11 (expression -> expression > expression .)
    then            reduce using rule 11 (expression -> expression > expression .)
    ,               reduce using rule 11 (expression -> expression > expression .)
    ]               reduce using rule 11 (expression -> expression > expression .)
    do              reduce using rule 11 (expression -> expression > expression .)
    )               reduce using rule 11 (expression -> expression > expression .)
    in              reduce using rule 11 (expression -> expression > expression .)
    else            reduce using rule 11 (expression -> expression > expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! +               [ reduce using rule 11 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 59

    (12) expression -> expression < expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression < expression .)
    eq              reduce using rule 12 (expression -> expression < expression .)
    =               reduce using rule 12 (expression -> expression < expression .)
    >               reduce using rule 12 (expression -> expression < expression .)
    <               reduce using rule 12 (expression -> expression < expression .)
    ge              reduce using rule 12 (expression -> expression < expression .)
    le              reduce using rule 12 (expression -> expression < expression .)
    neqs            reduce using rule 12 (expression -> expression < expression .)
    or              reduce using rule 12 (expression -> expression < expression .)
    nand            reduce using rule 12 (expression -> expression < expression .)
    $end            reduce using rule 12 (expression -> expression < expression .)
    }               reduce using rule 12 (expression -> expression < expression .)
    ;               reduce using rule 12 (expression -> expression < expression .)
    then            reduce using rule 12 (expression -> expression < expression .)
    ,               reduce using rule 12 (expression -> expression < expression .)
    ]               reduce using rule 12 (expression -> expression < expression .)
    do              reduce using rule 12 (expression -> expression < expression .)
    )               reduce using rule 12 (expression -> expression < expression .)
    in              reduce using rule 12 (expression -> expression < expression .)
    else            reduce using rule 12 (expression -> expression < expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! +               [ reduce using rule 12 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 60

    (13) expression -> expression ge expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression ge expression .)
    eq              reduce using rule 13 (expression -> expression ge expression .)
    =               reduce using rule 13 (expression -> expression ge expression .)
    >               reduce using rule 13 (expression -> expression ge expression .)
    <               reduce using rule 13 (expression -> expression ge expression .)
    ge              reduce using rule 13 (expression -> expression ge expression .)
    le              reduce using rule 13 (expression -> expression ge expression .)
    neqs            reduce using rule 13 (expression -> expression ge expression .)
    or              reduce using rule 13 (expression -> expression ge expression .)
    nand            reduce using rule 13 (expression -> expression ge expression .)
    $end            reduce using rule 13 (expression -> expression ge expression .)
    }               reduce using rule 13 (expression -> expression ge expression .)
    ;               reduce using rule 13 (expression -> expression ge expression .)
    then            reduce using rule 13 (expression -> expression ge expression .)
    ,               reduce using rule 13 (expression -> expression ge expression .)
    ]               reduce using rule 13 (expression -> expression ge expression .)
    do              reduce using rule 13 (expression -> expression ge expression .)
    )               reduce using rule 13 (expression -> expression ge expression .)
    in              reduce using rule 13 (expression -> expression ge expression .)
    else            reduce using rule 13 (expression -> expression ge expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! +               [ reduce using rule 13 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 61

    (14) expression -> expression le expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression le expression .)
    eq              reduce using rule 14 (expression -> expression le expression .)
    =               reduce using rule 14 (expression -> expression le expression .)
    >               reduce using rule 14 (expression -> expression le expression .)
    <               reduce using rule 14 (expression -> expression le expression .)
    ge              reduce using rule 14 (expression -> expression le expression .)
    le              reduce using rule 14 (expression -> expression le expression .)
    neqs            reduce using rule 14 (expression -> expression le expression .)
    or              reduce using rule 14 (expression -> expression le expression .)
    nand            reduce using rule 14 (expression -> expression le expression .)
    $end            reduce using rule 14 (expression -> expression le expression .)
    }               reduce using rule 14 (expression -> expression le expression .)
    ;               reduce using rule 14 (expression -> expression le expression .)
    then            reduce using rule 14 (expression -> expression le expression .)
    ,               reduce using rule 14 (expression -> expression le expression .)
    ]               reduce using rule 14 (expression -> expression le expression .)
    do              reduce using rule 14 (expression -> expression le expression .)
    )               reduce using rule 14 (expression -> expression le expression .)
    in              reduce using rule 14 (expression -> expression le expression .)
    else            reduce using rule 14 (expression -> expression le expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! +               [ reduce using rule 14 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 62

    (15) expression -> expression neqs expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 15 (expression -> expression neqs expression .)
    eq              reduce using rule 15 (expression -> expression neqs expression .)
    =               reduce using rule 15 (expression -> expression neqs expression .)
    neqs            reduce using rule 15 (expression -> expression neqs expression .)
    or              reduce using rule 15 (expression -> expression neqs expression .)
    nand            reduce using rule 15 (expression -> expression neqs expression .)
    $end            reduce using rule 15 (expression -> expression neqs expression .)
    }               reduce using rule 15 (expression -> expression neqs expression .)
    ;               reduce using rule 15 (expression -> expression neqs expression .)
    then            reduce using rule 15 (expression -> expression neqs expression .)
    ,               reduce using rule 15 (expression -> expression neqs expression .)
    ]               reduce using rule 15 (expression -> expression neqs expression .)
    do              reduce using rule 15 (expression -> expression neqs expression .)
    )               reduce using rule 15 (expression -> expression neqs expression .)
    in              reduce using rule 15 (expression -> expression neqs expression .)
    else            reduce using rule 15 (expression -> expression neqs expression .)
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! >               [ reduce using rule 15 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 15 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 15 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 15 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 15 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 63

    (16) expression -> expression or expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    or              reduce using rule 16 (expression -> expression or expression .)
    $end            reduce using rule 16 (expression -> expression or expression .)
    }               reduce using rule 16 (expression -> expression or expression .)
    ;               reduce using rule 16 (expression -> expression or expression .)
    then            reduce using rule 16 (expression -> expression or expression .)
    ,               reduce using rule 16 (expression -> expression or expression .)
    ]               reduce using rule 16 (expression -> expression or expression .)
    do              reduce using rule 16 (expression -> expression or expression .)
    )               reduce using rule 16 (expression -> expression or expression .)
    in              reduce using rule 16 (expression -> expression or expression .)
    else            reduce using rule 16 (expression -> expression or expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 16 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 16 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 16 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 16 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 16 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 16 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 16 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 16 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 16 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 29 ]


state 64

    (17) expression -> expression nand expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 17 (expression -> expression nand expression .)
    or              reduce using rule 17 (expression -> expression nand expression .)
    nand            reduce using rule 17 (expression -> expression nand expression .)
    $end            reduce using rule 17 (expression -> expression nand expression .)
    }               reduce using rule 17 (expression -> expression nand expression .)
    ;               reduce using rule 17 (expression -> expression nand expression .)
    then            reduce using rule 17 (expression -> expression nand expression .)
    ,               reduce using rule 17 (expression -> expression nand expression .)
    ]               reduce using rule 17 (expression -> expression nand expression .)
    do              reduce using rule 17 (expression -> expression nand expression .)
    )               reduce using rule 17 (expression -> expression nand expression .)
    in              reduce using rule 17 (expression -> expression nand expression .)
    else            reduce using rule 17 (expression -> expression nand expression .)
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! eq              [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 21 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 65

    (27) expression -> expression + expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 27 (expression -> expression + expression .)
    eq              reduce using rule 27 (expression -> expression + expression .)
    =               reduce using rule 27 (expression -> expression + expression .)
    >               reduce using rule 27 (expression -> expression + expression .)
    <               reduce using rule 27 (expression -> expression + expression .)
    ge              reduce using rule 27 (expression -> expression + expression .)
    le              reduce using rule 27 (expression -> expression + expression .)
    neqs            reduce using rule 27 (expression -> expression + expression .)
    or              reduce using rule 27 (expression -> expression + expression .)
    nand            reduce using rule 27 (expression -> expression + expression .)
    +               reduce using rule 27 (expression -> expression + expression .)
    -               reduce using rule 27 (expression -> expression + expression .)
    $end            reduce using rule 27 (expression -> expression + expression .)
    }               reduce using rule 27 (expression -> expression + expression .)
    ;               reduce using rule 27 (expression -> expression + expression .)
    then            reduce using rule 27 (expression -> expression + expression .)
    ,               reduce using rule 27 (expression -> expression + expression .)
    ]               reduce using rule 27 (expression -> expression + expression .)
    do              reduce using rule 27 (expression -> expression + expression .)
    )               reduce using rule 27 (expression -> expression + expression .)
    in              reduce using rule 27 (expression -> expression + expression .)
    else            reduce using rule 27 (expression -> expression + expression .)
    *               shift and go to state 33
    /               shift and go to state 34

  ! *               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]


state 66

    (28) expression -> expression - expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 28 (expression -> expression - expression .)
    eq              reduce using rule 28 (expression -> expression - expression .)
    =               reduce using rule 28 (expression -> expression - expression .)
    >               reduce using rule 28 (expression -> expression - expression .)
    <               reduce using rule 28 (expression -> expression - expression .)
    ge              reduce using rule 28 (expression -> expression - expression .)
    le              reduce using rule 28 (expression -> expression - expression .)
    neqs            reduce using rule 28 (expression -> expression - expression .)
    or              reduce using rule 28 (expression -> expression - expression .)
    nand            reduce using rule 28 (expression -> expression - expression .)
    +               reduce using rule 28 (expression -> expression - expression .)
    -               reduce using rule 28 (expression -> expression - expression .)
    $end            reduce using rule 28 (expression -> expression - expression .)
    }               reduce using rule 28 (expression -> expression - expression .)
    ;               reduce using rule 28 (expression -> expression - expression .)
    then            reduce using rule 28 (expression -> expression - expression .)
    ,               reduce using rule 28 (expression -> expression - expression .)
    ]               reduce using rule 28 (expression -> expression - expression .)
    do              reduce using rule 28 (expression -> expression - expression .)
    )               reduce using rule 28 (expression -> expression - expression .)
    in              reduce using rule 28 (expression -> expression - expression .)
    else            reduce using rule 28 (expression -> expression - expression .)
    *               shift and go to state 33
    /               shift and go to state 34

  ! *               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]


state 67

    (29) expression -> expression * expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 29 (expression -> expression * expression .)
    eq              reduce using rule 29 (expression -> expression * expression .)
    =               reduce using rule 29 (expression -> expression * expression .)
    >               reduce using rule 29 (expression -> expression * expression .)
    <               reduce using rule 29 (expression -> expression * expression .)
    ge              reduce using rule 29 (expression -> expression * expression .)
    le              reduce using rule 29 (expression -> expression * expression .)
    neqs            reduce using rule 29 (expression -> expression * expression .)
    or              reduce using rule 29 (expression -> expression * expression .)
    nand            reduce using rule 29 (expression -> expression * expression .)
    +               reduce using rule 29 (expression -> expression * expression .)
    -               reduce using rule 29 (expression -> expression * expression .)
    *               reduce using rule 29 (expression -> expression * expression .)
    /               reduce using rule 29 (expression -> expression * expression .)
    $end            reduce using rule 29 (expression -> expression * expression .)
    }               reduce using rule 29 (expression -> expression * expression .)
    ;               reduce using rule 29 (expression -> expression * expression .)
    then            reduce using rule 29 (expression -> expression * expression .)
    ,               reduce using rule 29 (expression -> expression * expression .)
    ]               reduce using rule 29 (expression -> expression * expression .)
    do              reduce using rule 29 (expression -> expression * expression .)
    )               reduce using rule 29 (expression -> expression * expression .)
    in              reduce using rule 29 (expression -> expression * expression .)
    else            reduce using rule 29 (expression -> expression * expression .)

  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]


state 68

    (30) expression -> expression / expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 30 (expression -> expression / expression .)
    eq              reduce using rule 30 (expression -> expression / expression .)
    =               reduce using rule 30 (expression -> expression / expression .)
    >               reduce using rule 30 (expression -> expression / expression .)
    <               reduce using rule 30 (expression -> expression / expression .)
    ge              reduce using rule 30 (expression -> expression / expression .)
    le              reduce using rule 30 (expression -> expression / expression .)
    neqs            reduce using rule 30 (expression -> expression / expression .)
    or              reduce using rule 30 (expression -> expression / expression .)
    nand            reduce using rule 30 (expression -> expression / expression .)
    +               reduce using rule 30 (expression -> expression / expression .)
    -               reduce using rule 30 (expression -> expression / expression .)
    *               reduce using rule 30 (expression -> expression / expression .)
    /               reduce using rule 30 (expression -> expression / expression .)
    $end            reduce using rule 30 (expression -> expression / expression .)
    }               reduce using rule 30 (expression -> expression / expression .)
    ;               reduce using rule 30 (expression -> expression / expression .)
    then            reduce using rule 30 (expression -> expression / expression .)
    ,               reduce using rule 30 (expression -> expression / expression .)
    ]               reduce using rule 30 (expression -> expression / expression .)
    do              reduce using rule 30 (expression -> expression / expression .)
    )               reduce using rule 30 (expression -> expression / expression .)
    in              reduce using rule 30 (expression -> expression / expression .)
    else            reduce using rule 30 (expression -> expression / expression .)

  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]


state 69

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 87

state 70

    (5) expression -> ID lambda expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> ID lambda expression .)
    }               reduce using rule 5 (expression -> ID lambda expression .)
    ;               reduce using rule 5 (expression -> ID lambda expression .)
    then            reduce using rule 5 (expression -> ID lambda expression .)
    ,               reduce using rule 5 (expression -> ID lambda expression .)
    ]               reduce using rule 5 (expression -> ID lambda expression .)
    do              reduce using rule 5 (expression -> ID lambda expression .)
    )               reduce using rule 5 (expression -> ID lambda expression .)
    in              reduce using rule 5 (expression -> ID lambda expression .)
    else            reduce using rule 5 (expression -> ID lambda expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> ID lambda expression .) ]


state 71

    (20) expression -> ID assign expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 20 (expression -> ID assign expression .)
    }               reduce using rule 20 (expression -> ID assign expression .)
    ;               reduce using rule 20 (expression -> ID assign expression .)
    then            reduce using rule 20 (expression -> ID assign expression .)
    ,               reduce using rule 20 (expression -> ID assign expression .)
    ]               reduce using rule 20 (expression -> ID assign expression .)
    do              reduce using rule 20 (expression -> ID assign expression .)
    )               reduce using rule 20 (expression -> ID assign expression .)
    in              reduce using rule 20 (expression -> ID assign expression .)
    else            reduce using rule 20 (expression -> ID assign expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 20 (expression -> ID assign expression .) ]


state 72

    (35) expression -> ID [ NUMBER . ]

    ]               shift and go to state 88


state 73

    (43) expression -> ID ( ) .

    and             reduce using rule 43 (expression -> ID ( ) .)
    eq              reduce using rule 43 (expression -> ID ( ) .)
    =               reduce using rule 43 (expression -> ID ( ) .)
    >               reduce using rule 43 (expression -> ID ( ) .)
    <               reduce using rule 43 (expression -> ID ( ) .)
    ge              reduce using rule 43 (expression -> ID ( ) .)
    le              reduce using rule 43 (expression -> ID ( ) .)
    neqs            reduce using rule 43 (expression -> ID ( ) .)
    or              reduce using rule 43 (expression -> ID ( ) .)
    nand            reduce using rule 43 (expression -> ID ( ) .)
    +               reduce using rule 43 (expression -> ID ( ) .)
    -               reduce using rule 43 (expression -> ID ( ) .)
    *               reduce using rule 43 (expression -> ID ( ) .)
    /               reduce using rule 43 (expression -> ID ( ) .)
    $end            reduce using rule 43 (expression -> ID ( ) .)
    }               reduce using rule 43 (expression -> ID ( ) .)
    ;               reduce using rule 43 (expression -> ID ( ) .)
    then            reduce using rule 43 (expression -> ID ( ) .)
    ,               reduce using rule 43 (expression -> ID ( ) .)
    ]               reduce using rule 43 (expression -> ID ( ) .)
    do              reduce using rule 43 (expression -> ID ( ) .)
    )               reduce using rule 43 (expression -> ID ( ) .)
    in              reduce using rule 43 (expression -> ID ( ) .)
    else            reduce using rule 43 (expression -> ID ( ) .)


state 74

    (44) expression -> ID ( id_list . )

    )               shift and go to state 89


state 75

    (4) expression -> import ID as . ID

    ID              shift and go to state 90


state 76

    (7) expression -> { sequence } .

    and             reduce using rule 7 (expression -> { sequence } .)
    eq              reduce using rule 7 (expression -> { sequence } .)
    =               reduce using rule 7 (expression -> { sequence } .)
    >               reduce using rule 7 (expression -> { sequence } .)
    <               reduce using rule 7 (expression -> { sequence } .)
    ge              reduce using rule 7 (expression -> { sequence } .)
    le              reduce using rule 7 (expression -> { sequence } .)
    neqs            reduce using rule 7 (expression -> { sequence } .)
    or              reduce using rule 7 (expression -> { sequence } .)
    nand            reduce using rule 7 (expression -> { sequence } .)
    +               reduce using rule 7 (expression -> { sequence } .)
    -               reduce using rule 7 (expression -> { sequence } .)
    *               reduce using rule 7 (expression -> { sequence } .)
    /               reduce using rule 7 (expression -> { sequence } .)
    $end            reduce using rule 7 (expression -> { sequence } .)
    }               reduce using rule 7 (expression -> { sequence } .)
    ;               reduce using rule 7 (expression -> { sequence } .)
    then            reduce using rule 7 (expression -> { sequence } .)
    ,               reduce using rule 7 (expression -> { sequence } .)
    ]               reduce using rule 7 (expression -> { sequence } .)
    do              reduce using rule 7 (expression -> { sequence } .)
    )               reduce using rule 7 (expression -> { sequence } .)
    in              reduce using rule 7 (expression -> { sequence } .)
    else            reduce using rule 7 (expression -> { sequence } .)


state 77

    (23) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 91

state 78

    (19) expression -> letrec ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 92

state 79

    (26) expression -> if expression then . expression
    (34) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 93

state 80

    (33) expression -> [ id_list ] .

    and             reduce using rule 33 (expression -> [ id_list ] .)
    eq              reduce using rule 33 (expression -> [ id_list ] .)
    =               reduce using rule 33 (expression -> [ id_list ] .)
    >               reduce using rule 33 (expression -> [ id_list ] .)
    <               reduce using rule 33 (expression -> [ id_list ] .)
    ge              reduce using rule 33 (expression -> [ id_list ] .)
    le              reduce using rule 33 (expression -> [ id_list ] .)
    neqs            reduce using rule 33 (expression -> [ id_list ] .)
    or              reduce using rule 33 (expression -> [ id_list ] .)
    nand            reduce using rule 33 (expression -> [ id_list ] .)
    +               reduce using rule 33 (expression -> [ id_list ] .)
    -               reduce using rule 33 (expression -> [ id_list ] .)
    *               reduce using rule 33 (expression -> [ id_list ] .)
    /               reduce using rule 33 (expression -> [ id_list ] .)
    $end            reduce using rule 33 (expression -> [ id_list ] .)
    }               reduce using rule 33 (expression -> [ id_list ] .)
    ;               reduce using rule 33 (expression -> [ id_list ] .)
    then            reduce using rule 33 (expression -> [ id_list ] .)
    ,               reduce using rule 33 (expression -> [ id_list ] .)
    ]               reduce using rule 33 (expression -> [ id_list ] .)
    do              reduce using rule 33 (expression -> [ id_list ] .)
    )               reduce using rule 33 (expression -> [ id_list ] .)
    in              reduce using rule 33 (expression -> [ id_list ] .)
    else            reduce using rule 33 (expression -> [ id_list ] .)


state 81

    (31) id_list -> expression , . id_list
    (31) id_list -> . expression , id_list
    (32) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 48
    id_list                        shift and go to state 94

state 82

    (37) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 95

state 83

    (38) expression -> ( id_list ) .
    (40) expression -> ( id_list ) . lambda expression

    and             reduce using rule 38 (expression -> ( id_list ) .)
    eq              reduce using rule 38 (expression -> ( id_list ) .)
    =               reduce using rule 38 (expression -> ( id_list ) .)
    >               reduce using rule 38 (expression -> ( id_list ) .)
    <               reduce using rule 38 (expression -> ( id_list ) .)
    ge              reduce using rule 38 (expression -> ( id_list ) .)
    le              reduce using rule 38 (expression -> ( id_list ) .)
    neqs            reduce using rule 38 (expression -> ( id_list ) .)
    or              reduce using rule 38 (expression -> ( id_list ) .)
    nand            reduce using rule 38 (expression -> ( id_list ) .)
    +               reduce using rule 38 (expression -> ( id_list ) .)
    -               reduce using rule 38 (expression -> ( id_list ) .)
    *               reduce using rule 38 (expression -> ( id_list ) .)
    /               reduce using rule 38 (expression -> ( id_list ) .)
    $end            reduce using rule 38 (expression -> ( id_list ) .)
    }               reduce using rule 38 (expression -> ( id_list ) .)
    ;               reduce using rule 38 (expression -> ( id_list ) .)
    then            reduce using rule 38 (expression -> ( id_list ) .)
    ,               reduce using rule 38 (expression -> ( id_list ) .)
    ]               reduce using rule 38 (expression -> ( id_list ) .)
    do              reduce using rule 38 (expression -> ( id_list ) .)
    )               reduce using rule 38 (expression -> ( id_list ) .)
    in              reduce using rule 38 (expression -> ( id_list ) .)
    else            reduce using rule 38 (expression -> ( id_list ) .)
    lambda          shift and go to state 96


state 84

    (42) expression -> ( expression ) .

    and             reduce using rule 42 (expression -> ( expression ) .)
    eq              reduce using rule 42 (expression -> ( expression ) .)
    =               reduce using rule 42 (expression -> ( expression ) .)
    >               reduce using rule 42 (expression -> ( expression ) .)
    <               reduce using rule 42 (expression -> ( expression ) .)
    ge              reduce using rule 42 (expression -> ( expression ) .)
    le              reduce using rule 42 (expression -> ( expression ) .)
    neqs            reduce using rule 42 (expression -> ( expression ) .)
    or              reduce using rule 42 (expression -> ( expression ) .)
    nand            reduce using rule 42 (expression -> ( expression ) .)
    +               reduce using rule 42 (expression -> ( expression ) .)
    -               reduce using rule 42 (expression -> ( expression ) .)
    *               reduce using rule 42 (expression -> ( expression ) .)
    /               reduce using rule 42 (expression -> ( expression ) .)
    $end            reduce using rule 42 (expression -> ( expression ) .)
    }               reduce using rule 42 (expression -> ( expression ) .)
    ;               reduce using rule 42 (expression -> ( expression ) .)
    then            reduce using rule 42 (expression -> ( expression ) .)
    ,               reduce using rule 42 (expression -> ( expression ) .)
    ]               reduce using rule 42 (expression -> ( expression ) .)
    do              reduce using rule 42 (expression -> ( expression ) .)
    )               reduce using rule 42 (expression -> ( expression ) .)
    in              reduce using rule 42 (expression -> ( expression ) .)
    else            reduce using rule 42 (expression -> ( expression ) .)


state 85

    (45) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 97

state 86

    (46) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 98

state 87

    (2) expression -> local ID assign expression . in expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    in              shift and go to state 99
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 88

    (35) expression -> ID [ NUMBER ] .

    and             reduce using rule 35 (expression -> ID [ NUMBER ] .)
    eq              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    ge              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    le              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    neqs            reduce using rule 35 (expression -> ID [ NUMBER ] .)
    or              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    nand            reduce using rule 35 (expression -> ID [ NUMBER ] .)
    +               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 35 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    then            reduce using rule 35 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    do              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    in              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    else            reduce using rule 35 (expression -> ID [ NUMBER ] .)


state 89

    (44) expression -> ID ( id_list ) .

    and             reduce using rule 44 (expression -> ID ( id_list ) .)
    eq              reduce using rule 44 (expression -> ID ( id_list ) .)
    =               reduce using rule 44 (expression -> ID ( id_list ) .)
    >               reduce using rule 44 (expression -> ID ( id_list ) .)
    <               reduce using rule 44 (expression -> ID ( id_list ) .)
    ge              reduce using rule 44 (expression -> ID ( id_list ) .)
    le              reduce using rule 44 (expression -> ID ( id_list ) .)
    neqs            reduce using rule 44 (expression -> ID ( id_list ) .)
    or              reduce using rule 44 (expression -> ID ( id_list ) .)
    nand            reduce using rule 44 (expression -> ID ( id_list ) .)
    +               reduce using rule 44 (expression -> ID ( id_list ) .)
    -               reduce using rule 44 (expression -> ID ( id_list ) .)
    *               reduce using rule 44 (expression -> ID ( id_list ) .)
    /               reduce using rule 44 (expression -> ID ( id_list ) .)
    $end            reduce using rule 44 (expression -> ID ( id_list ) .)
    }               reduce using rule 44 (expression -> ID ( id_list ) .)
    ;               reduce using rule 44 (expression -> ID ( id_list ) .)
    then            reduce using rule 44 (expression -> ID ( id_list ) .)
    ,               reduce using rule 44 (expression -> ID ( id_list ) .)
    ]               reduce using rule 44 (expression -> ID ( id_list ) .)
    do              reduce using rule 44 (expression -> ID ( id_list ) .)
    )               reduce using rule 44 (expression -> ID ( id_list ) .)
    in              reduce using rule 44 (expression -> ID ( id_list ) .)
    else            reduce using rule 44 (expression -> ID ( id_list ) .)


state 90

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    ,               reduce using rule 4 (expression -> import ID as ID .)
    ]               reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 91

    (23) sequence -> sequence ; expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    }               reduce using rule 23 (sequence -> sequence ; expression .)
    ;               reduce using rule 23 (sequence -> sequence ; expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 92

    (19) expression -> letrec ID assign expression . in expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    in              shift and go to state 100
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 93

    (26) expression -> if expression then expression .
    (34) expression -> if expression then expression . else expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 26 (expression -> if expression then expression .)
    }               reduce using rule 26 (expression -> if expression then expression .)
    ;               reduce using rule 26 (expression -> if expression then expression .)
    then            reduce using rule 26 (expression -> if expression then expression .)
    ,               reduce using rule 26 (expression -> if expression then expression .)
    ]               reduce using rule 26 (expression -> if expression then expression .)
    do              reduce using rule 26 (expression -> if expression then expression .)
    )               reduce using rule 26 (expression -> if expression then expression .)
    in              reduce using rule 26 (expression -> if expression then expression .)
    else            shift and go to state 101
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 26 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 26 (expression -> if expression then expression .) ]


state 94

    (31) id_list -> expression , id_list .

    ]               reduce using rule 31 (id_list -> expression , id_list .)
    )               reduce using rule 31 (id_list -> expression , id_list .)


state 95

    (37) expression -> loop expression do expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 37 (expression -> loop expression do expression .)
    }               reduce using rule 37 (expression -> loop expression do expression .)
    ;               reduce using rule 37 (expression -> loop expression do expression .)
    then            reduce using rule 37 (expression -> loop expression do expression .)
    ,               reduce using rule 37 (expression -> loop expression do expression .)
    ]               reduce using rule 37 (expression -> loop expression do expression .)
    do              reduce using rule 37 (expression -> loop expression do expression .)
    )               reduce using rule 37 (expression -> loop expression do expression .)
    in              reduce using rule 37 (expression -> loop expression do expression .)
    else            reduce using rule 37 (expression -> loop expression do expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 37 (expression -> loop expression do expression .) ]


state 96

    (40) expression -> ( id_list ) lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 102

state 97

    (45) expression -> for expression ; expression . ; expression do expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ;               shift and go to state 103
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 98

    (46) expression -> while expression do expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 46 (expression -> while expression do expression .)
    }               reduce using rule 46 (expression -> while expression do expression .)
    ;               reduce using rule 46 (expression -> while expression do expression .)
    then            reduce using rule 46 (expression -> while expression do expression .)
    ,               reduce using rule 46 (expression -> while expression do expression .)
    ]               reduce using rule 46 (expression -> while expression do expression .)
    do              reduce using rule 46 (expression -> while expression do expression .)
    )               reduce using rule 46 (expression -> while expression do expression .)
    in              reduce using rule 46 (expression -> while expression do expression .)
    else            reduce using rule 46 (expression -> while expression do expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 46 (expression -> while expression do expression .) ]


state 99

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 104

state 100

    (19) expression -> letrec ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 105

state 101

    (34) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 106

state 102

    (40) expression -> ( id_list ) lambda expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    }               reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    ;               reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    then            reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    ,               reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    ]               reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    do              reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    )               reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    in              reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    else            reduce using rule 40 (expression -> ( id_list ) lambda expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! eq              [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! =               [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! >               [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! <               [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! ge              [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! le              [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! neqs            [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! or              [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! nand            [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! +               [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! -               [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! *               [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]
  ! /               [ reduce using rule 40 (expression -> ( id_list ) lambda expression .) ]


state 103

    (45) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 107

state 104

    (2) expression -> local ID assign expression in expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    ,               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ]               reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 105

    (19) expression -> letrec ID assign expression in expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    }               reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    ;               reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    then            reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    ,               reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    ]               reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    do              reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    )               reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    in              reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    else            reduce using rule 19 (expression -> letrec ID assign expression in expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! eq              [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! =               [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! >               [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! <               [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! ge              [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! le              [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! or              [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! nand            [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! +               [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! -               [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! *               [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]
  ! /               [ reduce using rule 19 (expression -> letrec ID assign expression in expression .) ]


state 106

    (34) expression -> if expression then expression else expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 34 (expression -> if expression then expression else expression .)
    }               reduce using rule 34 (expression -> if expression then expression else expression .)
    ;               reduce using rule 34 (expression -> if expression then expression else expression .)
    then            reduce using rule 34 (expression -> if expression then expression else expression .)
    ,               reduce using rule 34 (expression -> if expression then expression else expression .)
    ]               reduce using rule 34 (expression -> if expression then expression else expression .)
    do              reduce using rule 34 (expression -> if expression then expression else expression .)
    )               reduce using rule 34 (expression -> if expression then expression else expression .)
    in              reduce using rule 34 (expression -> if expression then expression else expression .)
    else            reduce using rule 34 (expression -> if expression then expression else expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 34 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 34 (expression -> if expression then expression else expression .) ]


state 107

    (45) expression -> for expression ; expression ; expression . do expression
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 108
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 108

    (45) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . lambda expression
    (7) expression -> . { sequence }
    (8) expression -> . expression and expression
    (9) expression -> . expression eq expression
    (10) expression -> . expression = expression
    (11) expression -> . expression > expression
    (12) expression -> . expression < expression
    (13) expression -> . expression ge expression
    (14) expression -> . expression le expression
    (15) expression -> . expression neqs expression
    (16) expression -> . expression or expression
    (17) expression -> . expression nand expression
    (18) expression -> . string
    (19) expression -> . letrec ID assign expression in expression
    (20) expression -> . ID assign expression
    (21) expression -> . - expression
    (22) expression -> . import ID
    (25) expression -> . char
    (26) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (33) expression -> . [ id_list ]
    (34) expression -> . if expression then expression else expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( id_list )
    (39) expression -> . NUMBER
    (40) expression -> . ( id_list ) lambda expression
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . ID ( )
    (44) expression -> . ID ( id_list )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    lambda          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    letrec          shift and go to state 9
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 109

state 109

    (45) expression -> for expression ; expression ; expression do expression .
    (8) expression -> expression . and expression
    (9) expression -> expression . eq expression
    (10) expression -> expression . = expression
    (11) expression -> expression . > expression
    (12) expression -> expression . < expression
    (13) expression -> expression . ge expression
    (14) expression -> expression . le expression
    (15) expression -> expression . neqs expression
    (16) expression -> expression . or expression
    (17) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    ,               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    ]               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 52 resolved as shift
WARNING: shift/reduce conflict for and in state 104 resolved as shift
WARNING: shift/reduce conflict for eq in state 104 resolved as shift
WARNING: shift/reduce conflict for = in state 104 resolved as shift
WARNING: shift/reduce conflict for > in state 104 resolved as shift
WARNING: shift/reduce conflict for < in state 104 resolved as shift
WARNING: shift/reduce conflict for ge in state 104 resolved as shift
WARNING: shift/reduce conflict for le in state 104 resolved as shift
WARNING: shift/reduce conflict for neqs in state 104 resolved as shift
WARNING: shift/reduce conflict for or in state 104 resolved as shift
WARNING: shift/reduce conflict for nand in state 104 resolved as shift
WARNING: shift/reduce conflict for + in state 104 resolved as shift
WARNING: shift/reduce conflict for - in state 104 resolved as shift
WARNING: shift/reduce conflict for * in state 104 resolved as shift
WARNING: shift/reduce conflict for / in state 104 resolved as shift
WARNING: shift/reduce conflict for and in state 105 resolved as shift
WARNING: shift/reduce conflict for eq in state 105 resolved as shift
WARNING: shift/reduce conflict for = in state 105 resolved as shift
WARNING: shift/reduce conflict for > in state 105 resolved as shift
WARNING: shift/reduce conflict for < in state 105 resolved as shift
WARNING: shift/reduce conflict for ge in state 105 resolved as shift
WARNING: shift/reduce conflict for le in state 105 resolved as shift
WARNING: shift/reduce conflict for neqs in state 105 resolved as shift
WARNING: shift/reduce conflict for or in state 105 resolved as shift
WARNING: shift/reduce conflict for nand in state 105 resolved as shift
WARNING: shift/reduce conflict for + in state 105 resolved as shift
WARNING: shift/reduce conflict for - in state 105 resolved as shift
WARNING: shift/reduce conflict for * in state 105 resolved as shift
WARNING: shift/reduce conflict for / in state 105 resolved as shift
