Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    array
    char
    list
    string

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> ID lambda expression
Rule 6     expression -> { sequence }
Rule 7     expression -> expression and expression
Rule 8     expression -> expression eq expression
Rule 9     expression -> expression = expression
Rule 10    expression -> expression > expression
Rule 11    expression -> expression < expression
Rule 12    expression -> expression ge expression
Rule 13    expression -> expression le expression
Rule 14    expression -> expression neqs expression
Rule 15    expression -> expression or expression
Rule 16    expression -> expression nand expression
Rule 17    expression -> ID assign expression
Rule 18    expression -> import ID
Rule 19    expression -> ID ( expression )
Rule 20    sequence -> sequence ; expression
Rule 21    sequence -> expression
Rule 22    expression -> if expression then expression
Rule 23    expression -> expression + expression
Rule 24    expression -> expression - expression
Rule 25    expression -> expression * expression
Rule 26    expression -> expression / expression
Rule 27    expression -> if expression then expression else expression
Rule 28    expression -> not expression
Rule 29    expression -> loop expression do expression
Rule 30    expression -> - expression
Rule 31    expression -> NUMBER
Rule 32    expression -> BOOL
Rule 33    expression -> ( expression )
Rule 34    expression -> for expression ; expression ; expression do expression
Rule 35    expression -> while expression do expression

Terminals, with rules where they appear

(                    : 19 33
)                    : 19 33
*                    : 25
+                    : 23
-                    : 24 30
/                    : 26
;                    : 20 34 34
<                    : 11
=                    : 9
>                    : 10
BOOL                 : 32
ID                   : 2 3 4 4 5 17 18 19
NUMBER               : 31
and                  : 7
array                : 
as                   : 4
assign               : 2 17
char                 : 
do                   : 29 34 35
else                 : 27
eq                   : 8
error                : 
float                : 1
for                  : 34
ge                   : 12
if                   : 22 27
import               : 4 18
in                   : 2
lambda               : 5
le                   : 13
list                 : 
local                : 2
loop                 : 29
nand                 : 16
neqs                 : 14
not                  : 28
or                   : 15
string               : 
then                 : 22 27
while                : 35
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

expression           : 2 2 5 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 19 20 21 22 22 23 23 24 24 25 25 26 26 27 27 27 28 29 29 30 33 34 34 34 34 35 35 0
sequence             : 6 20

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 30


state 4

    (3) expression -> ID .
    (5) expression -> ID . lambda expression
    (17) expression -> ID . assign expression
    (19) expression -> ID . ( expression )

    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    lambda          shift and go to state 31
    assign          shift and go to state 32
    (               shift and go to state 33


state 5

    (4) expression -> import . ID as ID
    (18) expression -> import . ID

    ID              shift and go to state 34


state 6

    (6) expression -> { . sequence }
    (20) sequence -> . sequence ; expression
    (21) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    sequence                       shift and go to state 35
    expression                     shift and go to state 36

state 7

    (33) expression -> ( . expression )
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 37

state 8

    (22) expression -> if . expression then expression
    (27) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 38

state 9

    (30) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 39

state 10

    (28) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 40

state 11

    (29) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 41

state 12

    (31) expression -> NUMBER .

    and             reduce using rule 31 (expression -> NUMBER .)
    eq              reduce using rule 31 (expression -> NUMBER .)
    =               reduce using rule 31 (expression -> NUMBER .)
    >               reduce using rule 31 (expression -> NUMBER .)
    <               reduce using rule 31 (expression -> NUMBER .)
    ge              reduce using rule 31 (expression -> NUMBER .)
    le              reduce using rule 31 (expression -> NUMBER .)
    neqs            reduce using rule 31 (expression -> NUMBER .)
    or              reduce using rule 31 (expression -> NUMBER .)
    nand            reduce using rule 31 (expression -> NUMBER .)
    +               reduce using rule 31 (expression -> NUMBER .)
    -               reduce using rule 31 (expression -> NUMBER .)
    *               reduce using rule 31 (expression -> NUMBER .)
    /               reduce using rule 31 (expression -> NUMBER .)
    $end            reduce using rule 31 (expression -> NUMBER .)
    }               reduce using rule 31 (expression -> NUMBER .)
    ;               reduce using rule 31 (expression -> NUMBER .)
    )               reduce using rule 31 (expression -> NUMBER .)
    then            reduce using rule 31 (expression -> NUMBER .)
    do              reduce using rule 31 (expression -> NUMBER .)
    in              reduce using rule 31 (expression -> NUMBER .)
    else            reduce using rule 31 (expression -> NUMBER .)


state 13

    (32) expression -> BOOL .

    and             reduce using rule 32 (expression -> BOOL .)
    eq              reduce using rule 32 (expression -> BOOL .)
    =               reduce using rule 32 (expression -> BOOL .)
    >               reduce using rule 32 (expression -> BOOL .)
    <               reduce using rule 32 (expression -> BOOL .)
    ge              reduce using rule 32 (expression -> BOOL .)
    le              reduce using rule 32 (expression -> BOOL .)
    neqs            reduce using rule 32 (expression -> BOOL .)
    or              reduce using rule 32 (expression -> BOOL .)
    nand            reduce using rule 32 (expression -> BOOL .)
    +               reduce using rule 32 (expression -> BOOL .)
    -               reduce using rule 32 (expression -> BOOL .)
    *               reduce using rule 32 (expression -> BOOL .)
    /               reduce using rule 32 (expression -> BOOL .)
    $end            reduce using rule 32 (expression -> BOOL .)
    }               reduce using rule 32 (expression -> BOOL .)
    ;               reduce using rule 32 (expression -> BOOL .)
    )               reduce using rule 32 (expression -> BOOL .)
    then            reduce using rule 32 (expression -> BOOL .)
    do              reduce using rule 32 (expression -> BOOL .)
    in              reduce using rule 32 (expression -> BOOL .)
    else            reduce using rule 32 (expression -> BOOL .)


state 14

    (34) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 42

state 15

    (35) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 43

state 16

    (7) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 44

state 17

    (8) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 45

state 18

    (9) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 46

state 19

    (10) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 47

state 20

    (11) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 48

state 21

    (12) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 49

state 22

    (13) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 50

state 23

    (14) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 51

state 24

    (15) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 52

state 25

    (16) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 53

state 26

    (23) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 54

state 27

    (24) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 55

state 28

    (25) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 56

state 29

    (26) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 57

state 30

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 58


state 31

    (5) expression -> ID lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 59

state 32

    (17) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 60

state 33

    (19) expression -> ID ( . expression )
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 61

state 34

    (4) expression -> import ID . as ID
    (18) expression -> import ID .

    as              shift and go to state 62
    and             reduce using rule 18 (expression -> import ID .)
    eq              reduce using rule 18 (expression -> import ID .)
    =               reduce using rule 18 (expression -> import ID .)
    >               reduce using rule 18 (expression -> import ID .)
    <               reduce using rule 18 (expression -> import ID .)
    ge              reduce using rule 18 (expression -> import ID .)
    le              reduce using rule 18 (expression -> import ID .)
    neqs            reduce using rule 18 (expression -> import ID .)
    or              reduce using rule 18 (expression -> import ID .)
    nand            reduce using rule 18 (expression -> import ID .)
    +               reduce using rule 18 (expression -> import ID .)
    -               reduce using rule 18 (expression -> import ID .)
    *               reduce using rule 18 (expression -> import ID .)
    /               reduce using rule 18 (expression -> import ID .)
    $end            reduce using rule 18 (expression -> import ID .)
    }               reduce using rule 18 (expression -> import ID .)
    ;               reduce using rule 18 (expression -> import ID .)
    )               reduce using rule 18 (expression -> import ID .)
    then            reduce using rule 18 (expression -> import ID .)
    do              reduce using rule 18 (expression -> import ID .)
    in              reduce using rule 18 (expression -> import ID .)
    else            reduce using rule 18 (expression -> import ID .)


state 35

    (6) expression -> { sequence . }
    (20) sequence -> sequence . ; expression

    }               shift and go to state 63
    ;               shift and go to state 64


state 36

    (21) sequence -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    }               reduce using rule 21 (sequence -> expression .)
    ;               reduce using rule 21 (sequence -> expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 37

    (33) expression -> ( expression . )
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    )               shift and go to state 65
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 38

    (22) expression -> if expression . then expression
    (27) expression -> if expression . then expression else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    then            shift and go to state 66
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 39

    (30) expression -> - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 30 (expression -> - expression .)
    eq              reduce using rule 30 (expression -> - expression .)
    =               reduce using rule 30 (expression -> - expression .)
    >               reduce using rule 30 (expression -> - expression .)
    <               reduce using rule 30 (expression -> - expression .)
    ge              reduce using rule 30 (expression -> - expression .)
    le              reduce using rule 30 (expression -> - expression .)
    neqs            reduce using rule 30 (expression -> - expression .)
    or              reduce using rule 30 (expression -> - expression .)
    nand            reduce using rule 30 (expression -> - expression .)
    +               reduce using rule 30 (expression -> - expression .)
    -               reduce using rule 30 (expression -> - expression .)
    *               reduce using rule 30 (expression -> - expression .)
    /               reduce using rule 30 (expression -> - expression .)
    $end            reduce using rule 30 (expression -> - expression .)
    }               reduce using rule 30 (expression -> - expression .)
    ;               reduce using rule 30 (expression -> - expression .)
    )               reduce using rule 30 (expression -> - expression .)
    then            reduce using rule 30 (expression -> - expression .)
    do              reduce using rule 30 (expression -> - expression .)
    in              reduce using rule 30 (expression -> - expression .)
    else            reduce using rule 30 (expression -> - expression .)

  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]


state 40

    (28) expression -> not expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 28 (expression -> not expression .)
    eq              reduce using rule 28 (expression -> not expression .)
    =               reduce using rule 28 (expression -> not expression .)
    neqs            reduce using rule 28 (expression -> not expression .)
    or              reduce using rule 28 (expression -> not expression .)
    nand            reduce using rule 28 (expression -> not expression .)
    $end            reduce using rule 28 (expression -> not expression .)
    }               reduce using rule 28 (expression -> not expression .)
    ;               reduce using rule 28 (expression -> not expression .)
    )               reduce using rule 28 (expression -> not expression .)
    then            reduce using rule 28 (expression -> not expression .)
    do              reduce using rule 28 (expression -> not expression .)
    in              reduce using rule 28 (expression -> not expression .)
    else            reduce using rule 28 (expression -> not expression .)
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! >               [ reduce using rule 28 (expression -> not expression .) ]
  ! <               [ reduce using rule 28 (expression -> not expression .) ]
  ! ge              [ reduce using rule 28 (expression -> not expression .) ]
  ! le              [ reduce using rule 28 (expression -> not expression .) ]
  ! +               [ reduce using rule 28 (expression -> not expression .) ]
  ! -               [ reduce using rule 28 (expression -> not expression .) ]
  ! *               [ reduce using rule 28 (expression -> not expression .) ]
  ! /               [ reduce using rule 28 (expression -> not expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 41

    (29) expression -> loop expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    do              shift and go to state 67
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 42

    (34) expression -> for expression . ; expression ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    ;               shift and go to state 68
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 43

    (35) expression -> while expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    do              shift and go to state 69
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 44

    (7) expression -> expression and expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 7 (expression -> expression and expression .)
    or              reduce using rule 7 (expression -> expression and expression .)
    nand            reduce using rule 7 (expression -> expression and expression .)
    $end            reduce using rule 7 (expression -> expression and expression .)
    }               reduce using rule 7 (expression -> expression and expression .)
    ;               reduce using rule 7 (expression -> expression and expression .)
    )               reduce using rule 7 (expression -> expression and expression .)
    then            reduce using rule 7 (expression -> expression and expression .)
    do              reduce using rule 7 (expression -> expression and expression .)
    in              reduce using rule 7 (expression -> expression and expression .)
    else            reduce using rule 7 (expression -> expression and expression .)
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! eq              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 7 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 16 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 45

    (8) expression -> expression eq expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 8 (expression -> expression eq expression .)
    eq              reduce using rule 8 (expression -> expression eq expression .)
    =               reduce using rule 8 (expression -> expression eq expression .)
    neqs            reduce using rule 8 (expression -> expression eq expression .)
    or              reduce using rule 8 (expression -> expression eq expression .)
    nand            reduce using rule 8 (expression -> expression eq expression .)
    $end            reduce using rule 8 (expression -> expression eq expression .)
    }               reduce using rule 8 (expression -> expression eq expression .)
    ;               reduce using rule 8 (expression -> expression eq expression .)
    )               reduce using rule 8 (expression -> expression eq expression .)
    then            reduce using rule 8 (expression -> expression eq expression .)
    do              reduce using rule 8 (expression -> expression eq expression .)
    in              reduce using rule 8 (expression -> expression eq expression .)
    else            reduce using rule 8 (expression -> expression eq expression .)
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! >               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 46

    (9) expression -> expression = expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression = expression .)
    eq              reduce using rule 9 (expression -> expression = expression .)
    =               reduce using rule 9 (expression -> expression = expression .)
    neqs            reduce using rule 9 (expression -> expression = expression .)
    or              reduce using rule 9 (expression -> expression = expression .)
    nand            reduce using rule 9 (expression -> expression = expression .)
    $end            reduce using rule 9 (expression -> expression = expression .)
    }               reduce using rule 9 (expression -> expression = expression .)
    ;               reduce using rule 9 (expression -> expression = expression .)
    )               reduce using rule 9 (expression -> expression = expression .)
    then            reduce using rule 9 (expression -> expression = expression .)
    do              reduce using rule 9 (expression -> expression = expression .)
    in              reduce using rule 9 (expression -> expression = expression .)
    else            reduce using rule 9 (expression -> expression = expression .)
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! >               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 47

    (10) expression -> expression > expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression > expression .)
    eq              reduce using rule 10 (expression -> expression > expression .)
    =               reduce using rule 10 (expression -> expression > expression .)
    >               reduce using rule 10 (expression -> expression > expression .)
    <               reduce using rule 10 (expression -> expression > expression .)
    ge              reduce using rule 10 (expression -> expression > expression .)
    le              reduce using rule 10 (expression -> expression > expression .)
    neqs            reduce using rule 10 (expression -> expression > expression .)
    or              reduce using rule 10 (expression -> expression > expression .)
    nand            reduce using rule 10 (expression -> expression > expression .)
    $end            reduce using rule 10 (expression -> expression > expression .)
    }               reduce using rule 10 (expression -> expression > expression .)
    ;               reduce using rule 10 (expression -> expression > expression .)
    )               reduce using rule 10 (expression -> expression > expression .)
    then            reduce using rule 10 (expression -> expression > expression .)
    do              reduce using rule 10 (expression -> expression > expression .)
    in              reduce using rule 10 (expression -> expression > expression .)
    else            reduce using rule 10 (expression -> expression > expression .)
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! +               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 48

    (11) expression -> expression < expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression < expression .)
    eq              reduce using rule 11 (expression -> expression < expression .)
    =               reduce using rule 11 (expression -> expression < expression .)
    >               reduce using rule 11 (expression -> expression < expression .)
    <               reduce using rule 11 (expression -> expression < expression .)
    ge              reduce using rule 11 (expression -> expression < expression .)
    le              reduce using rule 11 (expression -> expression < expression .)
    neqs            reduce using rule 11 (expression -> expression < expression .)
    or              reduce using rule 11 (expression -> expression < expression .)
    nand            reduce using rule 11 (expression -> expression < expression .)
    $end            reduce using rule 11 (expression -> expression < expression .)
    }               reduce using rule 11 (expression -> expression < expression .)
    ;               reduce using rule 11 (expression -> expression < expression .)
    )               reduce using rule 11 (expression -> expression < expression .)
    then            reduce using rule 11 (expression -> expression < expression .)
    do              reduce using rule 11 (expression -> expression < expression .)
    in              reduce using rule 11 (expression -> expression < expression .)
    else            reduce using rule 11 (expression -> expression < expression .)
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! +               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 49

    (12) expression -> expression ge expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression ge expression .)
    eq              reduce using rule 12 (expression -> expression ge expression .)
    =               reduce using rule 12 (expression -> expression ge expression .)
    >               reduce using rule 12 (expression -> expression ge expression .)
    <               reduce using rule 12 (expression -> expression ge expression .)
    ge              reduce using rule 12 (expression -> expression ge expression .)
    le              reduce using rule 12 (expression -> expression ge expression .)
    neqs            reduce using rule 12 (expression -> expression ge expression .)
    or              reduce using rule 12 (expression -> expression ge expression .)
    nand            reduce using rule 12 (expression -> expression ge expression .)
    $end            reduce using rule 12 (expression -> expression ge expression .)
    }               reduce using rule 12 (expression -> expression ge expression .)
    ;               reduce using rule 12 (expression -> expression ge expression .)
    )               reduce using rule 12 (expression -> expression ge expression .)
    then            reduce using rule 12 (expression -> expression ge expression .)
    do              reduce using rule 12 (expression -> expression ge expression .)
    in              reduce using rule 12 (expression -> expression ge expression .)
    else            reduce using rule 12 (expression -> expression ge expression .)
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! +               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 50

    (13) expression -> expression le expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression le expression .)
    eq              reduce using rule 13 (expression -> expression le expression .)
    =               reduce using rule 13 (expression -> expression le expression .)
    >               reduce using rule 13 (expression -> expression le expression .)
    <               reduce using rule 13 (expression -> expression le expression .)
    ge              reduce using rule 13 (expression -> expression le expression .)
    le              reduce using rule 13 (expression -> expression le expression .)
    neqs            reduce using rule 13 (expression -> expression le expression .)
    or              reduce using rule 13 (expression -> expression le expression .)
    nand            reduce using rule 13 (expression -> expression le expression .)
    $end            reduce using rule 13 (expression -> expression le expression .)
    }               reduce using rule 13 (expression -> expression le expression .)
    ;               reduce using rule 13 (expression -> expression le expression .)
    )               reduce using rule 13 (expression -> expression le expression .)
    then            reduce using rule 13 (expression -> expression le expression .)
    do              reduce using rule 13 (expression -> expression le expression .)
    in              reduce using rule 13 (expression -> expression le expression .)
    else            reduce using rule 13 (expression -> expression le expression .)
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! +               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 51

    (14) expression -> expression neqs expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression neqs expression .)
    eq              reduce using rule 14 (expression -> expression neqs expression .)
    =               reduce using rule 14 (expression -> expression neqs expression .)
    neqs            reduce using rule 14 (expression -> expression neqs expression .)
    or              reduce using rule 14 (expression -> expression neqs expression .)
    nand            reduce using rule 14 (expression -> expression neqs expression .)
    $end            reduce using rule 14 (expression -> expression neqs expression .)
    }               reduce using rule 14 (expression -> expression neqs expression .)
    ;               reduce using rule 14 (expression -> expression neqs expression .)
    )               reduce using rule 14 (expression -> expression neqs expression .)
    then            reduce using rule 14 (expression -> expression neqs expression .)
    do              reduce using rule 14 (expression -> expression neqs expression .)
    in              reduce using rule 14 (expression -> expression neqs expression .)
    else            reduce using rule 14 (expression -> expression neqs expression .)
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! >               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 52

    (15) expression -> expression or expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    or              reduce using rule 15 (expression -> expression or expression .)
    $end            reduce using rule 15 (expression -> expression or expression .)
    }               reduce using rule 15 (expression -> expression or expression .)
    ;               reduce using rule 15 (expression -> expression or expression .)
    )               reduce using rule 15 (expression -> expression or expression .)
    then            reduce using rule 15 (expression -> expression or expression .)
    do              reduce using rule 15 (expression -> expression or expression .)
    in              reduce using rule 15 (expression -> expression or expression .)
    else            reduce using rule 15 (expression -> expression or expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 15 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 24 ]


state 53

    (16) expression -> expression nand expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 16 (expression -> expression nand expression .)
    or              reduce using rule 16 (expression -> expression nand expression .)
    nand            reduce using rule 16 (expression -> expression nand expression .)
    $end            reduce using rule 16 (expression -> expression nand expression .)
    }               reduce using rule 16 (expression -> expression nand expression .)
    ;               reduce using rule 16 (expression -> expression nand expression .)
    )               reduce using rule 16 (expression -> expression nand expression .)
    then            reduce using rule 16 (expression -> expression nand expression .)
    do              reduce using rule 16 (expression -> expression nand expression .)
    in              reduce using rule 16 (expression -> expression nand expression .)
    else            reduce using rule 16 (expression -> expression nand expression .)
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! eq              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 16 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]


state 54

    (23) expression -> expression + expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 23 (expression -> expression + expression .)
    eq              reduce using rule 23 (expression -> expression + expression .)
    =               reduce using rule 23 (expression -> expression + expression .)
    >               reduce using rule 23 (expression -> expression + expression .)
    <               reduce using rule 23 (expression -> expression + expression .)
    ge              reduce using rule 23 (expression -> expression + expression .)
    le              reduce using rule 23 (expression -> expression + expression .)
    neqs            reduce using rule 23 (expression -> expression + expression .)
    or              reduce using rule 23 (expression -> expression + expression .)
    nand            reduce using rule 23 (expression -> expression + expression .)
    +               reduce using rule 23 (expression -> expression + expression .)
    -               reduce using rule 23 (expression -> expression + expression .)
    $end            reduce using rule 23 (expression -> expression + expression .)
    }               reduce using rule 23 (expression -> expression + expression .)
    ;               reduce using rule 23 (expression -> expression + expression .)
    )               reduce using rule 23 (expression -> expression + expression .)
    then            reduce using rule 23 (expression -> expression + expression .)
    do              reduce using rule 23 (expression -> expression + expression .)
    in              reduce using rule 23 (expression -> expression + expression .)
    else            reduce using rule 23 (expression -> expression + expression .)
    *               shift and go to state 28
    /               shift and go to state 29

  ! *               [ reduce using rule 23 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 23 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]


state 55

    (24) expression -> expression - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 24 (expression -> expression - expression .)
    eq              reduce using rule 24 (expression -> expression - expression .)
    =               reduce using rule 24 (expression -> expression - expression .)
    >               reduce using rule 24 (expression -> expression - expression .)
    <               reduce using rule 24 (expression -> expression - expression .)
    ge              reduce using rule 24 (expression -> expression - expression .)
    le              reduce using rule 24 (expression -> expression - expression .)
    neqs            reduce using rule 24 (expression -> expression - expression .)
    or              reduce using rule 24 (expression -> expression - expression .)
    nand            reduce using rule 24 (expression -> expression - expression .)
    +               reduce using rule 24 (expression -> expression - expression .)
    -               reduce using rule 24 (expression -> expression - expression .)
    $end            reduce using rule 24 (expression -> expression - expression .)
    }               reduce using rule 24 (expression -> expression - expression .)
    ;               reduce using rule 24 (expression -> expression - expression .)
    )               reduce using rule 24 (expression -> expression - expression .)
    then            reduce using rule 24 (expression -> expression - expression .)
    do              reduce using rule 24 (expression -> expression - expression .)
    in              reduce using rule 24 (expression -> expression - expression .)
    else            reduce using rule 24 (expression -> expression - expression .)
    *               shift and go to state 28
    /               shift and go to state 29

  ! *               [ reduce using rule 24 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]


state 56

    (25) expression -> expression * expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 25 (expression -> expression * expression .)
    eq              reduce using rule 25 (expression -> expression * expression .)
    =               reduce using rule 25 (expression -> expression * expression .)
    >               reduce using rule 25 (expression -> expression * expression .)
    <               reduce using rule 25 (expression -> expression * expression .)
    ge              reduce using rule 25 (expression -> expression * expression .)
    le              reduce using rule 25 (expression -> expression * expression .)
    neqs            reduce using rule 25 (expression -> expression * expression .)
    or              reduce using rule 25 (expression -> expression * expression .)
    nand            reduce using rule 25 (expression -> expression * expression .)
    +               reduce using rule 25 (expression -> expression * expression .)
    -               reduce using rule 25 (expression -> expression * expression .)
    *               reduce using rule 25 (expression -> expression * expression .)
    /               reduce using rule 25 (expression -> expression * expression .)
    $end            reduce using rule 25 (expression -> expression * expression .)
    }               reduce using rule 25 (expression -> expression * expression .)
    ;               reduce using rule 25 (expression -> expression * expression .)
    )               reduce using rule 25 (expression -> expression * expression .)
    then            reduce using rule 25 (expression -> expression * expression .)
    do              reduce using rule 25 (expression -> expression * expression .)
    in              reduce using rule 25 (expression -> expression * expression .)
    else            reduce using rule 25 (expression -> expression * expression .)

  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]


state 57

    (26) expression -> expression / expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    and             reduce using rule 26 (expression -> expression / expression .)
    eq              reduce using rule 26 (expression -> expression / expression .)
    =               reduce using rule 26 (expression -> expression / expression .)
    >               reduce using rule 26 (expression -> expression / expression .)
    <               reduce using rule 26 (expression -> expression / expression .)
    ge              reduce using rule 26 (expression -> expression / expression .)
    le              reduce using rule 26 (expression -> expression / expression .)
    neqs            reduce using rule 26 (expression -> expression / expression .)
    or              reduce using rule 26 (expression -> expression / expression .)
    nand            reduce using rule 26 (expression -> expression / expression .)
    +               reduce using rule 26 (expression -> expression / expression .)
    -               reduce using rule 26 (expression -> expression / expression .)
    *               reduce using rule 26 (expression -> expression / expression .)
    /               reduce using rule 26 (expression -> expression / expression .)
    $end            reduce using rule 26 (expression -> expression / expression .)
    }               reduce using rule 26 (expression -> expression / expression .)
    ;               reduce using rule 26 (expression -> expression / expression .)
    )               reduce using rule 26 (expression -> expression / expression .)
    then            reduce using rule 26 (expression -> expression / expression .)
    do              reduce using rule 26 (expression -> expression / expression .)
    in              reduce using rule 26 (expression -> expression / expression .)
    else            reduce using rule 26 (expression -> expression / expression .)

  ! and             [ shift and go to state 16 ]
  ! eq              [ shift and go to state 17 ]
  ! =               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]
  ! <               [ shift and go to state 20 ]
  ! ge              [ shift and go to state 21 ]
  ! le              [ shift and go to state 22 ]
  ! neqs            [ shift and go to state 23 ]
  ! or              [ shift and go to state 24 ]
  ! nand            [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]


state 58

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 70

state 59

    (5) expression -> ID lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> ID lambda expression .)
    }               reduce using rule 5 (expression -> ID lambda expression .)
    ;               reduce using rule 5 (expression -> ID lambda expression .)
    )               reduce using rule 5 (expression -> ID lambda expression .)
    then            reduce using rule 5 (expression -> ID lambda expression .)
    do              reduce using rule 5 (expression -> ID lambda expression .)
    in              reduce using rule 5 (expression -> ID lambda expression .)
    else            reduce using rule 5 (expression -> ID lambda expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> ID lambda expression .) ]


state 60

    (17) expression -> ID assign expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    $end            reduce using rule 17 (expression -> ID assign expression .)
    }               reduce using rule 17 (expression -> ID assign expression .)
    ;               reduce using rule 17 (expression -> ID assign expression .)
    )               reduce using rule 17 (expression -> ID assign expression .)
    then            reduce using rule 17 (expression -> ID assign expression .)
    do              reduce using rule 17 (expression -> ID assign expression .)
    in              reduce using rule 17 (expression -> ID assign expression .)
    else            reduce using rule 17 (expression -> ID assign expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 17 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 17 (expression -> ID assign expression .) ]


state 61

    (19) expression -> ID ( expression . )
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    )               shift and go to state 71
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 62

    (4) expression -> import ID as . ID

    ID              shift and go to state 72


state 63

    (6) expression -> { sequence } .

    and             reduce using rule 6 (expression -> { sequence } .)
    eq              reduce using rule 6 (expression -> { sequence } .)
    =               reduce using rule 6 (expression -> { sequence } .)
    >               reduce using rule 6 (expression -> { sequence } .)
    <               reduce using rule 6 (expression -> { sequence } .)
    ge              reduce using rule 6 (expression -> { sequence } .)
    le              reduce using rule 6 (expression -> { sequence } .)
    neqs            reduce using rule 6 (expression -> { sequence } .)
    or              reduce using rule 6 (expression -> { sequence } .)
    nand            reduce using rule 6 (expression -> { sequence } .)
    +               reduce using rule 6 (expression -> { sequence } .)
    -               reduce using rule 6 (expression -> { sequence } .)
    *               reduce using rule 6 (expression -> { sequence } .)
    /               reduce using rule 6 (expression -> { sequence } .)
    $end            reduce using rule 6 (expression -> { sequence } .)
    }               reduce using rule 6 (expression -> { sequence } .)
    ;               reduce using rule 6 (expression -> { sequence } .)
    )               reduce using rule 6 (expression -> { sequence } .)
    then            reduce using rule 6 (expression -> { sequence } .)
    do              reduce using rule 6 (expression -> { sequence } .)
    in              reduce using rule 6 (expression -> { sequence } .)
    else            reduce using rule 6 (expression -> { sequence } .)


state 64

    (20) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 73

state 65

    (33) expression -> ( expression ) .

    and             reduce using rule 33 (expression -> ( expression ) .)
    eq              reduce using rule 33 (expression -> ( expression ) .)
    =               reduce using rule 33 (expression -> ( expression ) .)
    >               reduce using rule 33 (expression -> ( expression ) .)
    <               reduce using rule 33 (expression -> ( expression ) .)
    ge              reduce using rule 33 (expression -> ( expression ) .)
    le              reduce using rule 33 (expression -> ( expression ) .)
    neqs            reduce using rule 33 (expression -> ( expression ) .)
    or              reduce using rule 33 (expression -> ( expression ) .)
    nand            reduce using rule 33 (expression -> ( expression ) .)
    +               reduce using rule 33 (expression -> ( expression ) .)
    -               reduce using rule 33 (expression -> ( expression ) .)
    *               reduce using rule 33 (expression -> ( expression ) .)
    /               reduce using rule 33 (expression -> ( expression ) .)
    $end            reduce using rule 33 (expression -> ( expression ) .)
    }               reduce using rule 33 (expression -> ( expression ) .)
    ;               reduce using rule 33 (expression -> ( expression ) .)
    )               reduce using rule 33 (expression -> ( expression ) .)
    then            reduce using rule 33 (expression -> ( expression ) .)
    do              reduce using rule 33 (expression -> ( expression ) .)
    in              reduce using rule 33 (expression -> ( expression ) .)
    else            reduce using rule 33 (expression -> ( expression ) .)


state 66

    (22) expression -> if expression then . expression
    (27) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 74

state 67

    (29) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 75

state 68

    (34) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 76

state 69

    (35) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 77

state 70

    (2) expression -> local ID assign expression . in expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    in              shift and go to state 78
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 71

    (19) expression -> ID ( expression ) .

    and             reduce using rule 19 (expression -> ID ( expression ) .)
    eq              reduce using rule 19 (expression -> ID ( expression ) .)
    =               reduce using rule 19 (expression -> ID ( expression ) .)
    >               reduce using rule 19 (expression -> ID ( expression ) .)
    <               reduce using rule 19 (expression -> ID ( expression ) .)
    ge              reduce using rule 19 (expression -> ID ( expression ) .)
    le              reduce using rule 19 (expression -> ID ( expression ) .)
    neqs            reduce using rule 19 (expression -> ID ( expression ) .)
    or              reduce using rule 19 (expression -> ID ( expression ) .)
    nand            reduce using rule 19 (expression -> ID ( expression ) .)
    +               reduce using rule 19 (expression -> ID ( expression ) .)
    -               reduce using rule 19 (expression -> ID ( expression ) .)
    *               reduce using rule 19 (expression -> ID ( expression ) .)
    /               reduce using rule 19 (expression -> ID ( expression ) .)
    $end            reduce using rule 19 (expression -> ID ( expression ) .)
    }               reduce using rule 19 (expression -> ID ( expression ) .)
    ;               reduce using rule 19 (expression -> ID ( expression ) .)
    )               reduce using rule 19 (expression -> ID ( expression ) .)
    then            reduce using rule 19 (expression -> ID ( expression ) .)
    do              reduce using rule 19 (expression -> ID ( expression ) .)
    in              reduce using rule 19 (expression -> ID ( expression ) .)
    else            reduce using rule 19 (expression -> ID ( expression ) .)


state 72

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 73

    (20) sequence -> sequence ; expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    }               reduce using rule 20 (sequence -> sequence ; expression .)
    ;               reduce using rule 20 (sequence -> sequence ; expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 74

    (22) expression -> if expression then expression .
    (27) expression -> if expression then expression . else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    $end            reduce using rule 22 (expression -> if expression then expression .)
    }               reduce using rule 22 (expression -> if expression then expression .)
    ;               reduce using rule 22 (expression -> if expression then expression .)
    )               reduce using rule 22 (expression -> if expression then expression .)
    then            reduce using rule 22 (expression -> if expression then expression .)
    do              reduce using rule 22 (expression -> if expression then expression .)
    in              reduce using rule 22 (expression -> if expression then expression .)
    else            shift and go to state 79
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 22 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 22 (expression -> if expression then expression .) ]


state 75

    (29) expression -> loop expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    $end            reduce using rule 29 (expression -> loop expression do expression .)
    }               reduce using rule 29 (expression -> loop expression do expression .)
    ;               reduce using rule 29 (expression -> loop expression do expression .)
    )               reduce using rule 29 (expression -> loop expression do expression .)
    then            reduce using rule 29 (expression -> loop expression do expression .)
    do              reduce using rule 29 (expression -> loop expression do expression .)
    in              reduce using rule 29 (expression -> loop expression do expression .)
    else            reduce using rule 29 (expression -> loop expression do expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 29 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 29 (expression -> loop expression do expression .) ]


state 76

    (34) expression -> for expression ; expression . ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    ;               shift and go to state 80
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 77

    (35) expression -> while expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    $end            reduce using rule 35 (expression -> while expression do expression .)
    }               reduce using rule 35 (expression -> while expression do expression .)
    ;               reduce using rule 35 (expression -> while expression do expression .)
    )               reduce using rule 35 (expression -> while expression do expression .)
    then            reduce using rule 35 (expression -> while expression do expression .)
    do              reduce using rule 35 (expression -> while expression do expression .)
    in              reduce using rule 35 (expression -> while expression do expression .)
    else            reduce using rule 35 (expression -> while expression do expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 35 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 35 (expression -> while expression do expression .) ]


state 78

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 81

state 79

    (27) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 82

state 80

    (34) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 83

state 81

    (2) expression -> local ID assign expression in expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 82

    (27) expression -> if expression then expression else expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    $end            reduce using rule 27 (expression -> if expression then expression else expression .)
    }               reduce using rule 27 (expression -> if expression then expression else expression .)
    ;               reduce using rule 27 (expression -> if expression then expression else expression .)
    )               reduce using rule 27 (expression -> if expression then expression else expression .)
    then            reduce using rule 27 (expression -> if expression then expression else expression .)
    do              reduce using rule 27 (expression -> if expression then expression else expression .)
    in              reduce using rule 27 (expression -> if expression then expression else expression .)
    else            reduce using rule 27 (expression -> if expression then expression else expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 27 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 27 (expression -> if expression then expression else expression .) ]


state 83

    (34) expression -> for expression ; expression ; expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    do              shift and go to state 84
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29


state 84

    (34) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . ID assign expression
    (18) expression -> . import ID
    (19) expression -> . ID ( expression )
    (22) expression -> . if expression then expression
    (23) expression -> . expression + expression
    (24) expression -> . expression - expression
    (25) expression -> . expression * expression
    (26) expression -> . expression / expression
    (27) expression -> . if expression then expression else expression
    (28) expression -> . not expression
    (29) expression -> . loop expression do expression
    (30) expression -> . - expression
    (31) expression -> . NUMBER
    (32) expression -> . BOOL
    (33) expression -> . ( expression )
    (34) expression -> . for expression ; expression ; expression do expression
    (35) expression -> . while expression do expression

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    if              shift and go to state 8
    not             shift and go to state 10
    loop            shift and go to state 11
    -               shift and go to state 9
    NUMBER          shift and go to state 12
    BOOL            shift and go to state 13
    (               shift and go to state 7
    for             shift and go to state 14
    while           shift and go to state 15

    expression                     shift and go to state 85

state 85

    (34) expression -> for expression ; expression ; expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (23) expression -> expression . + expression
    (24) expression -> expression . - expression
    (25) expression -> expression . * expression
    (26) expression -> expression . / expression

    $end            reduce using rule 34 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 34 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 34 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 34 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 34 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 34 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 34 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 34 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 16
    eq              shift and go to state 17
    =               shift and go to state 18
    >               shift and go to state 19
    <               shift and go to state 20
    ge              shift and go to state 21
    le              shift and go to state 22
    neqs            shift and go to state 23
    or              shift and go to state 24
    nand            shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29

  ! and             [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 34 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for and in state 81 resolved as shift
WARNING: shift/reduce conflict for eq in state 81 resolved as shift
WARNING: shift/reduce conflict for = in state 81 resolved as shift
WARNING: shift/reduce conflict for > in state 81 resolved as shift
WARNING: shift/reduce conflict for < in state 81 resolved as shift
WARNING: shift/reduce conflict for ge in state 81 resolved as shift
WARNING: shift/reduce conflict for le in state 81 resolved as shift
WARNING: shift/reduce conflict for neqs in state 81 resolved as shift
WARNING: shift/reduce conflict for or in state 81 resolved as shift
WARNING: shift/reduce conflict for nand in state 81 resolved as shift
WARNING: shift/reduce conflict for + in state 81 resolved as shift
WARNING: shift/reduce conflict for - in state 81 resolved as shift
WARNING: shift/reduce conflict for * in state 81 resolved as shift
WARNING: shift/reduce conflict for / in state 81 resolved as shift
