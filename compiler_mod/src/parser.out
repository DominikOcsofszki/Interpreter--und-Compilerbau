Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> letrec ID assign expression lambda expression
Rule 6     expression -> { sequence }
Rule 7     expression -> expression and expression
Rule 8     expression -> expression eq expression
Rule 9     expression -> expression = expression
Rule 10    expression -> expression > expression
Rule 11    expression -> expression < expression
Rule 12    expression -> expression ge expression
Rule 13    expression -> expression le expression
Rule 14    expression -> expression neqs expression
Rule 15    expression -> expression or expression
Rule 16    expression -> expression nand expression
Rule 17    expression -> string
Rule 18    expression -> ID assign expression
Rule 19    expression -> import ID
Rule 20    expression -> struct { sequence }
Rule 21    expression -> - expression
Rule 22    expression -> char
Rule 23    expression -> if expression then expression
Rule 24    sequence -> sequence ; expression
Rule 25    sequence -> expression
Rule 26    expression -> expression + expression
Rule 27    expression -> expression - expression
Rule 28    expression -> expression * expression
Rule 29    expression -> expression / expression
Rule 30    expression -> [ id_list ]
Rule 31    expression -> if expression then expression else expression
Rule 32    id_list -> expression , id_list
Rule 33    id_list -> expression
Rule 34    expression -> ID [ NUMBER ]
Rule 35    expression -> not expression
Rule 36    expression -> loop expression do expression
Rule 37    expression -> ( id_list )
Rule 38    expression -> NUMBER
Rule 39    expression -> BOOL
Rule 40    expression -> ( expression )
Rule 41    expression -> extend ID { sequence }
Rule 42    expression -> for expression ; expression ; expression do expression
Rule 43    expression -> lambda expression
Rule 44    expression -> ID lambda expression
Rule 45    expression -> ( id_list ) lambda expression
Rule 46    dot_expression -> ID . ID
Rule 47    dot_expression -> ID . . ID
Rule 48    dot_expression -> ID . . . ID
Rule 49    dot_expression -> ID . . . . ID
Rule 50    dot_expression -> ID . . . . . ID
Rule 51    dot_expression -> ID . . . . . . ID
Rule 52    expression -> while expression do expression
Rule 53    expression -> dot_expression
Rule 54    expression -> dot_expression ( )
Rule 55    expression -> dot_expression ( id_list )
Rule 56    expression -> ID ( )
Rule 57    expression -> ID ( id_list )

Terminals, with rules where they appear

(                    : 37 40 45 54 55 56 57
)                    : 37 40 45 54 55 56 57
*                    : 28
+                    : 26
,                    : 32
-                    : 21 27
.                    : 46 47 47 48 48 48 49 49 49 49 50 50 50 50 50 51 51 51 51 51 51
/                    : 29
;                    : 24 42 42
<                    : 11
=                    : 9
>                    : 10
BOOL                 : 39
ID                   : 2 3 4 4 5 18 19 34 41 44 46 46 47 47 48 48 49 49 50 50 51 51 56 57
NUMBER               : 34 38
[                    : 30 34
]                    : 30 34
and                  : 7
as                   : 4
assign               : 2 5 18
char                 : 22
do                   : 36 42 52
else                 : 31
eq                   : 8
error                : 
extend               : 41
float                : 1
for                  : 42
ge                   : 12
if                   : 23 31
import               : 4 19
in                   : 2
lambda               : 5 43 44 45
le                   : 13
letrec               : 5
local                : 2
loop                 : 36
nand                 : 16
neqs                 : 14
not                  : 35
or                   : 15
string               : 17
struct               : 20
then                 : 23 31
while                : 52
{                    : 6 20 41
}                    : 6 20 41

Nonterminals, with rules where they appear

dot_expression       : 53 54 55
expression           : 2 2 5 5 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 18 21 23 23 24 25 26 26 27 27 28 28 29 29 31 31 31 32 33 35 36 36 40 42 42 42 42 43 44 45 52 52 0
id_list              : 30 32 37 45 55 57
sequence             : 6 20 24 41

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 1
    dot_expression                 shift and go to state 23

state 1

    (0) S' -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    ,               reduce using rule 1 (expression -> float .)
    ]               reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    lambda          reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 38


state 4

    (3) expression -> ID .
    (18) expression -> ID . assign expression
    (34) expression -> ID . [ NUMBER ]
    (44) expression -> ID . lambda expression
    (56) expression -> ID . ( )
    (57) expression -> ID . ( id_list )
    (46) dot_expression -> ID . . ID
    (47) dot_expression -> ID . . . ID
    (48) dot_expression -> ID . . . . ID
    (49) dot_expression -> ID . . . . . ID
    (50) dot_expression -> ID . . . . . . ID
    (51) dot_expression -> ID . . . . . . . ID

  ! shift/reduce conflict for lambda resolved as shift
    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    ,               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    assign          shift and go to state 39
    [               shift and go to state 40
    lambda          shift and go to state 41
    (               shift and go to state 42
    .               shift and go to state 43

  ! lambda          [ reduce using rule 3 (expression -> ID .) ]


state 5

    (4) expression -> import . ID as ID
    (19) expression -> import . ID

    ID              shift and go to state 44


state 6

    (5) expression -> letrec . ID assign expression lambda expression

    ID              shift and go to state 45


state 7

    (43) expression -> lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 46
    dot_expression                 shift and go to state 23

state 8

    (6) expression -> { . sequence }
    (24) sequence -> . sequence ; expression
    (25) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    sequence                       shift and go to state 47
    expression                     shift and go to state 48
    dot_expression                 shift and go to state 23

state 9

    (17) expression -> string .

    and             reduce using rule 17 (expression -> string .)
    eq              reduce using rule 17 (expression -> string .)
    =               reduce using rule 17 (expression -> string .)
    >               reduce using rule 17 (expression -> string .)
    <               reduce using rule 17 (expression -> string .)
    ge              reduce using rule 17 (expression -> string .)
    le              reduce using rule 17 (expression -> string .)
    neqs            reduce using rule 17 (expression -> string .)
    or              reduce using rule 17 (expression -> string .)
    nand            reduce using rule 17 (expression -> string .)
    +               reduce using rule 17 (expression -> string .)
    -               reduce using rule 17 (expression -> string .)
    *               reduce using rule 17 (expression -> string .)
    /               reduce using rule 17 (expression -> string .)
    $end            reduce using rule 17 (expression -> string .)
    }               reduce using rule 17 (expression -> string .)
    ;               reduce using rule 17 (expression -> string .)
    then            reduce using rule 17 (expression -> string .)
    ,               reduce using rule 17 (expression -> string .)
    ]               reduce using rule 17 (expression -> string .)
    do              reduce using rule 17 (expression -> string .)
    )               reduce using rule 17 (expression -> string .)
    in              reduce using rule 17 (expression -> string .)
    lambda          reduce using rule 17 (expression -> string .)
    else            reduce using rule 17 (expression -> string .)


state 10

    (20) expression -> struct . { sequence }

    {               shift and go to state 49


state 11

    (21) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 50
    dot_expression                 shift and go to state 23

state 12

    (22) expression -> char .

    and             reduce using rule 22 (expression -> char .)
    eq              reduce using rule 22 (expression -> char .)
    =               reduce using rule 22 (expression -> char .)
    >               reduce using rule 22 (expression -> char .)
    <               reduce using rule 22 (expression -> char .)
    ge              reduce using rule 22 (expression -> char .)
    le              reduce using rule 22 (expression -> char .)
    neqs            reduce using rule 22 (expression -> char .)
    or              reduce using rule 22 (expression -> char .)
    nand            reduce using rule 22 (expression -> char .)
    +               reduce using rule 22 (expression -> char .)
    -               reduce using rule 22 (expression -> char .)
    *               reduce using rule 22 (expression -> char .)
    /               reduce using rule 22 (expression -> char .)
    $end            reduce using rule 22 (expression -> char .)
    }               reduce using rule 22 (expression -> char .)
    ;               reduce using rule 22 (expression -> char .)
    then            reduce using rule 22 (expression -> char .)
    ,               reduce using rule 22 (expression -> char .)
    ]               reduce using rule 22 (expression -> char .)
    do              reduce using rule 22 (expression -> char .)
    )               reduce using rule 22 (expression -> char .)
    in              reduce using rule 22 (expression -> char .)
    lambda          reduce using rule 22 (expression -> char .)
    else            reduce using rule 22 (expression -> char .)


state 13

    (23) expression -> if . expression then expression
    (31) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 51
    dot_expression                 shift and go to state 23

state 14

    (30) expression -> [ . id_list ]
    (32) id_list -> . expression , id_list
    (33) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    id_list                        shift and go to state 52
    expression                     shift and go to state 53
    dot_expression                 shift and go to state 23

state 15

    (38) expression -> NUMBER .

    and             reduce using rule 38 (expression -> NUMBER .)
    eq              reduce using rule 38 (expression -> NUMBER .)
    =               reduce using rule 38 (expression -> NUMBER .)
    >               reduce using rule 38 (expression -> NUMBER .)
    <               reduce using rule 38 (expression -> NUMBER .)
    ge              reduce using rule 38 (expression -> NUMBER .)
    le              reduce using rule 38 (expression -> NUMBER .)
    neqs            reduce using rule 38 (expression -> NUMBER .)
    or              reduce using rule 38 (expression -> NUMBER .)
    nand            reduce using rule 38 (expression -> NUMBER .)
    +               reduce using rule 38 (expression -> NUMBER .)
    -               reduce using rule 38 (expression -> NUMBER .)
    *               reduce using rule 38 (expression -> NUMBER .)
    /               reduce using rule 38 (expression -> NUMBER .)
    $end            reduce using rule 38 (expression -> NUMBER .)
    }               reduce using rule 38 (expression -> NUMBER .)
    ;               reduce using rule 38 (expression -> NUMBER .)
    then            reduce using rule 38 (expression -> NUMBER .)
    ,               reduce using rule 38 (expression -> NUMBER .)
    ]               reduce using rule 38 (expression -> NUMBER .)
    do              reduce using rule 38 (expression -> NUMBER .)
    )               reduce using rule 38 (expression -> NUMBER .)
    in              reduce using rule 38 (expression -> NUMBER .)
    lambda          reduce using rule 38 (expression -> NUMBER .)
    else            reduce using rule 38 (expression -> NUMBER .)


state 16

    (35) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 54
    dot_expression                 shift and go to state 23

state 17

    (36) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 55
    dot_expression                 shift and go to state 23

state 18

    (37) expression -> ( . id_list )
    (40) expression -> ( . expression )
    (45) expression -> ( . id_list ) lambda expression
    (32) id_list -> . expression , id_list
    (33) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    id_list                        shift and go to state 56
    expression                     shift and go to state 57
    dot_expression                 shift and go to state 23

state 19

    (39) expression -> BOOL .

    and             reduce using rule 39 (expression -> BOOL .)
    eq              reduce using rule 39 (expression -> BOOL .)
    =               reduce using rule 39 (expression -> BOOL .)
    >               reduce using rule 39 (expression -> BOOL .)
    <               reduce using rule 39 (expression -> BOOL .)
    ge              reduce using rule 39 (expression -> BOOL .)
    le              reduce using rule 39 (expression -> BOOL .)
    neqs            reduce using rule 39 (expression -> BOOL .)
    or              reduce using rule 39 (expression -> BOOL .)
    nand            reduce using rule 39 (expression -> BOOL .)
    +               reduce using rule 39 (expression -> BOOL .)
    -               reduce using rule 39 (expression -> BOOL .)
    *               reduce using rule 39 (expression -> BOOL .)
    /               reduce using rule 39 (expression -> BOOL .)
    $end            reduce using rule 39 (expression -> BOOL .)
    }               reduce using rule 39 (expression -> BOOL .)
    ;               reduce using rule 39 (expression -> BOOL .)
    then            reduce using rule 39 (expression -> BOOL .)
    ,               reduce using rule 39 (expression -> BOOL .)
    ]               reduce using rule 39 (expression -> BOOL .)
    do              reduce using rule 39 (expression -> BOOL .)
    )               reduce using rule 39 (expression -> BOOL .)
    in              reduce using rule 39 (expression -> BOOL .)
    lambda          reduce using rule 39 (expression -> BOOL .)
    else            reduce using rule 39 (expression -> BOOL .)


state 20

    (41) expression -> extend . ID { sequence }

    ID              shift and go to state 58


state 21

    (42) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 59
    dot_expression                 shift and go to state 23

state 22

    (52) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 60
    dot_expression                 shift and go to state 23

state 23

    (53) expression -> dot_expression .
    (54) expression -> dot_expression . ( )
    (55) expression -> dot_expression . ( id_list )

    and             reduce using rule 53 (expression -> dot_expression .)
    eq              reduce using rule 53 (expression -> dot_expression .)
    =               reduce using rule 53 (expression -> dot_expression .)
    >               reduce using rule 53 (expression -> dot_expression .)
    <               reduce using rule 53 (expression -> dot_expression .)
    ge              reduce using rule 53 (expression -> dot_expression .)
    le              reduce using rule 53 (expression -> dot_expression .)
    neqs            reduce using rule 53 (expression -> dot_expression .)
    or              reduce using rule 53 (expression -> dot_expression .)
    nand            reduce using rule 53 (expression -> dot_expression .)
    +               reduce using rule 53 (expression -> dot_expression .)
    -               reduce using rule 53 (expression -> dot_expression .)
    *               reduce using rule 53 (expression -> dot_expression .)
    /               reduce using rule 53 (expression -> dot_expression .)
    $end            reduce using rule 53 (expression -> dot_expression .)
    }               reduce using rule 53 (expression -> dot_expression .)
    ;               reduce using rule 53 (expression -> dot_expression .)
    then            reduce using rule 53 (expression -> dot_expression .)
    ,               reduce using rule 53 (expression -> dot_expression .)
    ]               reduce using rule 53 (expression -> dot_expression .)
    do              reduce using rule 53 (expression -> dot_expression .)
    )               reduce using rule 53 (expression -> dot_expression .)
    in              reduce using rule 53 (expression -> dot_expression .)
    lambda          reduce using rule 53 (expression -> dot_expression .)
    else            reduce using rule 53 (expression -> dot_expression .)
    (               shift and go to state 61


state 24

    (7) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 62
    dot_expression                 shift and go to state 23

state 25

    (8) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 63
    dot_expression                 shift and go to state 23

state 26

    (9) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 64
    dot_expression                 shift and go to state 23

state 27

    (10) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 65
    dot_expression                 shift and go to state 23

state 28

    (11) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 66
    dot_expression                 shift and go to state 23

state 29

    (12) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 67
    dot_expression                 shift and go to state 23

state 30

    (13) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 68
    dot_expression                 shift and go to state 23

state 31

    (14) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 69
    dot_expression                 shift and go to state 23

state 32

    (15) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 70
    dot_expression                 shift and go to state 23

state 33

    (16) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 71
    dot_expression                 shift and go to state 23

state 34

    (26) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 72
    dot_expression                 shift and go to state 23

state 35

    (27) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 73
    dot_expression                 shift and go to state 23

state 36

    (28) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 74
    dot_expression                 shift and go to state 23

state 37

    (29) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 75
    dot_expression                 shift and go to state 23

state 38

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 76


state 39

    (18) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 77
    dot_expression                 shift and go to state 23

state 40

    (34) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 78


state 41

    (44) expression -> ID lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 79
    dot_expression                 shift and go to state 23

state 42

    (56) expression -> ID ( . )
    (57) expression -> ID ( . id_list )
    (32) id_list -> . expression , id_list
    (33) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    )               shift and go to state 80
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    id_list                        shift and go to state 81
    expression                     shift and go to state 53
    dot_expression                 shift and go to state 23

state 43

    (46) dot_expression -> ID . . ID
    (47) dot_expression -> ID . . . ID
    (48) dot_expression -> ID . . . . ID
    (49) dot_expression -> ID . . . . . ID
    (50) dot_expression -> ID . . . . . . ID
    (51) dot_expression -> ID . . . . . . . ID

    ID              shift and go to state 82
    .               shift and go to state 83


state 44

    (4) expression -> import ID . as ID
    (19) expression -> import ID .

    as              shift and go to state 84
    and             reduce using rule 19 (expression -> import ID .)
    eq              reduce using rule 19 (expression -> import ID .)
    =               reduce using rule 19 (expression -> import ID .)
    >               reduce using rule 19 (expression -> import ID .)
    <               reduce using rule 19 (expression -> import ID .)
    ge              reduce using rule 19 (expression -> import ID .)
    le              reduce using rule 19 (expression -> import ID .)
    neqs            reduce using rule 19 (expression -> import ID .)
    or              reduce using rule 19 (expression -> import ID .)
    nand            reduce using rule 19 (expression -> import ID .)
    +               reduce using rule 19 (expression -> import ID .)
    -               reduce using rule 19 (expression -> import ID .)
    *               reduce using rule 19 (expression -> import ID .)
    /               reduce using rule 19 (expression -> import ID .)
    $end            reduce using rule 19 (expression -> import ID .)
    }               reduce using rule 19 (expression -> import ID .)
    ;               reduce using rule 19 (expression -> import ID .)
    then            reduce using rule 19 (expression -> import ID .)
    ,               reduce using rule 19 (expression -> import ID .)
    ]               reduce using rule 19 (expression -> import ID .)
    do              reduce using rule 19 (expression -> import ID .)
    )               reduce using rule 19 (expression -> import ID .)
    in              reduce using rule 19 (expression -> import ID .)
    lambda          reduce using rule 19 (expression -> import ID .)
    else            reduce using rule 19 (expression -> import ID .)


state 45

    (5) expression -> letrec ID . assign expression lambda expression

    assign          shift and go to state 85


state 46

    (43) expression -> lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 43 (expression -> lambda expression .)
    }               reduce using rule 43 (expression -> lambda expression .)
    ;               reduce using rule 43 (expression -> lambda expression .)
    then            reduce using rule 43 (expression -> lambda expression .)
    ,               reduce using rule 43 (expression -> lambda expression .)
    ]               reduce using rule 43 (expression -> lambda expression .)
    do              reduce using rule 43 (expression -> lambda expression .)
    )               reduce using rule 43 (expression -> lambda expression .)
    in              reduce using rule 43 (expression -> lambda expression .)
    lambda          reduce using rule 43 (expression -> lambda expression .)
    else            reduce using rule 43 (expression -> lambda expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 43 (expression -> lambda expression .) ]
  ! eq              [ reduce using rule 43 (expression -> lambda expression .) ]
  ! =               [ reduce using rule 43 (expression -> lambda expression .) ]
  ! >               [ reduce using rule 43 (expression -> lambda expression .) ]
  ! <               [ reduce using rule 43 (expression -> lambda expression .) ]
  ! ge              [ reduce using rule 43 (expression -> lambda expression .) ]
  ! le              [ reduce using rule 43 (expression -> lambda expression .) ]
  ! neqs            [ reduce using rule 43 (expression -> lambda expression .) ]
  ! or              [ reduce using rule 43 (expression -> lambda expression .) ]
  ! nand            [ reduce using rule 43 (expression -> lambda expression .) ]
  ! +               [ reduce using rule 43 (expression -> lambda expression .) ]
  ! -               [ reduce using rule 43 (expression -> lambda expression .) ]
  ! *               [ reduce using rule 43 (expression -> lambda expression .) ]
  ! /               [ reduce using rule 43 (expression -> lambda expression .) ]


state 47

    (6) expression -> { sequence . }
    (24) sequence -> sequence . ; expression

    }               shift and go to state 86
    ;               shift and go to state 87


state 48

    (25) sequence -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    }               reduce using rule 25 (sequence -> expression .)
    ;               reduce using rule 25 (sequence -> expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 49

    (20) expression -> struct { . sequence }
    (24) sequence -> . sequence ; expression
    (25) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    sequence                       shift and go to state 88
    expression                     shift and go to state 48
    dot_expression                 shift and go to state 23

state 50

    (21) expression -> - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 21 (expression -> - expression .)
    eq              reduce using rule 21 (expression -> - expression .)
    =               reduce using rule 21 (expression -> - expression .)
    >               reduce using rule 21 (expression -> - expression .)
    <               reduce using rule 21 (expression -> - expression .)
    ge              reduce using rule 21 (expression -> - expression .)
    le              reduce using rule 21 (expression -> - expression .)
    neqs            reduce using rule 21 (expression -> - expression .)
    or              reduce using rule 21 (expression -> - expression .)
    nand            reduce using rule 21 (expression -> - expression .)
    +               reduce using rule 21 (expression -> - expression .)
    -               reduce using rule 21 (expression -> - expression .)
    *               reduce using rule 21 (expression -> - expression .)
    /               reduce using rule 21 (expression -> - expression .)
    $end            reduce using rule 21 (expression -> - expression .)
    }               reduce using rule 21 (expression -> - expression .)
    ;               reduce using rule 21 (expression -> - expression .)
    then            reduce using rule 21 (expression -> - expression .)
    ,               reduce using rule 21 (expression -> - expression .)
    ]               reduce using rule 21 (expression -> - expression .)
    do              reduce using rule 21 (expression -> - expression .)
    )               reduce using rule 21 (expression -> - expression .)
    in              reduce using rule 21 (expression -> - expression .)
    lambda          reduce using rule 21 (expression -> - expression .)
    else            reduce using rule 21 (expression -> - expression .)

  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 51

    (23) expression -> if expression . then expression
    (31) expression -> if expression . then expression else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    then            shift and go to state 89
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 52

    (30) expression -> [ id_list . ]

    ]               shift and go to state 90


state 53

    (32) id_list -> expression . , id_list
    (33) id_list -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    ,               shift and go to state 91
    ]               reduce using rule 33 (id_list -> expression .)
    )               reduce using rule 33 (id_list -> expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 54

    (35) expression -> not expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 35 (expression -> not expression .)
    eq              reduce using rule 35 (expression -> not expression .)
    =               reduce using rule 35 (expression -> not expression .)
    >               reduce using rule 35 (expression -> not expression .)
    <               reduce using rule 35 (expression -> not expression .)
    ge              reduce using rule 35 (expression -> not expression .)
    le              reduce using rule 35 (expression -> not expression .)
    neqs            reduce using rule 35 (expression -> not expression .)
    or              reduce using rule 35 (expression -> not expression .)
    nand            reduce using rule 35 (expression -> not expression .)
    +               reduce using rule 35 (expression -> not expression .)
    -               reduce using rule 35 (expression -> not expression .)
    *               reduce using rule 35 (expression -> not expression .)
    /               reduce using rule 35 (expression -> not expression .)
    $end            reduce using rule 35 (expression -> not expression .)
    }               reduce using rule 35 (expression -> not expression .)
    ;               reduce using rule 35 (expression -> not expression .)
    then            reduce using rule 35 (expression -> not expression .)
    ,               reduce using rule 35 (expression -> not expression .)
    ]               reduce using rule 35 (expression -> not expression .)
    do              reduce using rule 35 (expression -> not expression .)
    )               reduce using rule 35 (expression -> not expression .)
    in              reduce using rule 35 (expression -> not expression .)
    lambda          reduce using rule 35 (expression -> not expression .)
    else            reduce using rule 35 (expression -> not expression .)

  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 55

    (36) expression -> loop expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    do              shift and go to state 92
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 56

    (37) expression -> ( id_list . )
    (45) expression -> ( id_list . ) lambda expression

    )               shift and go to state 93


state 57

    (40) expression -> ( expression . )
    (32) id_list -> expression . , id_list
    (33) id_list -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 94
    ,               shift and go to state 91
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! )               [ reduce using rule 33 (id_list -> expression .) ]


state 58

    (41) expression -> extend ID . { sequence }

    {               shift and go to state 95


state 59

    (42) expression -> for expression . ; expression ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    ;               shift and go to state 96
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 60

    (52) expression -> while expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    do              shift and go to state 97
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 61

    (54) expression -> dot_expression ( . )
    (55) expression -> dot_expression ( . id_list )
    (32) id_list -> . expression , id_list
    (33) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    )               shift and go to state 98
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    dot_expression                 shift and go to state 23
    id_list                        shift and go to state 99
    expression                     shift and go to state 53

state 62

    (7) expression -> expression and expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 7 (expression -> expression and expression .)
    or              reduce using rule 7 (expression -> expression and expression .)
    nand            reduce using rule 7 (expression -> expression and expression .)
    $end            reduce using rule 7 (expression -> expression and expression .)
    }               reduce using rule 7 (expression -> expression and expression .)
    ;               reduce using rule 7 (expression -> expression and expression .)
    then            reduce using rule 7 (expression -> expression and expression .)
    ,               reduce using rule 7 (expression -> expression and expression .)
    ]               reduce using rule 7 (expression -> expression and expression .)
    do              reduce using rule 7 (expression -> expression and expression .)
    )               reduce using rule 7 (expression -> expression and expression .)
    in              reduce using rule 7 (expression -> expression and expression .)
    lambda          reduce using rule 7 (expression -> expression and expression .)
    else            reduce using rule 7 (expression -> expression and expression .)
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! eq              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 7 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 24 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 63

    (8) expression -> expression eq expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 8 (expression -> expression eq expression .)
    eq              reduce using rule 8 (expression -> expression eq expression .)
    =               reduce using rule 8 (expression -> expression eq expression .)
    neqs            reduce using rule 8 (expression -> expression eq expression .)
    or              reduce using rule 8 (expression -> expression eq expression .)
    nand            reduce using rule 8 (expression -> expression eq expression .)
    $end            reduce using rule 8 (expression -> expression eq expression .)
    }               reduce using rule 8 (expression -> expression eq expression .)
    ;               reduce using rule 8 (expression -> expression eq expression .)
    then            reduce using rule 8 (expression -> expression eq expression .)
    ,               reduce using rule 8 (expression -> expression eq expression .)
    ]               reduce using rule 8 (expression -> expression eq expression .)
    do              reduce using rule 8 (expression -> expression eq expression .)
    )               reduce using rule 8 (expression -> expression eq expression .)
    in              reduce using rule 8 (expression -> expression eq expression .)
    lambda          reduce using rule 8 (expression -> expression eq expression .)
    else            reduce using rule 8 (expression -> expression eq expression .)
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! >               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 64

    (9) expression -> expression = expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression = expression .)
    eq              reduce using rule 9 (expression -> expression = expression .)
    =               reduce using rule 9 (expression -> expression = expression .)
    neqs            reduce using rule 9 (expression -> expression = expression .)
    or              reduce using rule 9 (expression -> expression = expression .)
    nand            reduce using rule 9 (expression -> expression = expression .)
    $end            reduce using rule 9 (expression -> expression = expression .)
    }               reduce using rule 9 (expression -> expression = expression .)
    ;               reduce using rule 9 (expression -> expression = expression .)
    then            reduce using rule 9 (expression -> expression = expression .)
    ,               reduce using rule 9 (expression -> expression = expression .)
    ]               reduce using rule 9 (expression -> expression = expression .)
    do              reduce using rule 9 (expression -> expression = expression .)
    )               reduce using rule 9 (expression -> expression = expression .)
    in              reduce using rule 9 (expression -> expression = expression .)
    lambda          reduce using rule 9 (expression -> expression = expression .)
    else            reduce using rule 9 (expression -> expression = expression .)
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! >               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 65

    (10) expression -> expression > expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression > expression .)
    eq              reduce using rule 10 (expression -> expression > expression .)
    =               reduce using rule 10 (expression -> expression > expression .)
    >               reduce using rule 10 (expression -> expression > expression .)
    <               reduce using rule 10 (expression -> expression > expression .)
    ge              reduce using rule 10 (expression -> expression > expression .)
    le              reduce using rule 10 (expression -> expression > expression .)
    neqs            reduce using rule 10 (expression -> expression > expression .)
    or              reduce using rule 10 (expression -> expression > expression .)
    nand            reduce using rule 10 (expression -> expression > expression .)
    $end            reduce using rule 10 (expression -> expression > expression .)
    }               reduce using rule 10 (expression -> expression > expression .)
    ;               reduce using rule 10 (expression -> expression > expression .)
    then            reduce using rule 10 (expression -> expression > expression .)
    ,               reduce using rule 10 (expression -> expression > expression .)
    ]               reduce using rule 10 (expression -> expression > expression .)
    do              reduce using rule 10 (expression -> expression > expression .)
    )               reduce using rule 10 (expression -> expression > expression .)
    in              reduce using rule 10 (expression -> expression > expression .)
    lambda          reduce using rule 10 (expression -> expression > expression .)
    else            reduce using rule 10 (expression -> expression > expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 66

    (11) expression -> expression < expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression < expression .)
    eq              reduce using rule 11 (expression -> expression < expression .)
    =               reduce using rule 11 (expression -> expression < expression .)
    >               reduce using rule 11 (expression -> expression < expression .)
    <               reduce using rule 11 (expression -> expression < expression .)
    ge              reduce using rule 11 (expression -> expression < expression .)
    le              reduce using rule 11 (expression -> expression < expression .)
    neqs            reduce using rule 11 (expression -> expression < expression .)
    or              reduce using rule 11 (expression -> expression < expression .)
    nand            reduce using rule 11 (expression -> expression < expression .)
    $end            reduce using rule 11 (expression -> expression < expression .)
    }               reduce using rule 11 (expression -> expression < expression .)
    ;               reduce using rule 11 (expression -> expression < expression .)
    then            reduce using rule 11 (expression -> expression < expression .)
    ,               reduce using rule 11 (expression -> expression < expression .)
    ]               reduce using rule 11 (expression -> expression < expression .)
    do              reduce using rule 11 (expression -> expression < expression .)
    )               reduce using rule 11 (expression -> expression < expression .)
    in              reduce using rule 11 (expression -> expression < expression .)
    lambda          reduce using rule 11 (expression -> expression < expression .)
    else            reduce using rule 11 (expression -> expression < expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 67

    (12) expression -> expression ge expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression ge expression .)
    eq              reduce using rule 12 (expression -> expression ge expression .)
    =               reduce using rule 12 (expression -> expression ge expression .)
    >               reduce using rule 12 (expression -> expression ge expression .)
    <               reduce using rule 12 (expression -> expression ge expression .)
    ge              reduce using rule 12 (expression -> expression ge expression .)
    le              reduce using rule 12 (expression -> expression ge expression .)
    neqs            reduce using rule 12 (expression -> expression ge expression .)
    or              reduce using rule 12 (expression -> expression ge expression .)
    nand            reduce using rule 12 (expression -> expression ge expression .)
    $end            reduce using rule 12 (expression -> expression ge expression .)
    }               reduce using rule 12 (expression -> expression ge expression .)
    ;               reduce using rule 12 (expression -> expression ge expression .)
    then            reduce using rule 12 (expression -> expression ge expression .)
    ,               reduce using rule 12 (expression -> expression ge expression .)
    ]               reduce using rule 12 (expression -> expression ge expression .)
    do              reduce using rule 12 (expression -> expression ge expression .)
    )               reduce using rule 12 (expression -> expression ge expression .)
    in              reduce using rule 12 (expression -> expression ge expression .)
    lambda          reduce using rule 12 (expression -> expression ge expression .)
    else            reduce using rule 12 (expression -> expression ge expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 68

    (13) expression -> expression le expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression le expression .)
    eq              reduce using rule 13 (expression -> expression le expression .)
    =               reduce using rule 13 (expression -> expression le expression .)
    >               reduce using rule 13 (expression -> expression le expression .)
    <               reduce using rule 13 (expression -> expression le expression .)
    ge              reduce using rule 13 (expression -> expression le expression .)
    le              reduce using rule 13 (expression -> expression le expression .)
    neqs            reduce using rule 13 (expression -> expression le expression .)
    or              reduce using rule 13 (expression -> expression le expression .)
    nand            reduce using rule 13 (expression -> expression le expression .)
    $end            reduce using rule 13 (expression -> expression le expression .)
    }               reduce using rule 13 (expression -> expression le expression .)
    ;               reduce using rule 13 (expression -> expression le expression .)
    then            reduce using rule 13 (expression -> expression le expression .)
    ,               reduce using rule 13 (expression -> expression le expression .)
    ]               reduce using rule 13 (expression -> expression le expression .)
    do              reduce using rule 13 (expression -> expression le expression .)
    )               reduce using rule 13 (expression -> expression le expression .)
    in              reduce using rule 13 (expression -> expression le expression .)
    lambda          reduce using rule 13 (expression -> expression le expression .)
    else            reduce using rule 13 (expression -> expression le expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 69

    (14) expression -> expression neqs expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression neqs expression .)
    eq              reduce using rule 14 (expression -> expression neqs expression .)
    =               reduce using rule 14 (expression -> expression neqs expression .)
    neqs            reduce using rule 14 (expression -> expression neqs expression .)
    or              reduce using rule 14 (expression -> expression neqs expression .)
    nand            reduce using rule 14 (expression -> expression neqs expression .)
    $end            reduce using rule 14 (expression -> expression neqs expression .)
    }               reduce using rule 14 (expression -> expression neqs expression .)
    ;               reduce using rule 14 (expression -> expression neqs expression .)
    then            reduce using rule 14 (expression -> expression neqs expression .)
    ,               reduce using rule 14 (expression -> expression neqs expression .)
    ]               reduce using rule 14 (expression -> expression neqs expression .)
    do              reduce using rule 14 (expression -> expression neqs expression .)
    )               reduce using rule 14 (expression -> expression neqs expression .)
    in              reduce using rule 14 (expression -> expression neqs expression .)
    lambda          reduce using rule 14 (expression -> expression neqs expression .)
    else            reduce using rule 14 (expression -> expression neqs expression .)
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! >               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 70

    (15) expression -> expression or expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    or              reduce using rule 15 (expression -> expression or expression .)
    $end            reduce using rule 15 (expression -> expression or expression .)
    }               reduce using rule 15 (expression -> expression or expression .)
    ;               reduce using rule 15 (expression -> expression or expression .)
    then            reduce using rule 15 (expression -> expression or expression .)
    ,               reduce using rule 15 (expression -> expression or expression .)
    ]               reduce using rule 15 (expression -> expression or expression .)
    do              reduce using rule 15 (expression -> expression or expression .)
    )               reduce using rule 15 (expression -> expression or expression .)
    in              reduce using rule 15 (expression -> expression or expression .)
    lambda          reduce using rule 15 (expression -> expression or expression .)
    else            reduce using rule 15 (expression -> expression or expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 15 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 32 ]


state 71

    (16) expression -> expression nand expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 16 (expression -> expression nand expression .)
    or              reduce using rule 16 (expression -> expression nand expression .)
    nand            reduce using rule 16 (expression -> expression nand expression .)
    $end            reduce using rule 16 (expression -> expression nand expression .)
    }               reduce using rule 16 (expression -> expression nand expression .)
    ;               reduce using rule 16 (expression -> expression nand expression .)
    then            reduce using rule 16 (expression -> expression nand expression .)
    ,               reduce using rule 16 (expression -> expression nand expression .)
    ]               reduce using rule 16 (expression -> expression nand expression .)
    do              reduce using rule 16 (expression -> expression nand expression .)
    )               reduce using rule 16 (expression -> expression nand expression .)
    in              reduce using rule 16 (expression -> expression nand expression .)
    lambda          reduce using rule 16 (expression -> expression nand expression .)
    else            reduce using rule 16 (expression -> expression nand expression .)
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! eq              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 24 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 72

    (26) expression -> expression + expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 26 (expression -> expression + expression .)
    eq              reduce using rule 26 (expression -> expression + expression .)
    =               reduce using rule 26 (expression -> expression + expression .)
    >               reduce using rule 26 (expression -> expression + expression .)
    <               reduce using rule 26 (expression -> expression + expression .)
    ge              reduce using rule 26 (expression -> expression + expression .)
    le              reduce using rule 26 (expression -> expression + expression .)
    neqs            reduce using rule 26 (expression -> expression + expression .)
    or              reduce using rule 26 (expression -> expression + expression .)
    nand            reduce using rule 26 (expression -> expression + expression .)
    +               reduce using rule 26 (expression -> expression + expression .)
    -               reduce using rule 26 (expression -> expression + expression .)
    $end            reduce using rule 26 (expression -> expression + expression .)
    }               reduce using rule 26 (expression -> expression + expression .)
    ;               reduce using rule 26 (expression -> expression + expression .)
    then            reduce using rule 26 (expression -> expression + expression .)
    ,               reduce using rule 26 (expression -> expression + expression .)
    ]               reduce using rule 26 (expression -> expression + expression .)
    do              reduce using rule 26 (expression -> expression + expression .)
    )               reduce using rule 26 (expression -> expression + expression .)
    in              reduce using rule 26 (expression -> expression + expression .)
    lambda          reduce using rule 26 (expression -> expression + expression .)
    else            reduce using rule 26 (expression -> expression + expression .)
    *               shift and go to state 36
    /               shift and go to state 37

  ! *               [ reduce using rule 26 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]


state 73

    (27) expression -> expression - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 27 (expression -> expression - expression .)
    eq              reduce using rule 27 (expression -> expression - expression .)
    =               reduce using rule 27 (expression -> expression - expression .)
    >               reduce using rule 27 (expression -> expression - expression .)
    <               reduce using rule 27 (expression -> expression - expression .)
    ge              reduce using rule 27 (expression -> expression - expression .)
    le              reduce using rule 27 (expression -> expression - expression .)
    neqs            reduce using rule 27 (expression -> expression - expression .)
    or              reduce using rule 27 (expression -> expression - expression .)
    nand            reduce using rule 27 (expression -> expression - expression .)
    +               reduce using rule 27 (expression -> expression - expression .)
    -               reduce using rule 27 (expression -> expression - expression .)
    $end            reduce using rule 27 (expression -> expression - expression .)
    }               reduce using rule 27 (expression -> expression - expression .)
    ;               reduce using rule 27 (expression -> expression - expression .)
    then            reduce using rule 27 (expression -> expression - expression .)
    ,               reduce using rule 27 (expression -> expression - expression .)
    ]               reduce using rule 27 (expression -> expression - expression .)
    do              reduce using rule 27 (expression -> expression - expression .)
    )               reduce using rule 27 (expression -> expression - expression .)
    in              reduce using rule 27 (expression -> expression - expression .)
    lambda          reduce using rule 27 (expression -> expression - expression .)
    else            reduce using rule 27 (expression -> expression - expression .)
    *               shift and go to state 36
    /               shift and go to state 37

  ! *               [ reduce using rule 27 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]


state 74

    (28) expression -> expression * expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 28 (expression -> expression * expression .)
    eq              reduce using rule 28 (expression -> expression * expression .)
    =               reduce using rule 28 (expression -> expression * expression .)
    >               reduce using rule 28 (expression -> expression * expression .)
    <               reduce using rule 28 (expression -> expression * expression .)
    ge              reduce using rule 28 (expression -> expression * expression .)
    le              reduce using rule 28 (expression -> expression * expression .)
    neqs            reduce using rule 28 (expression -> expression * expression .)
    or              reduce using rule 28 (expression -> expression * expression .)
    nand            reduce using rule 28 (expression -> expression * expression .)
    +               reduce using rule 28 (expression -> expression * expression .)
    -               reduce using rule 28 (expression -> expression * expression .)
    *               reduce using rule 28 (expression -> expression * expression .)
    /               reduce using rule 28 (expression -> expression * expression .)
    $end            reduce using rule 28 (expression -> expression * expression .)
    }               reduce using rule 28 (expression -> expression * expression .)
    ;               reduce using rule 28 (expression -> expression * expression .)
    then            reduce using rule 28 (expression -> expression * expression .)
    ,               reduce using rule 28 (expression -> expression * expression .)
    ]               reduce using rule 28 (expression -> expression * expression .)
    do              reduce using rule 28 (expression -> expression * expression .)
    )               reduce using rule 28 (expression -> expression * expression .)
    in              reduce using rule 28 (expression -> expression * expression .)
    lambda          reduce using rule 28 (expression -> expression * expression .)
    else            reduce using rule 28 (expression -> expression * expression .)

  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 75

    (29) expression -> expression / expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    and             reduce using rule 29 (expression -> expression / expression .)
    eq              reduce using rule 29 (expression -> expression / expression .)
    =               reduce using rule 29 (expression -> expression / expression .)
    >               reduce using rule 29 (expression -> expression / expression .)
    <               reduce using rule 29 (expression -> expression / expression .)
    ge              reduce using rule 29 (expression -> expression / expression .)
    le              reduce using rule 29 (expression -> expression / expression .)
    neqs            reduce using rule 29 (expression -> expression / expression .)
    or              reduce using rule 29 (expression -> expression / expression .)
    nand            reduce using rule 29 (expression -> expression / expression .)
    +               reduce using rule 29 (expression -> expression / expression .)
    -               reduce using rule 29 (expression -> expression / expression .)
    *               reduce using rule 29 (expression -> expression / expression .)
    /               reduce using rule 29 (expression -> expression / expression .)
    $end            reduce using rule 29 (expression -> expression / expression .)
    }               reduce using rule 29 (expression -> expression / expression .)
    ;               reduce using rule 29 (expression -> expression / expression .)
    then            reduce using rule 29 (expression -> expression / expression .)
    ,               reduce using rule 29 (expression -> expression / expression .)
    ]               reduce using rule 29 (expression -> expression / expression .)
    do              reduce using rule 29 (expression -> expression / expression .)
    )               reduce using rule 29 (expression -> expression / expression .)
    in              reduce using rule 29 (expression -> expression / expression .)
    lambda          reduce using rule 29 (expression -> expression / expression .)
    else            reduce using rule 29 (expression -> expression / expression .)

  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 76

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 100
    dot_expression                 shift and go to state 23

state 77

    (18) expression -> ID assign expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 18 (expression -> ID assign expression .)
    }               reduce using rule 18 (expression -> ID assign expression .)
    ;               reduce using rule 18 (expression -> ID assign expression .)
    then            reduce using rule 18 (expression -> ID assign expression .)
    ,               reduce using rule 18 (expression -> ID assign expression .)
    ]               reduce using rule 18 (expression -> ID assign expression .)
    do              reduce using rule 18 (expression -> ID assign expression .)
    )               reduce using rule 18 (expression -> ID assign expression .)
    in              reduce using rule 18 (expression -> ID assign expression .)
    lambda          reduce using rule 18 (expression -> ID assign expression .)
    else            reduce using rule 18 (expression -> ID assign expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 18 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 18 (expression -> ID assign expression .) ]


state 78

    (34) expression -> ID [ NUMBER . ]

    ]               shift and go to state 101


state 79

    (44) expression -> ID lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 44 (expression -> ID lambda expression .)
    }               reduce using rule 44 (expression -> ID lambda expression .)
    ;               reduce using rule 44 (expression -> ID lambda expression .)
    then            reduce using rule 44 (expression -> ID lambda expression .)
    ,               reduce using rule 44 (expression -> ID lambda expression .)
    ]               reduce using rule 44 (expression -> ID lambda expression .)
    do              reduce using rule 44 (expression -> ID lambda expression .)
    )               reduce using rule 44 (expression -> ID lambda expression .)
    in              reduce using rule 44 (expression -> ID lambda expression .)
    lambda          reduce using rule 44 (expression -> ID lambda expression .)
    else            reduce using rule 44 (expression -> ID lambda expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! eq              [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! =               [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! >               [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! <               [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! ge              [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! le              [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! neqs            [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! or              [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! nand            [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! +               [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! -               [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! *               [ reduce using rule 44 (expression -> ID lambda expression .) ]
  ! /               [ reduce using rule 44 (expression -> ID lambda expression .) ]


state 80

    (56) expression -> ID ( ) .

    and             reduce using rule 56 (expression -> ID ( ) .)
    eq              reduce using rule 56 (expression -> ID ( ) .)
    =               reduce using rule 56 (expression -> ID ( ) .)
    >               reduce using rule 56 (expression -> ID ( ) .)
    <               reduce using rule 56 (expression -> ID ( ) .)
    ge              reduce using rule 56 (expression -> ID ( ) .)
    le              reduce using rule 56 (expression -> ID ( ) .)
    neqs            reduce using rule 56 (expression -> ID ( ) .)
    or              reduce using rule 56 (expression -> ID ( ) .)
    nand            reduce using rule 56 (expression -> ID ( ) .)
    +               reduce using rule 56 (expression -> ID ( ) .)
    -               reduce using rule 56 (expression -> ID ( ) .)
    *               reduce using rule 56 (expression -> ID ( ) .)
    /               reduce using rule 56 (expression -> ID ( ) .)
    $end            reduce using rule 56 (expression -> ID ( ) .)
    }               reduce using rule 56 (expression -> ID ( ) .)
    ;               reduce using rule 56 (expression -> ID ( ) .)
    then            reduce using rule 56 (expression -> ID ( ) .)
    ,               reduce using rule 56 (expression -> ID ( ) .)
    ]               reduce using rule 56 (expression -> ID ( ) .)
    do              reduce using rule 56 (expression -> ID ( ) .)
    )               reduce using rule 56 (expression -> ID ( ) .)
    in              reduce using rule 56 (expression -> ID ( ) .)
    lambda          reduce using rule 56 (expression -> ID ( ) .)
    else            reduce using rule 56 (expression -> ID ( ) .)


state 81

    (57) expression -> ID ( id_list . )

    )               shift and go to state 102


state 82

    (46) dot_expression -> ID . ID .

    (               reduce using rule 46 (dot_expression -> ID . ID .)
    and             reduce using rule 46 (dot_expression -> ID . ID .)
    eq              reduce using rule 46 (dot_expression -> ID . ID .)
    =               reduce using rule 46 (dot_expression -> ID . ID .)
    >               reduce using rule 46 (dot_expression -> ID . ID .)
    <               reduce using rule 46 (dot_expression -> ID . ID .)
    ge              reduce using rule 46 (dot_expression -> ID . ID .)
    le              reduce using rule 46 (dot_expression -> ID . ID .)
    neqs            reduce using rule 46 (dot_expression -> ID . ID .)
    or              reduce using rule 46 (dot_expression -> ID . ID .)
    nand            reduce using rule 46 (dot_expression -> ID . ID .)
    +               reduce using rule 46 (dot_expression -> ID . ID .)
    -               reduce using rule 46 (dot_expression -> ID . ID .)
    *               reduce using rule 46 (dot_expression -> ID . ID .)
    /               reduce using rule 46 (dot_expression -> ID . ID .)
    $end            reduce using rule 46 (dot_expression -> ID . ID .)
    }               reduce using rule 46 (dot_expression -> ID . ID .)
    ;               reduce using rule 46 (dot_expression -> ID . ID .)
    then            reduce using rule 46 (dot_expression -> ID . ID .)
    ,               reduce using rule 46 (dot_expression -> ID . ID .)
    ]               reduce using rule 46 (dot_expression -> ID . ID .)
    do              reduce using rule 46 (dot_expression -> ID . ID .)
    )               reduce using rule 46 (dot_expression -> ID . ID .)
    in              reduce using rule 46 (dot_expression -> ID . ID .)
    lambda          reduce using rule 46 (dot_expression -> ID . ID .)
    else            reduce using rule 46 (dot_expression -> ID . ID .)


state 83

    (47) dot_expression -> ID . . . ID
    (48) dot_expression -> ID . . . . ID
    (49) dot_expression -> ID . . . . . ID
    (50) dot_expression -> ID . . . . . . ID
    (51) dot_expression -> ID . . . . . . . ID

    ID              shift and go to state 103
    .               shift and go to state 104


state 84

    (4) expression -> import ID as . ID

    ID              shift and go to state 105


state 85

    (5) expression -> letrec ID assign . expression lambda expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 106
    dot_expression                 shift and go to state 23

state 86

    (6) expression -> { sequence } .

    and             reduce using rule 6 (expression -> { sequence } .)
    eq              reduce using rule 6 (expression -> { sequence } .)
    =               reduce using rule 6 (expression -> { sequence } .)
    >               reduce using rule 6 (expression -> { sequence } .)
    <               reduce using rule 6 (expression -> { sequence } .)
    ge              reduce using rule 6 (expression -> { sequence } .)
    le              reduce using rule 6 (expression -> { sequence } .)
    neqs            reduce using rule 6 (expression -> { sequence } .)
    or              reduce using rule 6 (expression -> { sequence } .)
    nand            reduce using rule 6 (expression -> { sequence } .)
    +               reduce using rule 6 (expression -> { sequence } .)
    -               reduce using rule 6 (expression -> { sequence } .)
    *               reduce using rule 6 (expression -> { sequence } .)
    /               reduce using rule 6 (expression -> { sequence } .)
    $end            reduce using rule 6 (expression -> { sequence } .)
    }               reduce using rule 6 (expression -> { sequence } .)
    ;               reduce using rule 6 (expression -> { sequence } .)
    then            reduce using rule 6 (expression -> { sequence } .)
    ,               reduce using rule 6 (expression -> { sequence } .)
    ]               reduce using rule 6 (expression -> { sequence } .)
    do              reduce using rule 6 (expression -> { sequence } .)
    )               reduce using rule 6 (expression -> { sequence } .)
    in              reduce using rule 6 (expression -> { sequence } .)
    lambda          reduce using rule 6 (expression -> { sequence } .)
    else            reduce using rule 6 (expression -> { sequence } .)


state 87

    (24) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 107
    dot_expression                 shift and go to state 23

state 88

    (20) expression -> struct { sequence . }
    (24) sequence -> sequence . ; expression

    }               shift and go to state 108
    ;               shift and go to state 87


state 89

    (23) expression -> if expression then . expression
    (31) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 109
    dot_expression                 shift and go to state 23

state 90

    (30) expression -> [ id_list ] .

    and             reduce using rule 30 (expression -> [ id_list ] .)
    eq              reduce using rule 30 (expression -> [ id_list ] .)
    =               reduce using rule 30 (expression -> [ id_list ] .)
    >               reduce using rule 30 (expression -> [ id_list ] .)
    <               reduce using rule 30 (expression -> [ id_list ] .)
    ge              reduce using rule 30 (expression -> [ id_list ] .)
    le              reduce using rule 30 (expression -> [ id_list ] .)
    neqs            reduce using rule 30 (expression -> [ id_list ] .)
    or              reduce using rule 30 (expression -> [ id_list ] .)
    nand            reduce using rule 30 (expression -> [ id_list ] .)
    +               reduce using rule 30 (expression -> [ id_list ] .)
    -               reduce using rule 30 (expression -> [ id_list ] .)
    *               reduce using rule 30 (expression -> [ id_list ] .)
    /               reduce using rule 30 (expression -> [ id_list ] .)
    $end            reduce using rule 30 (expression -> [ id_list ] .)
    }               reduce using rule 30 (expression -> [ id_list ] .)
    ;               reduce using rule 30 (expression -> [ id_list ] .)
    then            reduce using rule 30 (expression -> [ id_list ] .)
    ,               reduce using rule 30 (expression -> [ id_list ] .)
    ]               reduce using rule 30 (expression -> [ id_list ] .)
    do              reduce using rule 30 (expression -> [ id_list ] .)
    )               reduce using rule 30 (expression -> [ id_list ] .)
    in              reduce using rule 30 (expression -> [ id_list ] .)
    lambda          reduce using rule 30 (expression -> [ id_list ] .)
    else            reduce using rule 30 (expression -> [ id_list ] .)


state 91

    (32) id_list -> expression , . id_list
    (32) id_list -> . expression , id_list
    (33) id_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 53
    id_list                        shift and go to state 110
    dot_expression                 shift and go to state 23

state 92

    (36) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 111
    dot_expression                 shift and go to state 23

state 93

    (37) expression -> ( id_list ) .
    (45) expression -> ( id_list ) . lambda expression

  ! shift/reduce conflict for lambda resolved as shift
    and             reduce using rule 37 (expression -> ( id_list ) .)
    eq              reduce using rule 37 (expression -> ( id_list ) .)
    =               reduce using rule 37 (expression -> ( id_list ) .)
    >               reduce using rule 37 (expression -> ( id_list ) .)
    <               reduce using rule 37 (expression -> ( id_list ) .)
    ge              reduce using rule 37 (expression -> ( id_list ) .)
    le              reduce using rule 37 (expression -> ( id_list ) .)
    neqs            reduce using rule 37 (expression -> ( id_list ) .)
    or              reduce using rule 37 (expression -> ( id_list ) .)
    nand            reduce using rule 37 (expression -> ( id_list ) .)
    +               reduce using rule 37 (expression -> ( id_list ) .)
    -               reduce using rule 37 (expression -> ( id_list ) .)
    *               reduce using rule 37 (expression -> ( id_list ) .)
    /               reduce using rule 37 (expression -> ( id_list ) .)
    $end            reduce using rule 37 (expression -> ( id_list ) .)
    }               reduce using rule 37 (expression -> ( id_list ) .)
    ;               reduce using rule 37 (expression -> ( id_list ) .)
    then            reduce using rule 37 (expression -> ( id_list ) .)
    ,               reduce using rule 37 (expression -> ( id_list ) .)
    ]               reduce using rule 37 (expression -> ( id_list ) .)
    do              reduce using rule 37 (expression -> ( id_list ) .)
    )               reduce using rule 37 (expression -> ( id_list ) .)
    in              reduce using rule 37 (expression -> ( id_list ) .)
    else            reduce using rule 37 (expression -> ( id_list ) .)
    lambda          shift and go to state 112

  ! lambda          [ reduce using rule 37 (expression -> ( id_list ) .) ]


state 94

    (40) expression -> ( expression ) .

    and             reduce using rule 40 (expression -> ( expression ) .)
    eq              reduce using rule 40 (expression -> ( expression ) .)
    =               reduce using rule 40 (expression -> ( expression ) .)
    >               reduce using rule 40 (expression -> ( expression ) .)
    <               reduce using rule 40 (expression -> ( expression ) .)
    ge              reduce using rule 40 (expression -> ( expression ) .)
    le              reduce using rule 40 (expression -> ( expression ) .)
    neqs            reduce using rule 40 (expression -> ( expression ) .)
    or              reduce using rule 40 (expression -> ( expression ) .)
    nand            reduce using rule 40 (expression -> ( expression ) .)
    +               reduce using rule 40 (expression -> ( expression ) .)
    -               reduce using rule 40 (expression -> ( expression ) .)
    *               reduce using rule 40 (expression -> ( expression ) .)
    /               reduce using rule 40 (expression -> ( expression ) .)
    $end            reduce using rule 40 (expression -> ( expression ) .)
    }               reduce using rule 40 (expression -> ( expression ) .)
    ;               reduce using rule 40 (expression -> ( expression ) .)
    then            reduce using rule 40 (expression -> ( expression ) .)
    ,               reduce using rule 40 (expression -> ( expression ) .)
    ]               reduce using rule 40 (expression -> ( expression ) .)
    do              reduce using rule 40 (expression -> ( expression ) .)
    )               reduce using rule 40 (expression -> ( expression ) .)
    in              reduce using rule 40 (expression -> ( expression ) .)
    lambda          reduce using rule 40 (expression -> ( expression ) .)
    else            reduce using rule 40 (expression -> ( expression ) .)


state 95

    (41) expression -> extend ID { . sequence }
    (24) sequence -> . sequence ; expression
    (25) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    sequence                       shift and go to state 113
    expression                     shift and go to state 48
    dot_expression                 shift and go to state 23

state 96

    (42) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 114
    dot_expression                 shift and go to state 23

state 97

    (52) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 115
    dot_expression                 shift and go to state 23

state 98

    (54) expression -> dot_expression ( ) .

    and             reduce using rule 54 (expression -> dot_expression ( ) .)
    eq              reduce using rule 54 (expression -> dot_expression ( ) .)
    =               reduce using rule 54 (expression -> dot_expression ( ) .)
    >               reduce using rule 54 (expression -> dot_expression ( ) .)
    <               reduce using rule 54 (expression -> dot_expression ( ) .)
    ge              reduce using rule 54 (expression -> dot_expression ( ) .)
    le              reduce using rule 54 (expression -> dot_expression ( ) .)
    neqs            reduce using rule 54 (expression -> dot_expression ( ) .)
    or              reduce using rule 54 (expression -> dot_expression ( ) .)
    nand            reduce using rule 54 (expression -> dot_expression ( ) .)
    +               reduce using rule 54 (expression -> dot_expression ( ) .)
    -               reduce using rule 54 (expression -> dot_expression ( ) .)
    *               reduce using rule 54 (expression -> dot_expression ( ) .)
    /               reduce using rule 54 (expression -> dot_expression ( ) .)
    $end            reduce using rule 54 (expression -> dot_expression ( ) .)
    }               reduce using rule 54 (expression -> dot_expression ( ) .)
    ;               reduce using rule 54 (expression -> dot_expression ( ) .)
    then            reduce using rule 54 (expression -> dot_expression ( ) .)
    ,               reduce using rule 54 (expression -> dot_expression ( ) .)
    ]               reduce using rule 54 (expression -> dot_expression ( ) .)
    do              reduce using rule 54 (expression -> dot_expression ( ) .)
    )               reduce using rule 54 (expression -> dot_expression ( ) .)
    in              reduce using rule 54 (expression -> dot_expression ( ) .)
    lambda          reduce using rule 54 (expression -> dot_expression ( ) .)
    else            reduce using rule 54 (expression -> dot_expression ( ) .)


state 99

    (55) expression -> dot_expression ( id_list . )

    )               shift and go to state 116


state 100

    (2) expression -> local ID assign expression . in expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    in              shift and go to state 117
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 101

    (34) expression -> ID [ NUMBER ] .

    and             reduce using rule 34 (expression -> ID [ NUMBER ] .)
    eq              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    ge              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    le              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    neqs            reduce using rule 34 (expression -> ID [ NUMBER ] .)
    or              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    nand            reduce using rule 34 (expression -> ID [ NUMBER ] .)
    +               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 34 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    then            reduce using rule 34 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    do              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 34 (expression -> ID [ NUMBER ] .)
    in              reduce using rule 34 (expression -> ID [ NUMBER ] .)
    lambda          reduce using rule 34 (expression -> ID [ NUMBER ] .)
    else            reduce using rule 34 (expression -> ID [ NUMBER ] .)


state 102

    (57) expression -> ID ( id_list ) .

    and             reduce using rule 57 (expression -> ID ( id_list ) .)
    eq              reduce using rule 57 (expression -> ID ( id_list ) .)
    =               reduce using rule 57 (expression -> ID ( id_list ) .)
    >               reduce using rule 57 (expression -> ID ( id_list ) .)
    <               reduce using rule 57 (expression -> ID ( id_list ) .)
    ge              reduce using rule 57 (expression -> ID ( id_list ) .)
    le              reduce using rule 57 (expression -> ID ( id_list ) .)
    neqs            reduce using rule 57 (expression -> ID ( id_list ) .)
    or              reduce using rule 57 (expression -> ID ( id_list ) .)
    nand            reduce using rule 57 (expression -> ID ( id_list ) .)
    +               reduce using rule 57 (expression -> ID ( id_list ) .)
    -               reduce using rule 57 (expression -> ID ( id_list ) .)
    *               reduce using rule 57 (expression -> ID ( id_list ) .)
    /               reduce using rule 57 (expression -> ID ( id_list ) .)
    $end            reduce using rule 57 (expression -> ID ( id_list ) .)
    }               reduce using rule 57 (expression -> ID ( id_list ) .)
    ;               reduce using rule 57 (expression -> ID ( id_list ) .)
    then            reduce using rule 57 (expression -> ID ( id_list ) .)
    ,               reduce using rule 57 (expression -> ID ( id_list ) .)
    ]               reduce using rule 57 (expression -> ID ( id_list ) .)
    do              reduce using rule 57 (expression -> ID ( id_list ) .)
    )               reduce using rule 57 (expression -> ID ( id_list ) .)
    in              reduce using rule 57 (expression -> ID ( id_list ) .)
    lambda          reduce using rule 57 (expression -> ID ( id_list ) .)
    else            reduce using rule 57 (expression -> ID ( id_list ) .)


state 103

    (47) dot_expression -> ID . . ID .

    (               reduce using rule 47 (dot_expression -> ID . . ID .)
    and             reduce using rule 47 (dot_expression -> ID . . ID .)
    eq              reduce using rule 47 (dot_expression -> ID . . ID .)
    =               reduce using rule 47 (dot_expression -> ID . . ID .)
    >               reduce using rule 47 (dot_expression -> ID . . ID .)
    <               reduce using rule 47 (dot_expression -> ID . . ID .)
    ge              reduce using rule 47 (dot_expression -> ID . . ID .)
    le              reduce using rule 47 (dot_expression -> ID . . ID .)
    neqs            reduce using rule 47 (dot_expression -> ID . . ID .)
    or              reduce using rule 47 (dot_expression -> ID . . ID .)
    nand            reduce using rule 47 (dot_expression -> ID . . ID .)
    +               reduce using rule 47 (dot_expression -> ID . . ID .)
    -               reduce using rule 47 (dot_expression -> ID . . ID .)
    *               reduce using rule 47 (dot_expression -> ID . . ID .)
    /               reduce using rule 47 (dot_expression -> ID . . ID .)
    $end            reduce using rule 47 (dot_expression -> ID . . ID .)
    }               reduce using rule 47 (dot_expression -> ID . . ID .)
    ;               reduce using rule 47 (dot_expression -> ID . . ID .)
    then            reduce using rule 47 (dot_expression -> ID . . ID .)
    ,               reduce using rule 47 (dot_expression -> ID . . ID .)
    ]               reduce using rule 47 (dot_expression -> ID . . ID .)
    do              reduce using rule 47 (dot_expression -> ID . . ID .)
    )               reduce using rule 47 (dot_expression -> ID . . ID .)
    in              reduce using rule 47 (dot_expression -> ID . . ID .)
    lambda          reduce using rule 47 (dot_expression -> ID . . ID .)
    else            reduce using rule 47 (dot_expression -> ID . . ID .)


state 104

    (48) dot_expression -> ID . . . . ID
    (49) dot_expression -> ID . . . . . ID
    (50) dot_expression -> ID . . . . . . ID
    (51) dot_expression -> ID . . . . . . . ID

    ID              shift and go to state 118
    .               shift and go to state 119


state 105

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    ,               reduce using rule 4 (expression -> import ID as ID .)
    ]               reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    lambda          reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 106

    (5) expression -> letrec ID assign expression . lambda expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    lambda          shift and go to state 120
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 107

    (24) sequence -> sequence ; expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    }               reduce using rule 24 (sequence -> sequence ; expression .)
    ;               reduce using rule 24 (sequence -> sequence ; expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 108

    (20) expression -> struct { sequence } .

    and             reduce using rule 20 (expression -> struct { sequence } .)
    eq              reduce using rule 20 (expression -> struct { sequence } .)
    =               reduce using rule 20 (expression -> struct { sequence } .)
    >               reduce using rule 20 (expression -> struct { sequence } .)
    <               reduce using rule 20 (expression -> struct { sequence } .)
    ge              reduce using rule 20 (expression -> struct { sequence } .)
    le              reduce using rule 20 (expression -> struct { sequence } .)
    neqs            reduce using rule 20 (expression -> struct { sequence } .)
    or              reduce using rule 20 (expression -> struct { sequence } .)
    nand            reduce using rule 20 (expression -> struct { sequence } .)
    +               reduce using rule 20 (expression -> struct { sequence } .)
    -               reduce using rule 20 (expression -> struct { sequence } .)
    *               reduce using rule 20 (expression -> struct { sequence } .)
    /               reduce using rule 20 (expression -> struct { sequence } .)
    $end            reduce using rule 20 (expression -> struct { sequence } .)
    }               reduce using rule 20 (expression -> struct { sequence } .)
    ;               reduce using rule 20 (expression -> struct { sequence } .)
    then            reduce using rule 20 (expression -> struct { sequence } .)
    ,               reduce using rule 20 (expression -> struct { sequence } .)
    ]               reduce using rule 20 (expression -> struct { sequence } .)
    do              reduce using rule 20 (expression -> struct { sequence } .)
    )               reduce using rule 20 (expression -> struct { sequence } .)
    in              reduce using rule 20 (expression -> struct { sequence } .)
    lambda          reduce using rule 20 (expression -> struct { sequence } .)
    else            reduce using rule 20 (expression -> struct { sequence } .)


state 109

    (23) expression -> if expression then expression .
    (31) expression -> if expression then expression . else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 23 (expression -> if expression then expression .)
    }               reduce using rule 23 (expression -> if expression then expression .)
    ;               reduce using rule 23 (expression -> if expression then expression .)
    then            reduce using rule 23 (expression -> if expression then expression .)
    ,               reduce using rule 23 (expression -> if expression then expression .)
    ]               reduce using rule 23 (expression -> if expression then expression .)
    do              reduce using rule 23 (expression -> if expression then expression .)
    )               reduce using rule 23 (expression -> if expression then expression .)
    in              reduce using rule 23 (expression -> if expression then expression .)
    lambda          reduce using rule 23 (expression -> if expression then expression .)
    else            shift and go to state 121
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 23 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 23 (expression -> if expression then expression .) ]


state 110

    (32) id_list -> expression , id_list .

    ]               reduce using rule 32 (id_list -> expression , id_list .)
    )               reduce using rule 32 (id_list -> expression , id_list .)


state 111

    (36) expression -> loop expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 36 (expression -> loop expression do expression .)
    }               reduce using rule 36 (expression -> loop expression do expression .)
    ;               reduce using rule 36 (expression -> loop expression do expression .)
    then            reduce using rule 36 (expression -> loop expression do expression .)
    ,               reduce using rule 36 (expression -> loop expression do expression .)
    ]               reduce using rule 36 (expression -> loop expression do expression .)
    do              reduce using rule 36 (expression -> loop expression do expression .)
    )               reduce using rule 36 (expression -> loop expression do expression .)
    in              reduce using rule 36 (expression -> loop expression do expression .)
    lambda          reduce using rule 36 (expression -> loop expression do expression .)
    else            reduce using rule 36 (expression -> loop expression do expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 36 (expression -> loop expression do expression .) ]


state 112

    (45) expression -> ( id_list ) lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 122
    dot_expression                 shift and go to state 23

state 113

    (41) expression -> extend ID { sequence . }
    (24) sequence -> sequence . ; expression

    }               shift and go to state 123
    ;               shift and go to state 87


state 114

    (42) expression -> for expression ; expression . ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    ;               shift and go to state 124
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 115

    (52) expression -> while expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 52 (expression -> while expression do expression .)
    }               reduce using rule 52 (expression -> while expression do expression .)
    ;               reduce using rule 52 (expression -> while expression do expression .)
    then            reduce using rule 52 (expression -> while expression do expression .)
    ,               reduce using rule 52 (expression -> while expression do expression .)
    ]               reduce using rule 52 (expression -> while expression do expression .)
    do              reduce using rule 52 (expression -> while expression do expression .)
    )               reduce using rule 52 (expression -> while expression do expression .)
    in              reduce using rule 52 (expression -> while expression do expression .)
    lambda          reduce using rule 52 (expression -> while expression do expression .)
    else            reduce using rule 52 (expression -> while expression do expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 52 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 52 (expression -> while expression do expression .) ]


state 116

    (55) expression -> dot_expression ( id_list ) .

    and             reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    eq              reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    =               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    >               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    <               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    ge              reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    le              reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    neqs            reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    or              reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    nand            reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    +               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    -               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    *               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    /               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    $end            reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    }               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    ;               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    then            reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    ,               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    ]               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    do              reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    )               reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    in              reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    lambda          reduce using rule 55 (expression -> dot_expression ( id_list ) .)
    else            reduce using rule 55 (expression -> dot_expression ( id_list ) .)


state 117

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 125
    dot_expression                 shift and go to state 23

state 118

    (48) dot_expression -> ID . . . ID .

    (               reduce using rule 48 (dot_expression -> ID . . . ID .)
    and             reduce using rule 48 (dot_expression -> ID . . . ID .)
    eq              reduce using rule 48 (dot_expression -> ID . . . ID .)
    =               reduce using rule 48 (dot_expression -> ID . . . ID .)
    >               reduce using rule 48 (dot_expression -> ID . . . ID .)
    <               reduce using rule 48 (dot_expression -> ID . . . ID .)
    ge              reduce using rule 48 (dot_expression -> ID . . . ID .)
    le              reduce using rule 48 (dot_expression -> ID . . . ID .)
    neqs            reduce using rule 48 (dot_expression -> ID . . . ID .)
    or              reduce using rule 48 (dot_expression -> ID . . . ID .)
    nand            reduce using rule 48 (dot_expression -> ID . . . ID .)
    +               reduce using rule 48 (dot_expression -> ID . . . ID .)
    -               reduce using rule 48 (dot_expression -> ID . . . ID .)
    *               reduce using rule 48 (dot_expression -> ID . . . ID .)
    /               reduce using rule 48 (dot_expression -> ID . . . ID .)
    $end            reduce using rule 48 (dot_expression -> ID . . . ID .)
    }               reduce using rule 48 (dot_expression -> ID . . . ID .)
    ;               reduce using rule 48 (dot_expression -> ID . . . ID .)
    then            reduce using rule 48 (dot_expression -> ID . . . ID .)
    ,               reduce using rule 48 (dot_expression -> ID . . . ID .)
    ]               reduce using rule 48 (dot_expression -> ID . . . ID .)
    do              reduce using rule 48 (dot_expression -> ID . . . ID .)
    )               reduce using rule 48 (dot_expression -> ID . . . ID .)
    in              reduce using rule 48 (dot_expression -> ID . . . ID .)
    lambda          reduce using rule 48 (dot_expression -> ID . . . ID .)
    else            reduce using rule 48 (dot_expression -> ID . . . ID .)


state 119

    (49) dot_expression -> ID . . . . . ID
    (50) dot_expression -> ID . . . . . . ID
    (51) dot_expression -> ID . . . . . . . ID

    ID              shift and go to state 126
    .               shift and go to state 127


state 120

    (5) expression -> letrec ID assign expression lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 128
    dot_expression                 shift and go to state 23

state 121

    (31) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 129
    dot_expression                 shift and go to state 23

state 122

    (45) expression -> ( id_list ) lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    }               reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    ;               reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    then            reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    ,               reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    ]               reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    do              reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    )               reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    in              reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    lambda          reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    else            reduce using rule 45 (expression -> ( id_list ) lambda expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! eq              [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! =               [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! >               [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! <               [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! ge              [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! le              [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! neqs            [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! or              [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! nand            [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! +               [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! -               [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! *               [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]
  ! /               [ reduce using rule 45 (expression -> ( id_list ) lambda expression .) ]


state 123

    (41) expression -> extend ID { sequence } .

    and             reduce using rule 41 (expression -> extend ID { sequence } .)
    eq              reduce using rule 41 (expression -> extend ID { sequence } .)
    =               reduce using rule 41 (expression -> extend ID { sequence } .)
    >               reduce using rule 41 (expression -> extend ID { sequence } .)
    <               reduce using rule 41 (expression -> extend ID { sequence } .)
    ge              reduce using rule 41 (expression -> extend ID { sequence } .)
    le              reduce using rule 41 (expression -> extend ID { sequence } .)
    neqs            reduce using rule 41 (expression -> extend ID { sequence } .)
    or              reduce using rule 41 (expression -> extend ID { sequence } .)
    nand            reduce using rule 41 (expression -> extend ID { sequence } .)
    +               reduce using rule 41 (expression -> extend ID { sequence } .)
    -               reduce using rule 41 (expression -> extend ID { sequence } .)
    *               reduce using rule 41 (expression -> extend ID { sequence } .)
    /               reduce using rule 41 (expression -> extend ID { sequence } .)
    $end            reduce using rule 41 (expression -> extend ID { sequence } .)
    }               reduce using rule 41 (expression -> extend ID { sequence } .)
    ;               reduce using rule 41 (expression -> extend ID { sequence } .)
    then            reduce using rule 41 (expression -> extend ID { sequence } .)
    ,               reduce using rule 41 (expression -> extend ID { sequence } .)
    ]               reduce using rule 41 (expression -> extend ID { sequence } .)
    do              reduce using rule 41 (expression -> extend ID { sequence } .)
    )               reduce using rule 41 (expression -> extend ID { sequence } .)
    in              reduce using rule 41 (expression -> extend ID { sequence } .)
    lambda          reduce using rule 41 (expression -> extend ID { sequence } .)
    else            reduce using rule 41 (expression -> extend ID { sequence } .)


state 124

    (42) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 130
    dot_expression                 shift and go to state 23

state 125

    (2) expression -> local ID assign expression in expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    ,               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ]               reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    lambda          reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 126

    (49) dot_expression -> ID . . . . ID .

    (               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    and             reduce using rule 49 (dot_expression -> ID . . . . ID .)
    eq              reduce using rule 49 (dot_expression -> ID . . . . ID .)
    =               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    >               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    <               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    ge              reduce using rule 49 (dot_expression -> ID . . . . ID .)
    le              reduce using rule 49 (dot_expression -> ID . . . . ID .)
    neqs            reduce using rule 49 (dot_expression -> ID . . . . ID .)
    or              reduce using rule 49 (dot_expression -> ID . . . . ID .)
    nand            reduce using rule 49 (dot_expression -> ID . . . . ID .)
    +               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    -               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    *               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    /               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    $end            reduce using rule 49 (dot_expression -> ID . . . . ID .)
    }               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    ;               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    then            reduce using rule 49 (dot_expression -> ID . . . . ID .)
    ,               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    ]               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    do              reduce using rule 49 (dot_expression -> ID . . . . ID .)
    )               reduce using rule 49 (dot_expression -> ID . . . . ID .)
    in              reduce using rule 49 (dot_expression -> ID . . . . ID .)
    lambda          reduce using rule 49 (dot_expression -> ID . . . . ID .)
    else            reduce using rule 49 (dot_expression -> ID . . . . ID .)


state 127

    (50) dot_expression -> ID . . . . . . ID
    (51) dot_expression -> ID . . . . . . . ID

    ID              shift and go to state 131
    .               shift and go to state 132


state 128

    (5) expression -> letrec ID assign expression lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    }               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ;               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    then            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ,               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ]               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    do              reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    )               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    in              reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    lambda          reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    else            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]


state 129

    (31) expression -> if expression then expression else expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 31 (expression -> if expression then expression else expression .)
    }               reduce using rule 31 (expression -> if expression then expression else expression .)
    ;               reduce using rule 31 (expression -> if expression then expression else expression .)
    then            reduce using rule 31 (expression -> if expression then expression else expression .)
    ,               reduce using rule 31 (expression -> if expression then expression else expression .)
    ]               reduce using rule 31 (expression -> if expression then expression else expression .)
    do              reduce using rule 31 (expression -> if expression then expression else expression .)
    )               reduce using rule 31 (expression -> if expression then expression else expression .)
    in              reduce using rule 31 (expression -> if expression then expression else expression .)
    lambda          reduce using rule 31 (expression -> if expression then expression else expression .)
    else            reduce using rule 31 (expression -> if expression then expression else expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 31 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 31 (expression -> if expression then expression else expression .) ]


state 130

    (42) expression -> for expression ; expression ; expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    do              shift and go to state 133
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 131

    (50) dot_expression -> ID . . . . . ID .

    (               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    and             reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    eq              reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    =               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    >               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    <               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    ge              reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    le              reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    neqs            reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    or              reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    nand            reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    +               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    -               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    *               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    /               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    $end            reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    }               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    ;               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    then            reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    ,               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    ]               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    do              reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    )               reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    in              reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    lambda          reduce using rule 50 (dot_expression -> ID . . . . . ID .)
    else            reduce using rule 50 (dot_expression -> ID . . . . . ID .)


state 132

    (51) dot_expression -> ID . . . . . . . ID

    ID              shift and go to state 134


state 133

    (42) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . ID assign expression
    (19) expression -> . import ID
    (20) expression -> . struct { sequence }
    (21) expression -> . - expression
    (22) expression -> . char
    (23) expression -> . if expression then expression
    (26) expression -> . expression + expression
    (27) expression -> . expression - expression
    (28) expression -> . expression * expression
    (29) expression -> . expression / expression
    (30) expression -> . [ id_list ]
    (31) expression -> . if expression then expression else expression
    (34) expression -> . ID [ NUMBER ]
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (37) expression -> . ( id_list )
    (38) expression -> . NUMBER
    (39) expression -> . BOOL
    (40) expression -> . ( expression )
    (41) expression -> . extend ID { sequence }
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . lambda expression
    (44) expression -> . ID lambda expression
    (45) expression -> . ( id_list ) lambda expression
    (52) expression -> . while expression do expression
    (53) expression -> . dot_expression
    (54) expression -> . dot_expression ( )
    (55) expression -> . dot_expression ( id_list )
    (56) expression -> . ID ( )
    (57) expression -> . ID ( id_list )
    (46) dot_expression -> . ID . ID
    (47) dot_expression -> . ID . . ID
    (48) dot_expression -> . ID . . . ID
    (49) dot_expression -> . ID . . . . ID
    (50) dot_expression -> . ID . . . . . ID
    (51) dot_expression -> . ID . . . . . . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 8
    string          shift and go to state 9
    struct          shift and go to state 10
    -               shift and go to state 11
    char            shift and go to state 12
    if              shift and go to state 13
    [               shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    extend          shift and go to state 20
    for             shift and go to state 21
    lambda          shift and go to state 7
    while           shift and go to state 22

    expression                     shift and go to state 135
    dot_expression                 shift and go to state 23

state 134

    (51) dot_expression -> ID . . . . . . ID .

    (               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    and             reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    eq              reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    =               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    >               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    <               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    ge              reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    le              reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    neqs            reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    or              reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    nand            reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    +               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    -               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    *               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    /               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    $end            reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    }               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    ;               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    then            reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    ,               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    ]               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    do              reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    )               reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    in              reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    lambda          reduce using rule 51 (dot_expression -> ID . . . . . . ID .)
    else            reduce using rule 51 (dot_expression -> ID . . . . . . ID .)


state 135

    (42) expression -> for expression ; expression ; expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (26) expression -> expression . + expression
    (27) expression -> expression . - expression
    (28) expression -> expression . * expression
    (29) expression -> expression . / expression

    $end            reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    ,               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    ]               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    lambda          reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for lambda in state 4 resolved as shift
WARNING: shift/reduce conflict for ) in state 57 resolved as shift
WARNING: shift/reduce conflict for lambda in state 93 resolved as shift
WARNING: shift/reduce conflict for and in state 125 resolved as shift
WARNING: shift/reduce conflict for eq in state 125 resolved as shift
WARNING: shift/reduce conflict for = in state 125 resolved as shift
WARNING: shift/reduce conflict for > in state 125 resolved as shift
WARNING: shift/reduce conflict for < in state 125 resolved as shift
WARNING: shift/reduce conflict for ge in state 125 resolved as shift
WARNING: shift/reduce conflict for le in state 125 resolved as shift
WARNING: shift/reduce conflict for neqs in state 125 resolved as shift
WARNING: shift/reduce conflict for or in state 125 resolved as shift
WARNING: shift/reduce conflict for nand in state 125 resolved as shift
WARNING: shift/reduce conflict for + in state 125 resolved as shift
WARNING: shift/reduce conflict for - in state 125 resolved as shift
WARNING: shift/reduce conflict for * in state 125 resolved as shift
WARNING: shift/reduce conflict for / in state 125 resolved as shift
