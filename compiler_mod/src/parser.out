Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> - expression
Rule 2     expression -> expression + expression
Rule 3     expression -> expression - expression
Rule 4     expression -> expression * expression
Rule 5     expression -> expression / expression
Rule 6     expression -> STRUCT { sequence_struct }
Rule 7     expression_list -> expression , expression_list
Rule 8     expression_list -> expression
Rule 9     expression -> NUMBER
Rule 10    expression -> { sequence }
Rule 11    expression -> EXTEND ID { sequence_struct }
Rule 12    expression -> LOCAL ID ASSIGN expression IN expression
Rule 13    expression -> BOOL
Rule 14    expression -> IF expression THEN expression
Rule 15    expression -> IMPORT ID AS ID
Rule 16    sequence_struct -> struct_assign
Rule 17    sequence_struct -> sequence_struct ; struct_assign
Rule 18    sequence -> expression
Rule 19    sequence -> sequence ; expression
Rule 20    expression -> FLOAT
Rule 21    expression -> IF expression THEN expression ELSE expression
Rule 22    expression -> IMPORT ID
Rule 23    expression -> expression AND expression
Rule 24    expression -> expression EQ expression
Rule 25    expression -> expression = expression
Rule 26    expression -> expression > expression
Rule 27    expression -> expression < expression
Rule 28    expression -> expression GE expression
Rule 29    expression -> expression LE expression
Rule 30    expression -> expression NEQS expression
Rule 31    expression -> expression OR expression
Rule 32    expression -> expression NAND expression
Rule 33    expression -> STRING
Rule 34    struct_assign -> . ID ASSIGN expression
Rule 35    struct_assign -> . ID ASSIGN lambda_expression
Rule 36    struct_assign -> . ID ASSIGN lambda_expression_struct
Rule 37    expression -> LOOP expression DO expression
Rule 38    expression -> CHAR
Rule 39    expression -> FOR expression ; expression ; expression DO expression
Rule 40    expression -> ID
Rule 41    lambda_expression_struct -> LAMBDA_START LAMBDA dots expression
Rule 42    lambda_expression_struct -> LAMBDA_START expression_list LAMBDA dots expression
Rule 43    expression -> ID ( )
Rule 44    expression -> ID ( expression_list )
Rule 45    expression -> WHILE expression DO expression
Rule 46    assign_expression -> ID ASSIGN expression
Rule 47    assign_expression -> ID ASSIGN lambda_expression
Rule 48    expression -> assign_expression
Rule 49    expression -> [ expression_list ]
Rule 50    dots -> .
Rule 51    dots -> . dots
Rule 52    expression -> ID [ NUMBER ]
Rule 53    expression -> ( expression_list )
Rule 54    expression -> ID dots ID
Rule 55    expression -> ID dots ID ( )
Rule 56    expression -> ID dots ID ( expression_list )
Rule 57    expression -> NOT expression
Rule 58    lambda_expression -> LAMBDA_START LAMBDA expression
Rule 59    lambda_expression -> LAMBDA_START expression_list LAMBDA expression
Rule 60    expression -> lambda_expression

Terminals, with rules where they appear

(                    : 43 44 53 55 56
)                    : 43 44 53 55 56
*                    : 4
+                    : 2
,                    : 7
-                    : 1 3
.                    : 34 35 36 50 51
/                    : 5
;                    : 17 19 39 39
<                    : 27
=                    : 25
>                    : 26
AND                  : 23
AS                   : 15
ASSIGN               : 12 34 35 36 46 47
BOOL                 : 13
CHAR                 : 38
DO                   : 37 39 45
ELSE                 : 21
EQ                   : 24
EXTEND               : 11
FLOAT                : 20
FOR                  : 39
GE                   : 28
ID                   : 11 12 15 15 22 34 35 36 40 43 44 46 47 52 54 54 55 55 56 56
IF                   : 14 21
IMPORT               : 15 22
IN                   : 12
LAMBDA               : 41 42 58 59
LAMBDA_START         : 41 42 58 59
LE                   : 29
LOCAL                : 12
LOOP                 : 37
NAND                 : 32
NEQS                 : 30
NOT                  : 57
NUMBER               : 9 52
OR                   : 31
STRING               : 33
STRUCT               : 6
THEN                 : 14 21
WHILE                : 45
[                    : 49 52
]                    : 49 52
error                : 
{                    : 6 10 11
}                    : 6 10 11

Nonterminals, with rules where they appear

assign_expression    : 48
dots                 : 41 42 51 54 55 56
expression           : 1 2 2 3 3 4 4 5 5 7 8 12 12 14 14 18 19 21 21 21 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 34 37 37 39 39 39 39 41 42 45 45 46 57 58 59 0
expression_list      : 7 42 44 49 53 56 59
lambda_expression    : 35 47 60
lambda_expression_struct : 36
sequence             : 10 19
sequence_struct      : 6 11 17
struct_assign        : 16 17

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 1
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 1

    (0) S' -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 2

    (1) expression -> - . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 38
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 3

    (6) expression -> STRUCT . { sequence_struct }

    {               shift and go to state 39


state 4

    (10) expression -> { . sequence }
    (18) sequence -> . expression
    (19) sequence -> . sequence ; expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    sequence                       shift and go to state 40
    expression                     shift and go to state 41
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 5

    (9) expression -> NUMBER .

    +               reduce using rule 9 (expression -> NUMBER .)
    -               reduce using rule 9 (expression -> NUMBER .)
    *               reduce using rule 9 (expression -> NUMBER .)
    /               reduce using rule 9 (expression -> NUMBER .)
    AND             reduce using rule 9 (expression -> NUMBER .)
    EQ              reduce using rule 9 (expression -> NUMBER .)
    =               reduce using rule 9 (expression -> NUMBER .)
    >               reduce using rule 9 (expression -> NUMBER .)
    <               reduce using rule 9 (expression -> NUMBER .)
    GE              reduce using rule 9 (expression -> NUMBER .)
    LE              reduce using rule 9 (expression -> NUMBER .)
    NEQS            reduce using rule 9 (expression -> NUMBER .)
    OR              reduce using rule 9 (expression -> NUMBER .)
    NAND            reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    }               reduce using rule 9 (expression -> NUMBER .)
    ;               reduce using rule 9 (expression -> NUMBER .)
    THEN            reduce using rule 9 (expression -> NUMBER .)
    DO              reduce using rule 9 (expression -> NUMBER .)
    ,               reduce using rule 9 (expression -> NUMBER .)
    )               reduce using rule 9 (expression -> NUMBER .)
    ]               reduce using rule 9 (expression -> NUMBER .)
    LAMBDA          reduce using rule 9 (expression -> NUMBER .)
    IN              reduce using rule 9 (expression -> NUMBER .)
    ELSE            reduce using rule 9 (expression -> NUMBER .)


state 6

    (11) expression -> EXTEND . ID { sequence_struct }

    ID              shift and go to state 42


state 7

    (40) expression -> ID .
    (43) expression -> ID . ( )
    (44) expression -> ID . ( expression_list )
    (52) expression -> ID . [ NUMBER ]
    (54) expression -> ID . dots ID
    (55) expression -> ID . dots ID ( )
    (56) expression -> ID . dots ID ( expression_list )
    (46) assign_expression -> ID . ASSIGN expression
    (47) assign_expression -> ID . ASSIGN lambda_expression
    (50) dots -> . .
    (51) dots -> . . dots

    +               reduce using rule 40 (expression -> ID .)
    -               reduce using rule 40 (expression -> ID .)
    *               reduce using rule 40 (expression -> ID .)
    /               reduce using rule 40 (expression -> ID .)
    AND             reduce using rule 40 (expression -> ID .)
    EQ              reduce using rule 40 (expression -> ID .)
    =               reduce using rule 40 (expression -> ID .)
    >               reduce using rule 40 (expression -> ID .)
    <               reduce using rule 40 (expression -> ID .)
    GE              reduce using rule 40 (expression -> ID .)
    LE              reduce using rule 40 (expression -> ID .)
    NEQS            reduce using rule 40 (expression -> ID .)
    OR              reduce using rule 40 (expression -> ID .)
    NAND            reduce using rule 40 (expression -> ID .)
    $end            reduce using rule 40 (expression -> ID .)
    }               reduce using rule 40 (expression -> ID .)
    ;               reduce using rule 40 (expression -> ID .)
    THEN            reduce using rule 40 (expression -> ID .)
    DO              reduce using rule 40 (expression -> ID .)
    ,               reduce using rule 40 (expression -> ID .)
    )               reduce using rule 40 (expression -> ID .)
    ]               reduce using rule 40 (expression -> ID .)
    LAMBDA          reduce using rule 40 (expression -> ID .)
    IN              reduce using rule 40 (expression -> ID .)
    ELSE            reduce using rule 40 (expression -> ID .)
    (               shift and go to state 43
    [               shift and go to state 44
    ASSIGN          shift and go to state 46
    .               shift and go to state 47

    dots                           shift and go to state 45

state 8

    (12) expression -> LOCAL . ID ASSIGN expression IN expression

    ID              shift and go to state 48


state 9

    (13) expression -> BOOL .

    +               reduce using rule 13 (expression -> BOOL .)
    -               reduce using rule 13 (expression -> BOOL .)
    *               reduce using rule 13 (expression -> BOOL .)
    /               reduce using rule 13 (expression -> BOOL .)
    AND             reduce using rule 13 (expression -> BOOL .)
    EQ              reduce using rule 13 (expression -> BOOL .)
    =               reduce using rule 13 (expression -> BOOL .)
    >               reduce using rule 13 (expression -> BOOL .)
    <               reduce using rule 13 (expression -> BOOL .)
    GE              reduce using rule 13 (expression -> BOOL .)
    LE              reduce using rule 13 (expression -> BOOL .)
    NEQS            reduce using rule 13 (expression -> BOOL .)
    OR              reduce using rule 13 (expression -> BOOL .)
    NAND            reduce using rule 13 (expression -> BOOL .)
    $end            reduce using rule 13 (expression -> BOOL .)
    }               reduce using rule 13 (expression -> BOOL .)
    ;               reduce using rule 13 (expression -> BOOL .)
    THEN            reduce using rule 13 (expression -> BOOL .)
    DO              reduce using rule 13 (expression -> BOOL .)
    ,               reduce using rule 13 (expression -> BOOL .)
    )               reduce using rule 13 (expression -> BOOL .)
    ]               reduce using rule 13 (expression -> BOOL .)
    LAMBDA          reduce using rule 13 (expression -> BOOL .)
    IN              reduce using rule 13 (expression -> BOOL .)
    ELSE            reduce using rule 13 (expression -> BOOL .)


state 10

    (14) expression -> IF . expression THEN expression
    (21) expression -> IF . expression THEN expression ELSE expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 49
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 11

    (15) expression -> IMPORT . ID AS ID
    (22) expression -> IMPORT . ID

    ID              shift and go to state 50


state 12

    (20) expression -> FLOAT .

    +               reduce using rule 20 (expression -> FLOAT .)
    -               reduce using rule 20 (expression -> FLOAT .)
    *               reduce using rule 20 (expression -> FLOAT .)
    /               reduce using rule 20 (expression -> FLOAT .)
    AND             reduce using rule 20 (expression -> FLOAT .)
    EQ              reduce using rule 20 (expression -> FLOAT .)
    =               reduce using rule 20 (expression -> FLOAT .)
    >               reduce using rule 20 (expression -> FLOAT .)
    <               reduce using rule 20 (expression -> FLOAT .)
    GE              reduce using rule 20 (expression -> FLOAT .)
    LE              reduce using rule 20 (expression -> FLOAT .)
    NEQS            reduce using rule 20 (expression -> FLOAT .)
    OR              reduce using rule 20 (expression -> FLOAT .)
    NAND            reduce using rule 20 (expression -> FLOAT .)
    $end            reduce using rule 20 (expression -> FLOAT .)
    }               reduce using rule 20 (expression -> FLOAT .)
    ;               reduce using rule 20 (expression -> FLOAT .)
    THEN            reduce using rule 20 (expression -> FLOAT .)
    DO              reduce using rule 20 (expression -> FLOAT .)
    ,               reduce using rule 20 (expression -> FLOAT .)
    )               reduce using rule 20 (expression -> FLOAT .)
    ]               reduce using rule 20 (expression -> FLOAT .)
    LAMBDA          reduce using rule 20 (expression -> FLOAT .)
    IN              reduce using rule 20 (expression -> FLOAT .)
    ELSE            reduce using rule 20 (expression -> FLOAT .)


state 13

    (33) expression -> STRING .

    +               reduce using rule 33 (expression -> STRING .)
    -               reduce using rule 33 (expression -> STRING .)
    *               reduce using rule 33 (expression -> STRING .)
    /               reduce using rule 33 (expression -> STRING .)
    AND             reduce using rule 33 (expression -> STRING .)
    EQ              reduce using rule 33 (expression -> STRING .)
    =               reduce using rule 33 (expression -> STRING .)
    >               reduce using rule 33 (expression -> STRING .)
    <               reduce using rule 33 (expression -> STRING .)
    GE              reduce using rule 33 (expression -> STRING .)
    LE              reduce using rule 33 (expression -> STRING .)
    NEQS            reduce using rule 33 (expression -> STRING .)
    OR              reduce using rule 33 (expression -> STRING .)
    NAND            reduce using rule 33 (expression -> STRING .)
    $end            reduce using rule 33 (expression -> STRING .)
    }               reduce using rule 33 (expression -> STRING .)
    ;               reduce using rule 33 (expression -> STRING .)
    THEN            reduce using rule 33 (expression -> STRING .)
    DO              reduce using rule 33 (expression -> STRING .)
    ,               reduce using rule 33 (expression -> STRING .)
    )               reduce using rule 33 (expression -> STRING .)
    ]               reduce using rule 33 (expression -> STRING .)
    LAMBDA          reduce using rule 33 (expression -> STRING .)
    IN              reduce using rule 33 (expression -> STRING .)
    ELSE            reduce using rule 33 (expression -> STRING .)


state 14

    (37) expression -> LOOP . expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 51
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 15

    (38) expression -> CHAR .

    +               reduce using rule 38 (expression -> CHAR .)
    -               reduce using rule 38 (expression -> CHAR .)
    *               reduce using rule 38 (expression -> CHAR .)
    /               reduce using rule 38 (expression -> CHAR .)
    AND             reduce using rule 38 (expression -> CHAR .)
    EQ              reduce using rule 38 (expression -> CHAR .)
    =               reduce using rule 38 (expression -> CHAR .)
    >               reduce using rule 38 (expression -> CHAR .)
    <               reduce using rule 38 (expression -> CHAR .)
    GE              reduce using rule 38 (expression -> CHAR .)
    LE              reduce using rule 38 (expression -> CHAR .)
    NEQS            reduce using rule 38 (expression -> CHAR .)
    OR              reduce using rule 38 (expression -> CHAR .)
    NAND            reduce using rule 38 (expression -> CHAR .)
    $end            reduce using rule 38 (expression -> CHAR .)
    }               reduce using rule 38 (expression -> CHAR .)
    ;               reduce using rule 38 (expression -> CHAR .)
    THEN            reduce using rule 38 (expression -> CHAR .)
    DO              reduce using rule 38 (expression -> CHAR .)
    ,               reduce using rule 38 (expression -> CHAR .)
    )               reduce using rule 38 (expression -> CHAR .)
    ]               reduce using rule 38 (expression -> CHAR .)
    LAMBDA          reduce using rule 38 (expression -> CHAR .)
    IN              reduce using rule 38 (expression -> CHAR .)
    ELSE            reduce using rule 38 (expression -> CHAR .)


state 16

    (39) expression -> FOR . expression ; expression ; expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 52
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 17

    (53) expression -> ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression_list                shift and go to state 53
    expression                     shift and go to state 54
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 18

    (45) expression -> WHILE . expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 55
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 19

    (48) expression -> assign_expression .

    +               reduce using rule 48 (expression -> assign_expression .)
    -               reduce using rule 48 (expression -> assign_expression .)
    *               reduce using rule 48 (expression -> assign_expression .)
    /               reduce using rule 48 (expression -> assign_expression .)
    AND             reduce using rule 48 (expression -> assign_expression .)
    EQ              reduce using rule 48 (expression -> assign_expression .)
    =               reduce using rule 48 (expression -> assign_expression .)
    >               reduce using rule 48 (expression -> assign_expression .)
    <               reduce using rule 48 (expression -> assign_expression .)
    GE              reduce using rule 48 (expression -> assign_expression .)
    LE              reduce using rule 48 (expression -> assign_expression .)
    NEQS            reduce using rule 48 (expression -> assign_expression .)
    OR              reduce using rule 48 (expression -> assign_expression .)
    NAND            reduce using rule 48 (expression -> assign_expression .)
    $end            reduce using rule 48 (expression -> assign_expression .)
    }               reduce using rule 48 (expression -> assign_expression .)
    ;               reduce using rule 48 (expression -> assign_expression .)
    THEN            reduce using rule 48 (expression -> assign_expression .)
    DO              reduce using rule 48 (expression -> assign_expression .)
    ,               reduce using rule 48 (expression -> assign_expression .)
    )               reduce using rule 48 (expression -> assign_expression .)
    ]               reduce using rule 48 (expression -> assign_expression .)
    LAMBDA          reduce using rule 48 (expression -> assign_expression .)
    IN              reduce using rule 48 (expression -> assign_expression .)
    ELSE            reduce using rule 48 (expression -> assign_expression .)


state 20

    (49) expression -> [ . expression_list ]
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression_list                shift and go to state 56
    expression                     shift and go to state 54
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 21

    (57) expression -> NOT . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 57
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 22

    (60) expression -> lambda_expression .

    +               reduce using rule 60 (expression -> lambda_expression .)
    -               reduce using rule 60 (expression -> lambda_expression .)
    *               reduce using rule 60 (expression -> lambda_expression .)
    /               reduce using rule 60 (expression -> lambda_expression .)
    AND             reduce using rule 60 (expression -> lambda_expression .)
    EQ              reduce using rule 60 (expression -> lambda_expression .)
    =               reduce using rule 60 (expression -> lambda_expression .)
    >               reduce using rule 60 (expression -> lambda_expression .)
    <               reduce using rule 60 (expression -> lambda_expression .)
    GE              reduce using rule 60 (expression -> lambda_expression .)
    LE              reduce using rule 60 (expression -> lambda_expression .)
    NEQS            reduce using rule 60 (expression -> lambda_expression .)
    OR              reduce using rule 60 (expression -> lambda_expression .)
    NAND            reduce using rule 60 (expression -> lambda_expression .)
    $end            reduce using rule 60 (expression -> lambda_expression .)
    }               reduce using rule 60 (expression -> lambda_expression .)
    ;               reduce using rule 60 (expression -> lambda_expression .)
    THEN            reduce using rule 60 (expression -> lambda_expression .)
    DO              reduce using rule 60 (expression -> lambda_expression .)
    ,               reduce using rule 60 (expression -> lambda_expression .)
    )               reduce using rule 60 (expression -> lambda_expression .)
    ]               reduce using rule 60 (expression -> lambda_expression .)
    LAMBDA          reduce using rule 60 (expression -> lambda_expression .)
    IN              reduce using rule 60 (expression -> lambda_expression .)
    ELSE            reduce using rule 60 (expression -> lambda_expression .)


state 23

    (58) lambda_expression -> LAMBDA_START . LAMBDA expression
    (59) lambda_expression -> LAMBDA_START . expression_list LAMBDA expression
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    LAMBDA          shift and go to state 58
    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 54
    expression_list                shift and go to state 59
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 24

    (2) expression -> expression + . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 60
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 25

    (3) expression -> expression - . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 61
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 26

    (4) expression -> expression * . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 62
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 27

    (5) expression -> expression / . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 63
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 28

    (23) expression -> expression AND . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 64
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 29

    (24) expression -> expression EQ . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 65
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 30

    (25) expression -> expression = . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 66
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 31

    (26) expression -> expression > . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 67
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 32

    (27) expression -> expression < . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 68
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 33

    (28) expression -> expression GE . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 69
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 34

    (29) expression -> expression LE . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 70
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 35

    (30) expression -> expression NEQS . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 71
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 36

    (31) expression -> expression OR . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 72
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 37

    (32) expression -> expression NAND . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 73
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 38

    (1) expression -> - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 1 (expression -> - expression .)
    -               reduce using rule 1 (expression -> - expression .)
    *               reduce using rule 1 (expression -> - expression .)
    /               reduce using rule 1 (expression -> - expression .)
    AND             reduce using rule 1 (expression -> - expression .)
    EQ              reduce using rule 1 (expression -> - expression .)
    =               reduce using rule 1 (expression -> - expression .)
    >               reduce using rule 1 (expression -> - expression .)
    <               reduce using rule 1 (expression -> - expression .)
    GE              reduce using rule 1 (expression -> - expression .)
    LE              reduce using rule 1 (expression -> - expression .)
    NEQS            reduce using rule 1 (expression -> - expression .)
    OR              reduce using rule 1 (expression -> - expression .)
    NAND            reduce using rule 1 (expression -> - expression .)
    $end            reduce using rule 1 (expression -> - expression .)
    }               reduce using rule 1 (expression -> - expression .)
    ;               reduce using rule 1 (expression -> - expression .)
    THEN            reduce using rule 1 (expression -> - expression .)
    DO              reduce using rule 1 (expression -> - expression .)
    ,               reduce using rule 1 (expression -> - expression .)
    )               reduce using rule 1 (expression -> - expression .)
    ]               reduce using rule 1 (expression -> - expression .)
    LAMBDA          reduce using rule 1 (expression -> - expression .)
    IN              reduce using rule 1 (expression -> - expression .)
    ELSE            reduce using rule 1 (expression -> - expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 39

    (6) expression -> STRUCT { . sequence_struct }
    (16) sequence_struct -> . struct_assign
    (17) sequence_struct -> . sequence_struct ; struct_assign
    (34) struct_assign -> . . ID ASSIGN expression
    (35) struct_assign -> . . ID ASSIGN lambda_expression
    (36) struct_assign -> . . ID ASSIGN lambda_expression_struct

    .               shift and go to state 76

    sequence_struct                shift and go to state 74
    struct_assign                  shift and go to state 75

state 40

    (10) expression -> { sequence . }
    (19) sequence -> sequence . ; expression

    }               shift and go to state 77
    ;               shift and go to state 78


state 41

    (18) sequence -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 18 (sequence -> expression .)
    ;               reduce using rule 18 (sequence -> expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 42

    (11) expression -> EXTEND ID . { sequence_struct }

    {               shift and go to state 79


state 43

    (43) expression -> ID ( . )
    (44) expression -> ID ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    )               shift and go to state 80
    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression_list                shift and go to state 81
    expression                     shift and go to state 54
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 44

    (52) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 82


state 45

    (54) expression -> ID dots . ID
    (55) expression -> ID dots . ID ( )
    (56) expression -> ID dots . ID ( expression_list )

    ID              shift and go to state 83


state 46

    (46) assign_expression -> ID ASSIGN . expression
    (47) assign_expression -> ID ASSIGN . lambda_expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 84
    lambda_expression              shift and go to state 85
    assign_expression              shift and go to state 19

state 47

    (50) dots -> . .
    (51) dots -> . . dots
    (50) dots -> . .
    (51) dots -> . . dots

    ID              reduce using rule 50 (dots -> . .)
    -               reduce using rule 50 (dots -> . .)
    STRUCT          reduce using rule 50 (dots -> . .)
    NUMBER          reduce using rule 50 (dots -> . .)
    {               reduce using rule 50 (dots -> . .)
    EXTEND          reduce using rule 50 (dots -> . .)
    LOCAL           reduce using rule 50 (dots -> . .)
    BOOL            reduce using rule 50 (dots -> . .)
    IF              reduce using rule 50 (dots -> . .)
    IMPORT          reduce using rule 50 (dots -> . .)
    FLOAT           reduce using rule 50 (dots -> . .)
    STRING          reduce using rule 50 (dots -> . .)
    LOOP            reduce using rule 50 (dots -> . .)
    CHAR            reduce using rule 50 (dots -> . .)
    FOR             reduce using rule 50 (dots -> . .)
    WHILE           reduce using rule 50 (dots -> . .)
    [               reduce using rule 50 (dots -> . .)
    (               reduce using rule 50 (dots -> . .)
    NOT             reduce using rule 50 (dots -> . .)
    LAMBDA_START    reduce using rule 50 (dots -> . .)
    .               shift and go to state 47

    dots                           shift and go to state 86

state 48

    (12) expression -> LOCAL ID . ASSIGN expression IN expression

    ASSIGN          shift and go to state 87


state 49

    (14) expression -> IF expression . THEN expression
    (21) expression -> IF expression . THEN expression ELSE expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    THEN            shift and go to state 88
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 50

    (15) expression -> IMPORT ID . AS ID
    (22) expression -> IMPORT ID .

    AS              shift and go to state 89
    +               reduce using rule 22 (expression -> IMPORT ID .)
    -               reduce using rule 22 (expression -> IMPORT ID .)
    *               reduce using rule 22 (expression -> IMPORT ID .)
    /               reduce using rule 22 (expression -> IMPORT ID .)
    AND             reduce using rule 22 (expression -> IMPORT ID .)
    EQ              reduce using rule 22 (expression -> IMPORT ID .)
    =               reduce using rule 22 (expression -> IMPORT ID .)
    >               reduce using rule 22 (expression -> IMPORT ID .)
    <               reduce using rule 22 (expression -> IMPORT ID .)
    GE              reduce using rule 22 (expression -> IMPORT ID .)
    LE              reduce using rule 22 (expression -> IMPORT ID .)
    NEQS            reduce using rule 22 (expression -> IMPORT ID .)
    OR              reduce using rule 22 (expression -> IMPORT ID .)
    NAND            reduce using rule 22 (expression -> IMPORT ID .)
    $end            reduce using rule 22 (expression -> IMPORT ID .)
    }               reduce using rule 22 (expression -> IMPORT ID .)
    ;               reduce using rule 22 (expression -> IMPORT ID .)
    THEN            reduce using rule 22 (expression -> IMPORT ID .)
    DO              reduce using rule 22 (expression -> IMPORT ID .)
    ,               reduce using rule 22 (expression -> IMPORT ID .)
    )               reduce using rule 22 (expression -> IMPORT ID .)
    ]               reduce using rule 22 (expression -> IMPORT ID .)
    LAMBDA          reduce using rule 22 (expression -> IMPORT ID .)
    IN              reduce using rule 22 (expression -> IMPORT ID .)
    ELSE            reduce using rule 22 (expression -> IMPORT ID .)


state 51

    (37) expression -> LOOP expression . DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    DO              shift and go to state 90
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 52

    (39) expression -> FOR expression . ; expression ; expression DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    ;               shift and go to state 91
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 53

    (53) expression -> ( expression_list . )

    )               shift and go to state 92


state 54

    (7) expression_list -> expression . , expression_list
    (8) expression_list -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    ,               shift and go to state 93
    )               reduce using rule 8 (expression_list -> expression .)
    ]               reduce using rule 8 (expression_list -> expression .)
    LAMBDA          reduce using rule 8 (expression_list -> expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 55

    (45) expression -> WHILE expression . DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    DO              shift and go to state 94
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 56

    (49) expression -> [ expression_list . ]

    ]               shift and go to state 95


state 57

    (57) expression -> NOT expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 57 (expression -> NOT expression .)
    -               reduce using rule 57 (expression -> NOT expression .)
    *               reduce using rule 57 (expression -> NOT expression .)
    /               reduce using rule 57 (expression -> NOT expression .)
    AND             reduce using rule 57 (expression -> NOT expression .)
    EQ              reduce using rule 57 (expression -> NOT expression .)
    =               reduce using rule 57 (expression -> NOT expression .)
    >               reduce using rule 57 (expression -> NOT expression .)
    <               reduce using rule 57 (expression -> NOT expression .)
    GE              reduce using rule 57 (expression -> NOT expression .)
    LE              reduce using rule 57 (expression -> NOT expression .)
    NEQS            reduce using rule 57 (expression -> NOT expression .)
    OR              reduce using rule 57 (expression -> NOT expression .)
    NAND            reduce using rule 57 (expression -> NOT expression .)
    $end            reduce using rule 57 (expression -> NOT expression .)
    }               reduce using rule 57 (expression -> NOT expression .)
    ;               reduce using rule 57 (expression -> NOT expression .)
    THEN            reduce using rule 57 (expression -> NOT expression .)
    DO              reduce using rule 57 (expression -> NOT expression .)
    ,               reduce using rule 57 (expression -> NOT expression .)
    )               reduce using rule 57 (expression -> NOT expression .)
    ]               reduce using rule 57 (expression -> NOT expression .)
    LAMBDA          reduce using rule 57 (expression -> NOT expression .)
    IN              reduce using rule 57 (expression -> NOT expression .)
    ELSE            reduce using rule 57 (expression -> NOT expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 58

    (58) lambda_expression -> LAMBDA_START LAMBDA . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 96
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 59

    (59) lambda_expression -> LAMBDA_START expression_list . LAMBDA expression

    LAMBDA          shift and go to state 97


state 60

    (2) expression -> expression + expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 2 (expression -> expression + expression .)
    -               reduce using rule 2 (expression -> expression + expression .)
    AND             reduce using rule 2 (expression -> expression + expression .)
    EQ              reduce using rule 2 (expression -> expression + expression .)
    =               reduce using rule 2 (expression -> expression + expression .)
    >               reduce using rule 2 (expression -> expression + expression .)
    <               reduce using rule 2 (expression -> expression + expression .)
    GE              reduce using rule 2 (expression -> expression + expression .)
    LE              reduce using rule 2 (expression -> expression + expression .)
    NEQS            reduce using rule 2 (expression -> expression + expression .)
    OR              reduce using rule 2 (expression -> expression + expression .)
    NAND            reduce using rule 2 (expression -> expression + expression .)
    $end            reduce using rule 2 (expression -> expression + expression .)
    }               reduce using rule 2 (expression -> expression + expression .)
    ;               reduce using rule 2 (expression -> expression + expression .)
    THEN            reduce using rule 2 (expression -> expression + expression .)
    DO              reduce using rule 2 (expression -> expression + expression .)
    ,               reduce using rule 2 (expression -> expression + expression .)
    )               reduce using rule 2 (expression -> expression + expression .)
    ]               reduce using rule 2 (expression -> expression + expression .)
    LAMBDA          reduce using rule 2 (expression -> expression + expression .)
    IN              reduce using rule 2 (expression -> expression + expression .)
    ELSE            reduce using rule 2 (expression -> expression + expression .)
    *               shift and go to state 26
    /               shift and go to state 27

  ! *               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 61

    (3) expression -> expression - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 3 (expression -> expression - expression .)
    -               reduce using rule 3 (expression -> expression - expression .)
    AND             reduce using rule 3 (expression -> expression - expression .)
    EQ              reduce using rule 3 (expression -> expression - expression .)
    =               reduce using rule 3 (expression -> expression - expression .)
    >               reduce using rule 3 (expression -> expression - expression .)
    <               reduce using rule 3 (expression -> expression - expression .)
    GE              reduce using rule 3 (expression -> expression - expression .)
    LE              reduce using rule 3 (expression -> expression - expression .)
    NEQS            reduce using rule 3 (expression -> expression - expression .)
    OR              reduce using rule 3 (expression -> expression - expression .)
    NAND            reduce using rule 3 (expression -> expression - expression .)
    $end            reduce using rule 3 (expression -> expression - expression .)
    }               reduce using rule 3 (expression -> expression - expression .)
    ;               reduce using rule 3 (expression -> expression - expression .)
    THEN            reduce using rule 3 (expression -> expression - expression .)
    DO              reduce using rule 3 (expression -> expression - expression .)
    ,               reduce using rule 3 (expression -> expression - expression .)
    )               reduce using rule 3 (expression -> expression - expression .)
    ]               reduce using rule 3 (expression -> expression - expression .)
    LAMBDA          reduce using rule 3 (expression -> expression - expression .)
    IN              reduce using rule 3 (expression -> expression - expression .)
    ELSE            reduce using rule 3 (expression -> expression - expression .)
    *               shift and go to state 26
    /               shift and go to state 27

  ! *               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 62

    (4) expression -> expression * expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 4 (expression -> expression * expression .)
    -               reduce using rule 4 (expression -> expression * expression .)
    *               reduce using rule 4 (expression -> expression * expression .)
    /               reduce using rule 4 (expression -> expression * expression .)
    AND             reduce using rule 4 (expression -> expression * expression .)
    EQ              reduce using rule 4 (expression -> expression * expression .)
    =               reduce using rule 4 (expression -> expression * expression .)
    >               reduce using rule 4 (expression -> expression * expression .)
    <               reduce using rule 4 (expression -> expression * expression .)
    GE              reduce using rule 4 (expression -> expression * expression .)
    LE              reduce using rule 4 (expression -> expression * expression .)
    NEQS            reduce using rule 4 (expression -> expression * expression .)
    OR              reduce using rule 4 (expression -> expression * expression .)
    NAND            reduce using rule 4 (expression -> expression * expression .)
    $end            reduce using rule 4 (expression -> expression * expression .)
    }               reduce using rule 4 (expression -> expression * expression .)
    ;               reduce using rule 4 (expression -> expression * expression .)
    THEN            reduce using rule 4 (expression -> expression * expression .)
    DO              reduce using rule 4 (expression -> expression * expression .)
    ,               reduce using rule 4 (expression -> expression * expression .)
    )               reduce using rule 4 (expression -> expression * expression .)
    ]               reduce using rule 4 (expression -> expression * expression .)
    LAMBDA          reduce using rule 4 (expression -> expression * expression .)
    IN              reduce using rule 4 (expression -> expression * expression .)
    ELSE            reduce using rule 4 (expression -> expression * expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 63

    (5) expression -> expression / expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 5 (expression -> expression / expression .)
    -               reduce using rule 5 (expression -> expression / expression .)
    *               reduce using rule 5 (expression -> expression / expression .)
    /               reduce using rule 5 (expression -> expression / expression .)
    AND             reduce using rule 5 (expression -> expression / expression .)
    EQ              reduce using rule 5 (expression -> expression / expression .)
    =               reduce using rule 5 (expression -> expression / expression .)
    >               reduce using rule 5 (expression -> expression / expression .)
    <               reduce using rule 5 (expression -> expression / expression .)
    GE              reduce using rule 5 (expression -> expression / expression .)
    LE              reduce using rule 5 (expression -> expression / expression .)
    NEQS            reduce using rule 5 (expression -> expression / expression .)
    OR              reduce using rule 5 (expression -> expression / expression .)
    NAND            reduce using rule 5 (expression -> expression / expression .)
    $end            reduce using rule 5 (expression -> expression / expression .)
    }               reduce using rule 5 (expression -> expression / expression .)
    ;               reduce using rule 5 (expression -> expression / expression .)
    THEN            reduce using rule 5 (expression -> expression / expression .)
    DO              reduce using rule 5 (expression -> expression / expression .)
    ,               reduce using rule 5 (expression -> expression / expression .)
    )               reduce using rule 5 (expression -> expression / expression .)
    ]               reduce using rule 5 (expression -> expression / expression .)
    LAMBDA          reduce using rule 5 (expression -> expression / expression .)
    IN              reduce using rule 5 (expression -> expression / expression .)
    ELSE            reduce using rule 5 (expression -> expression / expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 64

    (23) expression -> expression AND expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 23 (expression -> expression AND expression .)
    OR              reduce using rule 23 (expression -> expression AND expression .)
    NAND            reduce using rule 23 (expression -> expression AND expression .)
    $end            reduce using rule 23 (expression -> expression AND expression .)
    }               reduce using rule 23 (expression -> expression AND expression .)
    ;               reduce using rule 23 (expression -> expression AND expression .)
    THEN            reduce using rule 23 (expression -> expression AND expression .)
    DO              reduce using rule 23 (expression -> expression AND expression .)
    ,               reduce using rule 23 (expression -> expression AND expression .)
    )               reduce using rule 23 (expression -> expression AND expression .)
    ]               reduce using rule 23 (expression -> expression AND expression .)
    LAMBDA          reduce using rule 23 (expression -> expression AND expression .)
    IN              reduce using rule 23 (expression -> expression AND expression .)
    ELSE            reduce using rule 23 (expression -> expression AND expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35

  ! +               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! =               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! NEQS            [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 65

    (24) expression -> expression EQ expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 24 (expression -> expression EQ expression .)
    EQ              reduce using rule 24 (expression -> expression EQ expression .)
    =               reduce using rule 24 (expression -> expression EQ expression .)
    NEQS            reduce using rule 24 (expression -> expression EQ expression .)
    OR              reduce using rule 24 (expression -> expression EQ expression .)
    NAND            reduce using rule 24 (expression -> expression EQ expression .)
    $end            reduce using rule 24 (expression -> expression EQ expression .)
    }               reduce using rule 24 (expression -> expression EQ expression .)
    ;               reduce using rule 24 (expression -> expression EQ expression .)
    THEN            reduce using rule 24 (expression -> expression EQ expression .)
    DO              reduce using rule 24 (expression -> expression EQ expression .)
    ,               reduce using rule 24 (expression -> expression EQ expression .)
    )               reduce using rule 24 (expression -> expression EQ expression .)
    ]               reduce using rule 24 (expression -> expression EQ expression .)
    LAMBDA          reduce using rule 24 (expression -> expression EQ expression .)
    IN              reduce using rule 24 (expression -> expression EQ expression .)
    ELSE            reduce using rule 24 (expression -> expression EQ expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34

  ! +               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 66

    (25) expression -> expression = expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 25 (expression -> expression = expression .)
    EQ              reduce using rule 25 (expression -> expression = expression .)
    =               reduce using rule 25 (expression -> expression = expression .)
    NEQS            reduce using rule 25 (expression -> expression = expression .)
    OR              reduce using rule 25 (expression -> expression = expression .)
    NAND            reduce using rule 25 (expression -> expression = expression .)
    $end            reduce using rule 25 (expression -> expression = expression .)
    }               reduce using rule 25 (expression -> expression = expression .)
    ;               reduce using rule 25 (expression -> expression = expression .)
    THEN            reduce using rule 25 (expression -> expression = expression .)
    DO              reduce using rule 25 (expression -> expression = expression .)
    ,               reduce using rule 25 (expression -> expression = expression .)
    )               reduce using rule 25 (expression -> expression = expression .)
    ]               reduce using rule 25 (expression -> expression = expression .)
    LAMBDA          reduce using rule 25 (expression -> expression = expression .)
    IN              reduce using rule 25 (expression -> expression = expression .)
    ELSE            reduce using rule 25 (expression -> expression = expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34

  ! +               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! >               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! GE              [ reduce using rule 25 (expression -> expression = expression .) ]
  ! LE              [ reduce using rule 25 (expression -> expression = expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 67

    (26) expression -> expression > expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 26 (expression -> expression > expression .)
    EQ              reduce using rule 26 (expression -> expression > expression .)
    =               reduce using rule 26 (expression -> expression > expression .)
    >               reduce using rule 26 (expression -> expression > expression .)
    <               reduce using rule 26 (expression -> expression > expression .)
    GE              reduce using rule 26 (expression -> expression > expression .)
    LE              reduce using rule 26 (expression -> expression > expression .)
    NEQS            reduce using rule 26 (expression -> expression > expression .)
    OR              reduce using rule 26 (expression -> expression > expression .)
    NAND            reduce using rule 26 (expression -> expression > expression .)
    $end            reduce using rule 26 (expression -> expression > expression .)
    }               reduce using rule 26 (expression -> expression > expression .)
    ;               reduce using rule 26 (expression -> expression > expression .)
    THEN            reduce using rule 26 (expression -> expression > expression .)
    DO              reduce using rule 26 (expression -> expression > expression .)
    ,               reduce using rule 26 (expression -> expression > expression .)
    )               reduce using rule 26 (expression -> expression > expression .)
    ]               reduce using rule 26 (expression -> expression > expression .)
    LAMBDA          reduce using rule 26 (expression -> expression > expression .)
    IN              reduce using rule 26 (expression -> expression > expression .)
    ELSE            reduce using rule 26 (expression -> expression > expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27

  ! +               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 68

    (27) expression -> expression < expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 27 (expression -> expression < expression .)
    EQ              reduce using rule 27 (expression -> expression < expression .)
    =               reduce using rule 27 (expression -> expression < expression .)
    >               reduce using rule 27 (expression -> expression < expression .)
    <               reduce using rule 27 (expression -> expression < expression .)
    GE              reduce using rule 27 (expression -> expression < expression .)
    LE              reduce using rule 27 (expression -> expression < expression .)
    NEQS            reduce using rule 27 (expression -> expression < expression .)
    OR              reduce using rule 27 (expression -> expression < expression .)
    NAND            reduce using rule 27 (expression -> expression < expression .)
    $end            reduce using rule 27 (expression -> expression < expression .)
    }               reduce using rule 27 (expression -> expression < expression .)
    ;               reduce using rule 27 (expression -> expression < expression .)
    THEN            reduce using rule 27 (expression -> expression < expression .)
    DO              reduce using rule 27 (expression -> expression < expression .)
    ,               reduce using rule 27 (expression -> expression < expression .)
    )               reduce using rule 27 (expression -> expression < expression .)
    ]               reduce using rule 27 (expression -> expression < expression .)
    LAMBDA          reduce using rule 27 (expression -> expression < expression .)
    IN              reduce using rule 27 (expression -> expression < expression .)
    ELSE            reduce using rule 27 (expression -> expression < expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27

  ! +               [ reduce using rule 27 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 27 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 27 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression < expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 69

    (28) expression -> expression GE expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 28 (expression -> expression GE expression .)
    EQ              reduce using rule 28 (expression -> expression GE expression .)
    =               reduce using rule 28 (expression -> expression GE expression .)
    >               reduce using rule 28 (expression -> expression GE expression .)
    <               reduce using rule 28 (expression -> expression GE expression .)
    GE              reduce using rule 28 (expression -> expression GE expression .)
    LE              reduce using rule 28 (expression -> expression GE expression .)
    NEQS            reduce using rule 28 (expression -> expression GE expression .)
    OR              reduce using rule 28 (expression -> expression GE expression .)
    NAND            reduce using rule 28 (expression -> expression GE expression .)
    $end            reduce using rule 28 (expression -> expression GE expression .)
    }               reduce using rule 28 (expression -> expression GE expression .)
    ;               reduce using rule 28 (expression -> expression GE expression .)
    THEN            reduce using rule 28 (expression -> expression GE expression .)
    DO              reduce using rule 28 (expression -> expression GE expression .)
    ,               reduce using rule 28 (expression -> expression GE expression .)
    )               reduce using rule 28 (expression -> expression GE expression .)
    ]               reduce using rule 28 (expression -> expression GE expression .)
    LAMBDA          reduce using rule 28 (expression -> expression GE expression .)
    IN              reduce using rule 28 (expression -> expression GE expression .)
    ELSE            reduce using rule 28 (expression -> expression GE expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27

  ! +               [ reduce using rule 28 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 28 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 28 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 70

    (29) expression -> expression LE expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 29 (expression -> expression LE expression .)
    EQ              reduce using rule 29 (expression -> expression LE expression .)
    =               reduce using rule 29 (expression -> expression LE expression .)
    >               reduce using rule 29 (expression -> expression LE expression .)
    <               reduce using rule 29 (expression -> expression LE expression .)
    GE              reduce using rule 29 (expression -> expression LE expression .)
    LE              reduce using rule 29 (expression -> expression LE expression .)
    NEQS            reduce using rule 29 (expression -> expression LE expression .)
    OR              reduce using rule 29 (expression -> expression LE expression .)
    NAND            reduce using rule 29 (expression -> expression LE expression .)
    $end            reduce using rule 29 (expression -> expression LE expression .)
    }               reduce using rule 29 (expression -> expression LE expression .)
    ;               reduce using rule 29 (expression -> expression LE expression .)
    THEN            reduce using rule 29 (expression -> expression LE expression .)
    DO              reduce using rule 29 (expression -> expression LE expression .)
    ,               reduce using rule 29 (expression -> expression LE expression .)
    )               reduce using rule 29 (expression -> expression LE expression .)
    ]               reduce using rule 29 (expression -> expression LE expression .)
    LAMBDA          reduce using rule 29 (expression -> expression LE expression .)
    IN              reduce using rule 29 (expression -> expression LE expression .)
    ELSE            reduce using rule 29 (expression -> expression LE expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27

  ! +               [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! >               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! GE              [ shift and go to state 33 ]
  ! LE              [ shift and go to state 34 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 71

    (30) expression -> expression NEQS expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 30 (expression -> expression NEQS expression .)
    EQ              reduce using rule 30 (expression -> expression NEQS expression .)
    =               reduce using rule 30 (expression -> expression NEQS expression .)
    NEQS            reduce using rule 30 (expression -> expression NEQS expression .)
    OR              reduce using rule 30 (expression -> expression NEQS expression .)
    NAND            reduce using rule 30 (expression -> expression NEQS expression .)
    $end            reduce using rule 30 (expression -> expression NEQS expression .)
    }               reduce using rule 30 (expression -> expression NEQS expression .)
    ;               reduce using rule 30 (expression -> expression NEQS expression .)
    THEN            reduce using rule 30 (expression -> expression NEQS expression .)
    DO              reduce using rule 30 (expression -> expression NEQS expression .)
    ,               reduce using rule 30 (expression -> expression NEQS expression .)
    )               reduce using rule 30 (expression -> expression NEQS expression .)
    ]               reduce using rule 30 (expression -> expression NEQS expression .)
    LAMBDA          reduce using rule 30 (expression -> expression NEQS expression .)
    IN              reduce using rule 30 (expression -> expression NEQS expression .)
    ELSE            reduce using rule 30 (expression -> expression NEQS expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34

  ! +               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! -               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! *               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! /               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! >               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! <               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! GE              [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! LE              [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! EQ              [ shift and go to state 29 ]
  ! =               [ shift and go to state 30 ]
  ! NEQS            [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 72

    (31) expression -> expression OR expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    OR              reduce using rule 31 (expression -> expression OR expression .)
    $end            reduce using rule 31 (expression -> expression OR expression .)
    }               reduce using rule 31 (expression -> expression OR expression .)
    ;               reduce using rule 31 (expression -> expression OR expression .)
    THEN            reduce using rule 31 (expression -> expression OR expression .)
    DO              reduce using rule 31 (expression -> expression OR expression .)
    ,               reduce using rule 31 (expression -> expression OR expression .)
    )               reduce using rule 31 (expression -> expression OR expression .)
    ]               reduce using rule 31 (expression -> expression OR expression .)
    LAMBDA          reduce using rule 31 (expression -> expression OR expression .)
    IN              reduce using rule 31 (expression -> expression OR expression .)
    ELSE            reduce using rule 31 (expression -> expression OR expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    NAND            shift and go to state 37

  ! +               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! =               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! NEQS            [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! NAND            [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 36 ]


state 73

    (32) expression -> expression NAND expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 32 (expression -> expression NAND expression .)
    OR              reduce using rule 32 (expression -> expression NAND expression .)
    NAND            reduce using rule 32 (expression -> expression NAND expression .)
    $end            reduce using rule 32 (expression -> expression NAND expression .)
    }               reduce using rule 32 (expression -> expression NAND expression .)
    ;               reduce using rule 32 (expression -> expression NAND expression .)
    THEN            reduce using rule 32 (expression -> expression NAND expression .)
    DO              reduce using rule 32 (expression -> expression NAND expression .)
    ,               reduce using rule 32 (expression -> expression NAND expression .)
    )               reduce using rule 32 (expression -> expression NAND expression .)
    ]               reduce using rule 32 (expression -> expression NAND expression .)
    LAMBDA          reduce using rule 32 (expression -> expression NAND expression .)
    IN              reduce using rule 32 (expression -> expression NAND expression .)
    ELSE            reduce using rule 32 (expression -> expression NAND expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35

  ! +               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! -               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! *               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! /               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! EQ              [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! =               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! >               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! <               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! GE              [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! LE              [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! NEQS            [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 36 ]
  ! NAND            [ shift and go to state 37 ]


state 74

    (6) expression -> STRUCT { sequence_struct . }
    (17) sequence_struct -> sequence_struct . ; struct_assign

    }               shift and go to state 98
    ;               shift and go to state 99


state 75

    (16) sequence_struct -> struct_assign .

    }               reduce using rule 16 (sequence_struct -> struct_assign .)
    ;               reduce using rule 16 (sequence_struct -> struct_assign .)


state 76

    (34) struct_assign -> . . ID ASSIGN expression
    (35) struct_assign -> . . ID ASSIGN lambda_expression
    (36) struct_assign -> . . ID ASSIGN lambda_expression_struct

    ID              shift and go to state 100


state 77

    (10) expression -> { sequence } .

    +               reduce using rule 10 (expression -> { sequence } .)
    -               reduce using rule 10 (expression -> { sequence } .)
    *               reduce using rule 10 (expression -> { sequence } .)
    /               reduce using rule 10 (expression -> { sequence } .)
    AND             reduce using rule 10 (expression -> { sequence } .)
    EQ              reduce using rule 10 (expression -> { sequence } .)
    =               reduce using rule 10 (expression -> { sequence } .)
    >               reduce using rule 10 (expression -> { sequence } .)
    <               reduce using rule 10 (expression -> { sequence } .)
    GE              reduce using rule 10 (expression -> { sequence } .)
    LE              reduce using rule 10 (expression -> { sequence } .)
    NEQS            reduce using rule 10 (expression -> { sequence } .)
    OR              reduce using rule 10 (expression -> { sequence } .)
    NAND            reduce using rule 10 (expression -> { sequence } .)
    $end            reduce using rule 10 (expression -> { sequence } .)
    }               reduce using rule 10 (expression -> { sequence } .)
    ;               reduce using rule 10 (expression -> { sequence } .)
    THEN            reduce using rule 10 (expression -> { sequence } .)
    DO              reduce using rule 10 (expression -> { sequence } .)
    ,               reduce using rule 10 (expression -> { sequence } .)
    )               reduce using rule 10 (expression -> { sequence } .)
    ]               reduce using rule 10 (expression -> { sequence } .)
    LAMBDA          reduce using rule 10 (expression -> { sequence } .)
    IN              reduce using rule 10 (expression -> { sequence } .)
    ELSE            reduce using rule 10 (expression -> { sequence } .)


state 78

    (19) sequence -> sequence ; . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 101
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 79

    (11) expression -> EXTEND ID { . sequence_struct }
    (16) sequence_struct -> . struct_assign
    (17) sequence_struct -> . sequence_struct ; struct_assign
    (34) struct_assign -> . . ID ASSIGN expression
    (35) struct_assign -> . . ID ASSIGN lambda_expression
    (36) struct_assign -> . . ID ASSIGN lambda_expression_struct

    .               shift and go to state 76

    sequence_struct                shift and go to state 102
    struct_assign                  shift and go to state 75

state 80

    (43) expression -> ID ( ) .

    +               reduce using rule 43 (expression -> ID ( ) .)
    -               reduce using rule 43 (expression -> ID ( ) .)
    *               reduce using rule 43 (expression -> ID ( ) .)
    /               reduce using rule 43 (expression -> ID ( ) .)
    AND             reduce using rule 43 (expression -> ID ( ) .)
    EQ              reduce using rule 43 (expression -> ID ( ) .)
    =               reduce using rule 43 (expression -> ID ( ) .)
    >               reduce using rule 43 (expression -> ID ( ) .)
    <               reduce using rule 43 (expression -> ID ( ) .)
    GE              reduce using rule 43 (expression -> ID ( ) .)
    LE              reduce using rule 43 (expression -> ID ( ) .)
    NEQS            reduce using rule 43 (expression -> ID ( ) .)
    OR              reduce using rule 43 (expression -> ID ( ) .)
    NAND            reduce using rule 43 (expression -> ID ( ) .)
    $end            reduce using rule 43 (expression -> ID ( ) .)
    }               reduce using rule 43 (expression -> ID ( ) .)
    ;               reduce using rule 43 (expression -> ID ( ) .)
    THEN            reduce using rule 43 (expression -> ID ( ) .)
    DO              reduce using rule 43 (expression -> ID ( ) .)
    ,               reduce using rule 43 (expression -> ID ( ) .)
    )               reduce using rule 43 (expression -> ID ( ) .)
    ]               reduce using rule 43 (expression -> ID ( ) .)
    LAMBDA          reduce using rule 43 (expression -> ID ( ) .)
    IN              reduce using rule 43 (expression -> ID ( ) .)
    ELSE            reduce using rule 43 (expression -> ID ( ) .)


state 81

    (44) expression -> ID ( expression_list . )

    )               shift and go to state 103


state 82

    (52) expression -> ID [ NUMBER . ]

    ]               shift and go to state 104


state 83

    (54) expression -> ID dots ID .
    (55) expression -> ID dots ID . ( )
    (56) expression -> ID dots ID . ( expression_list )

    +               reduce using rule 54 (expression -> ID dots ID .)
    -               reduce using rule 54 (expression -> ID dots ID .)
    *               reduce using rule 54 (expression -> ID dots ID .)
    /               reduce using rule 54 (expression -> ID dots ID .)
    AND             reduce using rule 54 (expression -> ID dots ID .)
    EQ              reduce using rule 54 (expression -> ID dots ID .)
    =               reduce using rule 54 (expression -> ID dots ID .)
    >               reduce using rule 54 (expression -> ID dots ID .)
    <               reduce using rule 54 (expression -> ID dots ID .)
    GE              reduce using rule 54 (expression -> ID dots ID .)
    LE              reduce using rule 54 (expression -> ID dots ID .)
    NEQS            reduce using rule 54 (expression -> ID dots ID .)
    OR              reduce using rule 54 (expression -> ID dots ID .)
    NAND            reduce using rule 54 (expression -> ID dots ID .)
    $end            reduce using rule 54 (expression -> ID dots ID .)
    }               reduce using rule 54 (expression -> ID dots ID .)
    ;               reduce using rule 54 (expression -> ID dots ID .)
    THEN            reduce using rule 54 (expression -> ID dots ID .)
    DO              reduce using rule 54 (expression -> ID dots ID .)
    ,               reduce using rule 54 (expression -> ID dots ID .)
    )               reduce using rule 54 (expression -> ID dots ID .)
    ]               reduce using rule 54 (expression -> ID dots ID .)
    LAMBDA          reduce using rule 54 (expression -> ID dots ID .)
    IN              reduce using rule 54 (expression -> ID dots ID .)
    ELSE            reduce using rule 54 (expression -> ID dots ID .)
    (               shift and go to state 105


state 84

    (46) assign_expression -> ID ASSIGN expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    }               reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    ;               reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    THEN            reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    DO              reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    ,               reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    )               reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    ]               reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    LAMBDA          reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    IN              reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    ELSE            reduce using rule 46 (assign_expression -> ID ASSIGN expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! -               [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! *               [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! /               [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! AND             [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! EQ              [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! =               [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! >               [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! <               [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! GE              [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! LE              [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! NEQS            [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! OR              [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]
  ! NAND            [ reduce using rule 46 (assign_expression -> ID ASSIGN expression .) ]


state 85

    (47) assign_expression -> ID ASSIGN lambda_expression .
    (60) expression -> lambda_expression .

  ! reduce/reduce conflict for + resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for - resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for * resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for / resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for AND resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for EQ resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for = resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for > resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for < resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for GE resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for LE resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for NEQS resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for OR resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for NAND resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for $end resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for } resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for ; resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for THEN resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for DO resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for , resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for ) resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for ] resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for IN resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    +               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    -               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    *               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    /               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    AND             reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    EQ              reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    =               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    >               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    <               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    GE              reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    LE              reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    NEQS            reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    OR              reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    NAND            reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    $end            reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    }               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    ;               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    THEN            reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    DO              reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    ,               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    )               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    ]               reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    LAMBDA          reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    IN              reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)
    ELSE            reduce using rule 47 (assign_expression -> ID ASSIGN lambda_expression .)

  ! +               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! -               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! *               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! /               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! AND             [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! =               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! >               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! <               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! GE              [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! LE              [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! NEQS            [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! OR              [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! NAND            [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! $end            [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! }               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! ;               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! THEN            [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! DO              [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! ,               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! )               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! ]               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! LAMBDA          [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! IN              [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! ELSE            [ reduce using rule 60 (expression -> lambda_expression .) ]


state 86

    (51) dots -> . dots .

    ID              reduce using rule 51 (dots -> . dots .)
    -               reduce using rule 51 (dots -> . dots .)
    STRUCT          reduce using rule 51 (dots -> . dots .)
    NUMBER          reduce using rule 51 (dots -> . dots .)
    {               reduce using rule 51 (dots -> . dots .)
    EXTEND          reduce using rule 51 (dots -> . dots .)
    LOCAL           reduce using rule 51 (dots -> . dots .)
    BOOL            reduce using rule 51 (dots -> . dots .)
    IF              reduce using rule 51 (dots -> . dots .)
    IMPORT          reduce using rule 51 (dots -> . dots .)
    FLOAT           reduce using rule 51 (dots -> . dots .)
    STRING          reduce using rule 51 (dots -> . dots .)
    LOOP            reduce using rule 51 (dots -> . dots .)
    CHAR            reduce using rule 51 (dots -> . dots .)
    FOR             reduce using rule 51 (dots -> . dots .)
    WHILE           reduce using rule 51 (dots -> . dots .)
    [               reduce using rule 51 (dots -> . dots .)
    (               reduce using rule 51 (dots -> . dots .)
    NOT             reduce using rule 51 (dots -> . dots .)
    LAMBDA_START    reduce using rule 51 (dots -> . dots .)


state 87

    (12) expression -> LOCAL ID ASSIGN . expression IN expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 106
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 88

    (14) expression -> IF expression THEN . expression
    (21) expression -> IF expression THEN . expression ELSE expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 107
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 89

    (15) expression -> IMPORT ID AS . ID

    ID              shift and go to state 108


state 90

    (37) expression -> LOOP expression DO . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 109
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 91

    (39) expression -> FOR expression ; . expression ; expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 110
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 92

    (53) expression -> ( expression_list ) .

    +               reduce using rule 53 (expression -> ( expression_list ) .)
    -               reduce using rule 53 (expression -> ( expression_list ) .)
    *               reduce using rule 53 (expression -> ( expression_list ) .)
    /               reduce using rule 53 (expression -> ( expression_list ) .)
    AND             reduce using rule 53 (expression -> ( expression_list ) .)
    EQ              reduce using rule 53 (expression -> ( expression_list ) .)
    =               reduce using rule 53 (expression -> ( expression_list ) .)
    >               reduce using rule 53 (expression -> ( expression_list ) .)
    <               reduce using rule 53 (expression -> ( expression_list ) .)
    GE              reduce using rule 53 (expression -> ( expression_list ) .)
    LE              reduce using rule 53 (expression -> ( expression_list ) .)
    NEQS            reduce using rule 53 (expression -> ( expression_list ) .)
    OR              reduce using rule 53 (expression -> ( expression_list ) .)
    NAND            reduce using rule 53 (expression -> ( expression_list ) .)
    $end            reduce using rule 53 (expression -> ( expression_list ) .)
    }               reduce using rule 53 (expression -> ( expression_list ) .)
    ;               reduce using rule 53 (expression -> ( expression_list ) .)
    THEN            reduce using rule 53 (expression -> ( expression_list ) .)
    DO              reduce using rule 53 (expression -> ( expression_list ) .)
    ,               reduce using rule 53 (expression -> ( expression_list ) .)
    )               reduce using rule 53 (expression -> ( expression_list ) .)
    ]               reduce using rule 53 (expression -> ( expression_list ) .)
    LAMBDA          reduce using rule 53 (expression -> ( expression_list ) .)
    IN              reduce using rule 53 (expression -> ( expression_list ) .)
    ELSE            reduce using rule 53 (expression -> ( expression_list ) .)


state 93

    (7) expression_list -> expression , . expression_list
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 54
    expression_list                shift and go to state 111
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 94

    (45) expression -> WHILE expression DO . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 112
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 95

    (49) expression -> [ expression_list ] .

    +               reduce using rule 49 (expression -> [ expression_list ] .)
    -               reduce using rule 49 (expression -> [ expression_list ] .)
    *               reduce using rule 49 (expression -> [ expression_list ] .)
    /               reduce using rule 49 (expression -> [ expression_list ] .)
    AND             reduce using rule 49 (expression -> [ expression_list ] .)
    EQ              reduce using rule 49 (expression -> [ expression_list ] .)
    =               reduce using rule 49 (expression -> [ expression_list ] .)
    >               reduce using rule 49 (expression -> [ expression_list ] .)
    <               reduce using rule 49 (expression -> [ expression_list ] .)
    GE              reduce using rule 49 (expression -> [ expression_list ] .)
    LE              reduce using rule 49 (expression -> [ expression_list ] .)
    NEQS            reduce using rule 49 (expression -> [ expression_list ] .)
    OR              reduce using rule 49 (expression -> [ expression_list ] .)
    NAND            reduce using rule 49 (expression -> [ expression_list ] .)
    $end            reduce using rule 49 (expression -> [ expression_list ] .)
    }               reduce using rule 49 (expression -> [ expression_list ] .)
    ;               reduce using rule 49 (expression -> [ expression_list ] .)
    THEN            reduce using rule 49 (expression -> [ expression_list ] .)
    DO              reduce using rule 49 (expression -> [ expression_list ] .)
    ,               reduce using rule 49 (expression -> [ expression_list ] .)
    )               reduce using rule 49 (expression -> [ expression_list ] .)
    ]               reduce using rule 49 (expression -> [ expression_list ] .)
    LAMBDA          reduce using rule 49 (expression -> [ expression_list ] .)
    IN              reduce using rule 49 (expression -> [ expression_list ] .)
    ELSE            reduce using rule 49 (expression -> [ expression_list ] .)


state 96

    (58) lambda_expression -> LAMBDA_START LAMBDA expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    }               reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    ;               reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    THEN            reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    DO              reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    ,               reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    )               reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    ]               reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    LAMBDA          reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    IN              reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    ELSE            reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! -               [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! *               [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! /               [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! AND             [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! EQ              [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! =               [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! >               [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! <               [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! GE              [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! LE              [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! NEQS            [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! OR              [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]
  ! NAND            [ reduce using rule 58 (lambda_expression -> LAMBDA_START LAMBDA expression .) ]


state 97

    (59) lambda_expression -> LAMBDA_START expression_list LAMBDA . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 113
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 98

    (6) expression -> STRUCT { sequence_struct } .

    +               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    -               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    *               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    /               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    AND             reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    EQ              reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    =               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    >               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    <               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    GE              reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    LE              reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    NEQS            reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    OR              reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    NAND            reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    $end            reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    }               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    ;               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    THEN            reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    DO              reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    ,               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    )               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    ]               reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    LAMBDA          reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    IN              reduce using rule 6 (expression -> STRUCT { sequence_struct } .)
    ELSE            reduce using rule 6 (expression -> STRUCT { sequence_struct } .)


state 99

    (17) sequence_struct -> sequence_struct ; . struct_assign
    (34) struct_assign -> . . ID ASSIGN expression
    (35) struct_assign -> . . ID ASSIGN lambda_expression
    (36) struct_assign -> . . ID ASSIGN lambda_expression_struct

    .               shift and go to state 76

    struct_assign                  shift and go to state 114

state 100

    (34) struct_assign -> . ID . ASSIGN expression
    (35) struct_assign -> . ID . ASSIGN lambda_expression
    (36) struct_assign -> . ID . ASSIGN lambda_expression_struct

    ASSIGN          shift and go to state 115


state 101

    (19) sequence -> sequence ; expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 19 (sequence -> sequence ; expression .)
    ;               reduce using rule 19 (sequence -> sequence ; expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 102

    (11) expression -> EXTEND ID { sequence_struct . }
    (17) sequence_struct -> sequence_struct . ; struct_assign

    }               shift and go to state 116
    ;               shift and go to state 99


state 103

    (44) expression -> ID ( expression_list ) .

    +               reduce using rule 44 (expression -> ID ( expression_list ) .)
    -               reduce using rule 44 (expression -> ID ( expression_list ) .)
    *               reduce using rule 44 (expression -> ID ( expression_list ) .)
    /               reduce using rule 44 (expression -> ID ( expression_list ) .)
    AND             reduce using rule 44 (expression -> ID ( expression_list ) .)
    EQ              reduce using rule 44 (expression -> ID ( expression_list ) .)
    =               reduce using rule 44 (expression -> ID ( expression_list ) .)
    >               reduce using rule 44 (expression -> ID ( expression_list ) .)
    <               reduce using rule 44 (expression -> ID ( expression_list ) .)
    GE              reduce using rule 44 (expression -> ID ( expression_list ) .)
    LE              reduce using rule 44 (expression -> ID ( expression_list ) .)
    NEQS            reduce using rule 44 (expression -> ID ( expression_list ) .)
    OR              reduce using rule 44 (expression -> ID ( expression_list ) .)
    NAND            reduce using rule 44 (expression -> ID ( expression_list ) .)
    $end            reduce using rule 44 (expression -> ID ( expression_list ) .)
    }               reduce using rule 44 (expression -> ID ( expression_list ) .)
    ;               reduce using rule 44 (expression -> ID ( expression_list ) .)
    THEN            reduce using rule 44 (expression -> ID ( expression_list ) .)
    DO              reduce using rule 44 (expression -> ID ( expression_list ) .)
    ,               reduce using rule 44 (expression -> ID ( expression_list ) .)
    )               reduce using rule 44 (expression -> ID ( expression_list ) .)
    ]               reduce using rule 44 (expression -> ID ( expression_list ) .)
    LAMBDA          reduce using rule 44 (expression -> ID ( expression_list ) .)
    IN              reduce using rule 44 (expression -> ID ( expression_list ) .)
    ELSE            reduce using rule 44 (expression -> ID ( expression_list ) .)


state 104

    (52) expression -> ID [ NUMBER ] .

    +               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    AND             reduce using rule 52 (expression -> ID [ NUMBER ] .)
    EQ              reduce using rule 52 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    GE              reduce using rule 52 (expression -> ID [ NUMBER ] .)
    LE              reduce using rule 52 (expression -> ID [ NUMBER ] .)
    NEQS            reduce using rule 52 (expression -> ID [ NUMBER ] .)
    OR              reduce using rule 52 (expression -> ID [ NUMBER ] .)
    NAND            reduce using rule 52 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 52 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    THEN            reduce using rule 52 (expression -> ID [ NUMBER ] .)
    DO              reduce using rule 52 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 52 (expression -> ID [ NUMBER ] .)
    LAMBDA          reduce using rule 52 (expression -> ID [ NUMBER ] .)
    IN              reduce using rule 52 (expression -> ID [ NUMBER ] .)
    ELSE            reduce using rule 52 (expression -> ID [ NUMBER ] .)


state 105

    (55) expression -> ID dots ID ( . )
    (56) expression -> ID dots ID ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    )               shift and go to state 117
    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression_list                shift and go to state 118
    expression                     shift and go to state 54
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 106

    (12) expression -> LOCAL ID ASSIGN expression . IN expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    IN              shift and go to state 119
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 107

    (14) expression -> IF expression THEN expression .
    (21) expression -> IF expression THEN expression . ELSE expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 14 (expression -> IF expression THEN expression .)
    }               reduce using rule 14 (expression -> IF expression THEN expression .)
    ;               reduce using rule 14 (expression -> IF expression THEN expression .)
    THEN            reduce using rule 14 (expression -> IF expression THEN expression .)
    DO              reduce using rule 14 (expression -> IF expression THEN expression .)
    ,               reduce using rule 14 (expression -> IF expression THEN expression .)
    )               reduce using rule 14 (expression -> IF expression THEN expression .)
    ]               reduce using rule 14 (expression -> IF expression THEN expression .)
    LAMBDA          reduce using rule 14 (expression -> IF expression THEN expression .)
    IN              reduce using rule 14 (expression -> IF expression THEN expression .)
    ELSE            shift and go to state 120
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! -               [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! *               [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! /               [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! AND             [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! EQ              [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! =               [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! >               [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! <               [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! GE              [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! LE              [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! NEQS            [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! OR              [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! NAND            [ reduce using rule 14 (expression -> IF expression THEN expression .) ]
  ! ELSE            [ reduce using rule 14 (expression -> IF expression THEN expression .) ]


state 108

    (15) expression -> IMPORT ID AS ID .

    +               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    -               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    *               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    /               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    AND             reduce using rule 15 (expression -> IMPORT ID AS ID .)
    EQ              reduce using rule 15 (expression -> IMPORT ID AS ID .)
    =               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    >               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    <               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    GE              reduce using rule 15 (expression -> IMPORT ID AS ID .)
    LE              reduce using rule 15 (expression -> IMPORT ID AS ID .)
    NEQS            reduce using rule 15 (expression -> IMPORT ID AS ID .)
    OR              reduce using rule 15 (expression -> IMPORT ID AS ID .)
    NAND            reduce using rule 15 (expression -> IMPORT ID AS ID .)
    $end            reduce using rule 15 (expression -> IMPORT ID AS ID .)
    }               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    ;               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    THEN            reduce using rule 15 (expression -> IMPORT ID AS ID .)
    DO              reduce using rule 15 (expression -> IMPORT ID AS ID .)
    ,               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    )               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    ]               reduce using rule 15 (expression -> IMPORT ID AS ID .)
    LAMBDA          reduce using rule 15 (expression -> IMPORT ID AS ID .)
    IN              reduce using rule 15 (expression -> IMPORT ID AS ID .)
    ELSE            reduce using rule 15 (expression -> IMPORT ID AS ID .)


state 109

    (37) expression -> LOOP expression DO expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 37 (expression -> LOOP expression DO expression .)
    }               reduce using rule 37 (expression -> LOOP expression DO expression .)
    ;               reduce using rule 37 (expression -> LOOP expression DO expression .)
    THEN            reduce using rule 37 (expression -> LOOP expression DO expression .)
    DO              reduce using rule 37 (expression -> LOOP expression DO expression .)
    ,               reduce using rule 37 (expression -> LOOP expression DO expression .)
    )               reduce using rule 37 (expression -> LOOP expression DO expression .)
    ]               reduce using rule 37 (expression -> LOOP expression DO expression .)
    LAMBDA          reduce using rule 37 (expression -> LOOP expression DO expression .)
    IN              reduce using rule 37 (expression -> LOOP expression DO expression .)
    ELSE            reduce using rule 37 (expression -> LOOP expression DO expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! -               [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! *               [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! /               [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! AND             [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! EQ              [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! =               [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! >               [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! <               [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! GE              [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! LE              [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! NEQS            [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! OR              [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]
  ! NAND            [ reduce using rule 37 (expression -> LOOP expression DO expression .) ]


state 110

    (39) expression -> FOR expression ; expression . ; expression DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    ;               shift and go to state 121
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 111

    (7) expression_list -> expression , expression_list .

    )               reduce using rule 7 (expression_list -> expression , expression_list .)
    ]               reduce using rule 7 (expression_list -> expression , expression_list .)
    LAMBDA          reduce using rule 7 (expression_list -> expression , expression_list .)


state 112

    (45) expression -> WHILE expression DO expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 45 (expression -> WHILE expression DO expression .)
    }               reduce using rule 45 (expression -> WHILE expression DO expression .)
    ;               reduce using rule 45 (expression -> WHILE expression DO expression .)
    THEN            reduce using rule 45 (expression -> WHILE expression DO expression .)
    DO              reduce using rule 45 (expression -> WHILE expression DO expression .)
    ,               reduce using rule 45 (expression -> WHILE expression DO expression .)
    )               reduce using rule 45 (expression -> WHILE expression DO expression .)
    ]               reduce using rule 45 (expression -> WHILE expression DO expression .)
    LAMBDA          reduce using rule 45 (expression -> WHILE expression DO expression .)
    IN              reduce using rule 45 (expression -> WHILE expression DO expression .)
    ELSE            reduce using rule 45 (expression -> WHILE expression DO expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! -               [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! *               [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! /               [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! AND             [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! EQ              [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! =               [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! >               [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! <               [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! GE              [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! LE              [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! NEQS            [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! OR              [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]
  ! NAND            [ reduce using rule 45 (expression -> WHILE expression DO expression .) ]


state 113

    (59) lambda_expression -> LAMBDA_START expression_list LAMBDA expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    }               reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    ;               reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    THEN            reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    DO              reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    ,               reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    )               reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    ]               reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    LAMBDA          reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    IN              reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    ELSE            reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! -               [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! *               [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! /               [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! AND             [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! EQ              [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! =               [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! >               [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! <               [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! GE              [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! LE              [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! NEQS            [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! OR              [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! NAND            [ reduce using rule 59 (lambda_expression -> LAMBDA_START expression_list LAMBDA expression .) ]


state 114

    (17) sequence_struct -> sequence_struct ; struct_assign .

    }               reduce using rule 17 (sequence_struct -> sequence_struct ; struct_assign .)
    ;               reduce using rule 17 (sequence_struct -> sequence_struct ; struct_assign .)


state 115

    (34) struct_assign -> . ID ASSIGN . expression
    (35) struct_assign -> . ID ASSIGN . lambda_expression
    (36) struct_assign -> . ID ASSIGN . lambda_expression_struct
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression
    (41) lambda_expression_struct -> . LAMBDA_START LAMBDA dots expression
    (42) lambda_expression_struct -> . LAMBDA_START expression_list LAMBDA dots expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 125

    expression                     shift and go to state 122
    lambda_expression              shift and go to state 123
    lambda_expression_struct       shift and go to state 124
    assign_expression              shift and go to state 19

state 116

    (11) expression -> EXTEND ID { sequence_struct } .

    +               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    -               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    *               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    /               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    AND             reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    EQ              reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    =               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    >               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    <               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    GE              reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    LE              reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    NEQS            reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    OR              reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    NAND            reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    $end            reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    }               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    ;               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    THEN            reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    DO              reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    ,               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    )               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    ]               reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    LAMBDA          reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    IN              reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)
    ELSE            reduce using rule 11 (expression -> EXTEND ID { sequence_struct } .)


state 117

    (55) expression -> ID dots ID ( ) .

    +               reduce using rule 55 (expression -> ID dots ID ( ) .)
    -               reduce using rule 55 (expression -> ID dots ID ( ) .)
    *               reduce using rule 55 (expression -> ID dots ID ( ) .)
    /               reduce using rule 55 (expression -> ID dots ID ( ) .)
    AND             reduce using rule 55 (expression -> ID dots ID ( ) .)
    EQ              reduce using rule 55 (expression -> ID dots ID ( ) .)
    =               reduce using rule 55 (expression -> ID dots ID ( ) .)
    >               reduce using rule 55 (expression -> ID dots ID ( ) .)
    <               reduce using rule 55 (expression -> ID dots ID ( ) .)
    GE              reduce using rule 55 (expression -> ID dots ID ( ) .)
    LE              reduce using rule 55 (expression -> ID dots ID ( ) .)
    NEQS            reduce using rule 55 (expression -> ID dots ID ( ) .)
    OR              reduce using rule 55 (expression -> ID dots ID ( ) .)
    NAND            reduce using rule 55 (expression -> ID dots ID ( ) .)
    $end            reduce using rule 55 (expression -> ID dots ID ( ) .)
    }               reduce using rule 55 (expression -> ID dots ID ( ) .)
    ;               reduce using rule 55 (expression -> ID dots ID ( ) .)
    THEN            reduce using rule 55 (expression -> ID dots ID ( ) .)
    DO              reduce using rule 55 (expression -> ID dots ID ( ) .)
    ,               reduce using rule 55 (expression -> ID dots ID ( ) .)
    )               reduce using rule 55 (expression -> ID dots ID ( ) .)
    ]               reduce using rule 55 (expression -> ID dots ID ( ) .)
    LAMBDA          reduce using rule 55 (expression -> ID dots ID ( ) .)
    IN              reduce using rule 55 (expression -> ID dots ID ( ) .)
    ELSE            reduce using rule 55 (expression -> ID dots ID ( ) .)


state 118

    (56) expression -> ID dots ID ( expression_list . )

    )               shift and go to state 126


state 119

    (12) expression -> LOCAL ID ASSIGN expression IN . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 127
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 120

    (21) expression -> IF expression THEN expression ELSE . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 128
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 121

    (39) expression -> FOR expression ; expression ; . expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 129
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 122

    (34) struct_assign -> . ID ASSIGN expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 34 (struct_assign -> . ID ASSIGN expression .)
    ;               reduce using rule 34 (struct_assign -> . ID ASSIGN expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 123

    (35) struct_assign -> . ID ASSIGN lambda_expression .
    (60) expression -> lambda_expression .

  ! reduce/reduce conflict for } resolved using rule 35 (struct_assign -> . ID ASSIGN lambda_expression .)
  ! reduce/reduce conflict for ; resolved using rule 35 (struct_assign -> . ID ASSIGN lambda_expression .)
    }               reduce using rule 35 (struct_assign -> . ID ASSIGN lambda_expression .)
    ;               reduce using rule 35 (struct_assign -> . ID ASSIGN lambda_expression .)
    +               reduce using rule 60 (expression -> lambda_expression .)
    -               reduce using rule 60 (expression -> lambda_expression .)
    *               reduce using rule 60 (expression -> lambda_expression .)
    /               reduce using rule 60 (expression -> lambda_expression .)
    AND             reduce using rule 60 (expression -> lambda_expression .)
    EQ              reduce using rule 60 (expression -> lambda_expression .)
    =               reduce using rule 60 (expression -> lambda_expression .)
    >               reduce using rule 60 (expression -> lambda_expression .)
    <               reduce using rule 60 (expression -> lambda_expression .)
    GE              reduce using rule 60 (expression -> lambda_expression .)
    LE              reduce using rule 60 (expression -> lambda_expression .)
    NEQS            reduce using rule 60 (expression -> lambda_expression .)
    OR              reduce using rule 60 (expression -> lambda_expression .)
    NAND            reduce using rule 60 (expression -> lambda_expression .)

  ! }               [ reduce using rule 60 (expression -> lambda_expression .) ]
  ! ;               [ reduce using rule 60 (expression -> lambda_expression .) ]


state 124

    (36) struct_assign -> . ID ASSIGN lambda_expression_struct .

    }               reduce using rule 36 (struct_assign -> . ID ASSIGN lambda_expression_struct .)
    ;               reduce using rule 36 (struct_assign -> . ID ASSIGN lambda_expression_struct .)


state 125

    (58) lambda_expression -> LAMBDA_START . LAMBDA expression
    (59) lambda_expression -> LAMBDA_START . expression_list LAMBDA expression
    (41) lambda_expression_struct -> LAMBDA_START . LAMBDA dots expression
    (42) lambda_expression_struct -> LAMBDA_START . expression_list LAMBDA dots expression
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    LAMBDA          shift and go to state 130
    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 54
    expression_list                shift and go to state 131
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 126

    (56) expression -> ID dots ID ( expression_list ) .

    +               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    -               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    *               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    /               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    AND             reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    EQ              reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    =               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    >               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    <               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    GE              reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    LE              reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    NEQS            reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    OR              reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    NAND            reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    $end            reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    }               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    ;               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    THEN            reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    DO              reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    ,               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    )               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    ]               reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    LAMBDA          reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    IN              reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)
    ELSE            reduce using rule 56 (expression -> ID dots ID ( expression_list ) .)


state 127

    (12) expression -> LOCAL ID ASSIGN expression IN expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NEQS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
    $end            reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    }               reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ;               reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    THEN            reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    DO              reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ,               reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    )               reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ]               reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    LAMBDA          reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    IN              reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ELSE            reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! -               [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! *               [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! /               [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! AND             [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! EQ              [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! =               [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! >               [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! <               [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! GE              [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! LE              [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! NEQS            [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! OR              [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! NAND            [ reduce using rule 12 (expression -> LOCAL ID ASSIGN expression IN expression .) ]


state 128

    (21) expression -> IF expression THEN expression ELSE expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    }               reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    ;               reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    DO              reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    ,               reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    )               reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    ]               reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    LAMBDA          reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    IN              reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! -               [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! *               [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! /               [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! AND             [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! EQ              [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! =               [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! >               [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! <               [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! GE              [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LE              [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! NEQS            [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! OR              [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]
  ! NAND            [ reduce using rule 21 (expression -> IF expression THEN expression ELSE expression .) ]


state 129

    (39) expression -> FOR expression ; expression ; expression . DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    DO              shift and go to state 132
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 130

    (58) lambda_expression -> LAMBDA_START LAMBDA . expression
    (41) lambda_expression_struct -> LAMBDA_START LAMBDA . dots expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (50) dots -> . .
    (51) dots -> . . dots
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    .               shift and go to state 47
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 96
    dots                           shift and go to state 133
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 131

    (59) lambda_expression -> LAMBDA_START expression_list . LAMBDA expression
    (42) lambda_expression_struct -> LAMBDA_START expression_list . LAMBDA dots expression

    LAMBDA          shift and go to state 134


state 132

    (39) expression -> FOR expression ; expression ; expression DO . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 135
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 133

    (41) lambda_expression_struct -> LAMBDA_START LAMBDA dots . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 136
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 134

    (59) lambda_expression -> LAMBDA_START expression_list LAMBDA . expression
    (42) lambda_expression_struct -> LAMBDA_START expression_list LAMBDA . dots expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (50) dots -> . .
    (51) dots -> . . dots
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    .               shift and go to state 47
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 113
    dots                           shift and go to state 137
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 135

    (39) expression -> FOR expression ; expression ; expression DO expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    }               reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    ;               reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    THEN            reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    DO              reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    ,               reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    )               reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    ]               reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    LAMBDA          reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    IN              reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    ELSE            reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

  ! +               [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! -               [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! *               [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! /               [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! AND             [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! EQ              [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! =               [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! >               [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! <               [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! GE              [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! LE              [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! NEQS            [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! OR              [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! NAND            [ reduce using rule 39 (expression -> FOR expression ; expression ; expression DO expression .) ]


state 136

    (41) lambda_expression_struct -> LAMBDA_START LAMBDA dots expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 41 (lambda_expression_struct -> LAMBDA_START LAMBDA dots expression .)
    ;               reduce using rule 41 (lambda_expression_struct -> LAMBDA_START LAMBDA dots expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37


state 137

    (42) lambda_expression_struct -> LAMBDA_START expression_list LAMBDA dots . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . STRUCT { sequence_struct }
    (9) expression -> . NUMBER
    (10) expression -> . { sequence }
    (11) expression -> . EXTEND ID { sequence_struct }
    (12) expression -> . LOCAL ID ASSIGN expression IN expression
    (13) expression -> . BOOL
    (14) expression -> . IF expression THEN expression
    (15) expression -> . IMPORT ID AS ID
    (20) expression -> . FLOAT
    (21) expression -> . IF expression THEN expression ELSE expression
    (22) expression -> . IMPORT ID
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (37) expression -> . LOOP expression DO expression
    (38) expression -> . CHAR
    (39) expression -> . FOR expression ; expression ; expression DO expression
    (40) expression -> . ID
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . WHILE expression DO expression
    (48) expression -> . assign_expression
    (49) expression -> . [ expression_list ]
    (52) expression -> . ID [ NUMBER ]
    (53) expression -> . ( expression_list )
    (54) expression -> . ID dots ID
    (55) expression -> . ID dots ID ( )
    (56) expression -> . ID dots ID ( expression_list )
    (57) expression -> . NOT expression
    (60) expression -> . lambda_expression
    (46) assign_expression -> . ID ASSIGN expression
    (47) assign_expression -> . ID ASSIGN lambda_expression
    (58) lambda_expression -> . LAMBDA_START LAMBDA expression
    (59) lambda_expression -> . LAMBDA_START expression_list LAMBDA expression

    -               shift and go to state 2
    STRUCT          shift and go to state 3
    NUMBER          shift and go to state 5
    {               shift and go to state 4
    EXTEND          shift and go to state 6
    LOCAL           shift and go to state 8
    BOOL            shift and go to state 9
    IF              shift and go to state 10
    IMPORT          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    FOR             shift and go to state 16
    ID              shift and go to state 7
    WHILE           shift and go to state 18
    [               shift and go to state 20
    (               shift and go to state 17
    NOT             shift and go to state 21
    LAMBDA_START    shift and go to state 23

    expression                     shift and go to state 138
    assign_expression              shift and go to state 19
    lambda_expression              shift and go to state 22

state 138

    (42) lambda_expression_struct -> LAMBDA_START expression_list LAMBDA dots expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 42 (lambda_expression_struct -> LAMBDA_START expression_list LAMBDA dots expression .)
    ;               reduce using rule 42 (lambda_expression_struct -> LAMBDA_START expression_list LAMBDA dots expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27
    AND             shift and go to state 28
    EQ              shift and go to state 29
    =               shift and go to state 30
    >               shift and go to state 31
    <               shift and go to state 32
    GE              shift and go to state 33
    LE              shift and go to state 34
    NEQS            shift and go to state 35
    OR              shift and go to state 36
    NAND            shift and go to state 37

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 127 resolved as shift
WARNING: shift/reduce conflict for - in state 127 resolved as shift
WARNING: shift/reduce conflict for * in state 127 resolved as shift
WARNING: shift/reduce conflict for / in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for = in state 127 resolved as shift
WARNING: shift/reduce conflict for > in state 127 resolved as shift
WARNING: shift/reduce conflict for < in state 127 resolved as shift
WARNING: shift/reduce conflict for GE in state 127 resolved as shift
WARNING: shift/reduce conflict for LE in state 127 resolved as shift
WARNING: shift/reduce conflict for NEQS in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for NAND in state 127 resolved as shift
WARNING: reduce/reduce conflict in state 85 resolved using rule (assign_expression -> ID ASSIGN lambda_expression)
WARNING: rejected rule (expression -> lambda_expression) in state 85
WARNING: reduce/reduce conflict in state 123 resolved using rule (struct_assign -> . ID ASSIGN lambda_expression)
WARNING: rejected rule (expression -> lambda_expression) in state 123
