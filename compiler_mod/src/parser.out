Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> letrec ID assign expression lambda expression
Rule 6     expression -> { sequence }
Rule 7     expression_list -> expression , expression_list
Rule 8     expression_list -> expression
Rule 9     expression -> expression and expression
Rule 10    expression -> expression eq expression
Rule 11    expression -> expression = expression
Rule 12    expression -> expression > expression
Rule 13    expression -> expression < expression
Rule 14    expression -> expression ge expression
Rule 15    expression -> expression le expression
Rule 16    expression -> expression neqs expression
Rule 17    expression -> expression or expression
Rule 18    expression -> expression nand expression
Rule 19    expression -> string
Rule 20    expression -> ID assign expression
Rule 21    expression -> import ID
Rule 22    expression -> - expression
Rule 23    expression -> char
Rule 24    expression -> if expression then expression
Rule 25    sequence -> sequence ; expression
Rule 26    sequence -> expression
Rule 27    expression -> expression + expression
Rule 28    expression -> expression - expression
Rule 29    expression -> expression * expression
Rule 30    expression -> expression / expression
Rule 31    expression -> [ expression_list ]
Rule 32    expression -> if expression then expression else expression
Rule 33    expression -> lambda_start lambda expression
Rule 34    expression -> lambda_start expression_list lambda expression
Rule 35    expression -> ID [ NUMBER ]
Rule 36    expression -> not expression
Rule 37    expression -> loop expression do expression
Rule 38    expression -> ( expression_list )
Rule 39    expression -> NUMBER
Rule 40    expression -> BOOL
Rule 41    expression -> ( expression )
Rule 42    expression -> for expression ; expression ; expression do expression
Rule 43    expression -> ID ( )
Rule 44    expression -> ID ( expression_list )
Rule 45    expression -> while expression do expression
Rule 46    expression -> struct { sequence }
Rule 47    expression -> extend ID { sequence }
Rule 48    dots -> .
Rule 49    dots -> . dots
Rule 50    dot_expression -> ID dots ID
Rule 51    expression -> dot_expression
Rule 52    expression -> dot_expression ( )
Rule 53    expression -> dot_expression ( expression_list )

Terminals, with rules where they appear

(                    : 38 41 43 44 52 53
)                    : 38 41 43 44 52 53
*                    : 29
+                    : 27
,                    : 7
-                    : 22 28
.                    : 48 49
/                    : 30
;                    : 25 42 42
<                    : 13
=                    : 11
>                    : 12
BOOL                 : 40
ID                   : 2 3 4 4 5 20 21 35 43 44 47 50 50
NUMBER               : 35 39
[                    : 31 35
]                    : 31 35
and                  : 9
as                   : 4
assign               : 2 5 20
char                 : 23
do                   : 37 42 45
else                 : 32
eq                   : 10
error                : 
extend               : 47
float                : 1
for                  : 42
ge                   : 14
if                   : 24 32
import               : 4 21
in                   : 2
lambda               : 5 33 34
lambda_start         : 33 34
le                   : 15
letrec               : 5
local                : 2
loop                 : 37
nand                 : 18
neqs                 : 16
not                  : 36
or                   : 17
string               : 19
struct               : 46
then                 : 24 32
while                : 45
{                    : 6 46 47
}                    : 6 46 47

Nonterminals, with rules where they appear

dot_expression       : 51 52 53
dots                 : 49 50
expression           : 2 2 5 5 7 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 20 22 24 24 25 26 27 27 28 28 29 29 30 30 32 32 32 33 34 36 37 37 41 42 42 42 42 45 45 0
expression_list      : 7 31 34 38 44 53
sequence             : 6 25 46 47

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 1
    dot_expression                 shift and go to state 23

state 1

    (0) S' -> expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    ,               reduce using rule 1 (expression -> float .)
    ]               reduce using rule 1 (expression -> float .)
    lambda          reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 38


state 4

    (3) expression -> ID .
    (20) expression -> ID . assign expression
    (35) expression -> ID . [ NUMBER ]
    (43) expression -> ID . ( )
    (44) expression -> ID . ( expression_list )
    (50) dot_expression -> ID . dots ID
    (48) dots -> . .
    (49) dots -> . . dots

    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    ,               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    lambda          reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    assign          shift and go to state 39
    [               shift and go to state 40
    (               shift and go to state 41
    .               shift and go to state 43

    dots                           shift and go to state 42

state 5

    (4) expression -> import . ID as ID
    (21) expression -> import . ID

    ID              shift and go to state 44


state 6

    (5) expression -> letrec . ID assign expression lambda expression

    ID              shift and go to state 45


state 7

    (6) expression -> { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    sequence                       shift and go to state 46
    expression                     shift and go to state 47
    dot_expression                 shift and go to state 23

state 8

    (19) expression -> string .

    and             reduce using rule 19 (expression -> string .)
    eq              reduce using rule 19 (expression -> string .)
    =               reduce using rule 19 (expression -> string .)
    >               reduce using rule 19 (expression -> string .)
    <               reduce using rule 19 (expression -> string .)
    ge              reduce using rule 19 (expression -> string .)
    le              reduce using rule 19 (expression -> string .)
    neqs            reduce using rule 19 (expression -> string .)
    or              reduce using rule 19 (expression -> string .)
    nand            reduce using rule 19 (expression -> string .)
    +               reduce using rule 19 (expression -> string .)
    -               reduce using rule 19 (expression -> string .)
    *               reduce using rule 19 (expression -> string .)
    /               reduce using rule 19 (expression -> string .)
    $end            reduce using rule 19 (expression -> string .)
    }               reduce using rule 19 (expression -> string .)
    ;               reduce using rule 19 (expression -> string .)
    then            reduce using rule 19 (expression -> string .)
    ,               reduce using rule 19 (expression -> string .)
    ]               reduce using rule 19 (expression -> string .)
    lambda          reduce using rule 19 (expression -> string .)
    do              reduce using rule 19 (expression -> string .)
    )               reduce using rule 19 (expression -> string .)
    in              reduce using rule 19 (expression -> string .)
    else            reduce using rule 19 (expression -> string .)


state 9

    (22) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 48
    dot_expression                 shift and go to state 23

state 10

    (23) expression -> char .

    and             reduce using rule 23 (expression -> char .)
    eq              reduce using rule 23 (expression -> char .)
    =               reduce using rule 23 (expression -> char .)
    >               reduce using rule 23 (expression -> char .)
    <               reduce using rule 23 (expression -> char .)
    ge              reduce using rule 23 (expression -> char .)
    le              reduce using rule 23 (expression -> char .)
    neqs            reduce using rule 23 (expression -> char .)
    or              reduce using rule 23 (expression -> char .)
    nand            reduce using rule 23 (expression -> char .)
    +               reduce using rule 23 (expression -> char .)
    -               reduce using rule 23 (expression -> char .)
    *               reduce using rule 23 (expression -> char .)
    /               reduce using rule 23 (expression -> char .)
    $end            reduce using rule 23 (expression -> char .)
    }               reduce using rule 23 (expression -> char .)
    ;               reduce using rule 23 (expression -> char .)
    then            reduce using rule 23 (expression -> char .)
    ,               reduce using rule 23 (expression -> char .)
    ]               reduce using rule 23 (expression -> char .)
    lambda          reduce using rule 23 (expression -> char .)
    do              reduce using rule 23 (expression -> char .)
    )               reduce using rule 23 (expression -> char .)
    in              reduce using rule 23 (expression -> char .)
    else            reduce using rule 23 (expression -> char .)


state 11

    (24) expression -> if . expression then expression
    (32) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 49
    dot_expression                 shift and go to state 23

state 12

    (31) expression -> [ . expression_list ]
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression_list                shift and go to state 50
    expression                     shift and go to state 51
    dot_expression                 shift and go to state 23

state 13

    (33) expression -> lambda_start . lambda expression
    (34) expression -> lambda_start . expression_list lambda expression
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    lambda          shift and go to state 52
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 51
    expression_list                shift and go to state 53
    dot_expression                 shift and go to state 23

state 14

    (39) expression -> NUMBER .

    and             reduce using rule 39 (expression -> NUMBER .)
    eq              reduce using rule 39 (expression -> NUMBER .)
    =               reduce using rule 39 (expression -> NUMBER .)
    >               reduce using rule 39 (expression -> NUMBER .)
    <               reduce using rule 39 (expression -> NUMBER .)
    ge              reduce using rule 39 (expression -> NUMBER .)
    le              reduce using rule 39 (expression -> NUMBER .)
    neqs            reduce using rule 39 (expression -> NUMBER .)
    or              reduce using rule 39 (expression -> NUMBER .)
    nand            reduce using rule 39 (expression -> NUMBER .)
    +               reduce using rule 39 (expression -> NUMBER .)
    -               reduce using rule 39 (expression -> NUMBER .)
    *               reduce using rule 39 (expression -> NUMBER .)
    /               reduce using rule 39 (expression -> NUMBER .)
    $end            reduce using rule 39 (expression -> NUMBER .)
    }               reduce using rule 39 (expression -> NUMBER .)
    ;               reduce using rule 39 (expression -> NUMBER .)
    then            reduce using rule 39 (expression -> NUMBER .)
    ,               reduce using rule 39 (expression -> NUMBER .)
    ]               reduce using rule 39 (expression -> NUMBER .)
    lambda          reduce using rule 39 (expression -> NUMBER .)
    do              reduce using rule 39 (expression -> NUMBER .)
    )               reduce using rule 39 (expression -> NUMBER .)
    in              reduce using rule 39 (expression -> NUMBER .)
    else            reduce using rule 39 (expression -> NUMBER .)


state 15

    (36) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 54
    dot_expression                 shift and go to state 23

state 16

    (37) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 55
    dot_expression                 shift and go to state 23

state 17

    (38) expression -> ( . expression_list )
    (41) expression -> ( . expression )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression_list                shift and go to state 56
    expression                     shift and go to state 57
    dot_expression                 shift and go to state 23

state 18

    (40) expression -> BOOL .

    and             reduce using rule 40 (expression -> BOOL .)
    eq              reduce using rule 40 (expression -> BOOL .)
    =               reduce using rule 40 (expression -> BOOL .)
    >               reduce using rule 40 (expression -> BOOL .)
    <               reduce using rule 40 (expression -> BOOL .)
    ge              reduce using rule 40 (expression -> BOOL .)
    le              reduce using rule 40 (expression -> BOOL .)
    neqs            reduce using rule 40 (expression -> BOOL .)
    or              reduce using rule 40 (expression -> BOOL .)
    nand            reduce using rule 40 (expression -> BOOL .)
    +               reduce using rule 40 (expression -> BOOL .)
    -               reduce using rule 40 (expression -> BOOL .)
    *               reduce using rule 40 (expression -> BOOL .)
    /               reduce using rule 40 (expression -> BOOL .)
    $end            reduce using rule 40 (expression -> BOOL .)
    }               reduce using rule 40 (expression -> BOOL .)
    ;               reduce using rule 40 (expression -> BOOL .)
    then            reduce using rule 40 (expression -> BOOL .)
    ,               reduce using rule 40 (expression -> BOOL .)
    ]               reduce using rule 40 (expression -> BOOL .)
    lambda          reduce using rule 40 (expression -> BOOL .)
    do              reduce using rule 40 (expression -> BOOL .)
    )               reduce using rule 40 (expression -> BOOL .)
    in              reduce using rule 40 (expression -> BOOL .)
    else            reduce using rule 40 (expression -> BOOL .)


state 19

    (42) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 58
    dot_expression                 shift and go to state 23

state 20

    (45) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 59
    dot_expression                 shift and go to state 23

state 21

    (46) expression -> struct . { sequence }

    {               shift and go to state 60


state 22

    (47) expression -> extend . ID { sequence }

    ID              shift and go to state 61


state 23

    (51) expression -> dot_expression .
    (52) expression -> dot_expression . ( )
    (53) expression -> dot_expression . ( expression_list )

    and             reduce using rule 51 (expression -> dot_expression .)
    eq              reduce using rule 51 (expression -> dot_expression .)
    =               reduce using rule 51 (expression -> dot_expression .)
    >               reduce using rule 51 (expression -> dot_expression .)
    <               reduce using rule 51 (expression -> dot_expression .)
    ge              reduce using rule 51 (expression -> dot_expression .)
    le              reduce using rule 51 (expression -> dot_expression .)
    neqs            reduce using rule 51 (expression -> dot_expression .)
    or              reduce using rule 51 (expression -> dot_expression .)
    nand            reduce using rule 51 (expression -> dot_expression .)
    +               reduce using rule 51 (expression -> dot_expression .)
    -               reduce using rule 51 (expression -> dot_expression .)
    *               reduce using rule 51 (expression -> dot_expression .)
    /               reduce using rule 51 (expression -> dot_expression .)
    $end            reduce using rule 51 (expression -> dot_expression .)
    }               reduce using rule 51 (expression -> dot_expression .)
    ;               reduce using rule 51 (expression -> dot_expression .)
    then            reduce using rule 51 (expression -> dot_expression .)
    ,               reduce using rule 51 (expression -> dot_expression .)
    ]               reduce using rule 51 (expression -> dot_expression .)
    lambda          reduce using rule 51 (expression -> dot_expression .)
    do              reduce using rule 51 (expression -> dot_expression .)
    )               reduce using rule 51 (expression -> dot_expression .)
    in              reduce using rule 51 (expression -> dot_expression .)
    else            reduce using rule 51 (expression -> dot_expression .)
    (               shift and go to state 62


state 24

    (9) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 63
    dot_expression                 shift and go to state 23

state 25

    (10) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 64
    dot_expression                 shift and go to state 23

state 26

    (11) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 65
    dot_expression                 shift and go to state 23

state 27

    (12) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 66
    dot_expression                 shift and go to state 23

state 28

    (13) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 67
    dot_expression                 shift and go to state 23

state 29

    (14) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 68
    dot_expression                 shift and go to state 23

state 30

    (15) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 69
    dot_expression                 shift and go to state 23

state 31

    (16) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 70
    dot_expression                 shift and go to state 23

state 32

    (17) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 71
    dot_expression                 shift and go to state 23

state 33

    (18) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 72
    dot_expression                 shift and go to state 23

state 34

    (27) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 73
    dot_expression                 shift and go to state 23

state 35

    (28) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 74
    dot_expression                 shift and go to state 23

state 36

    (29) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 75
    dot_expression                 shift and go to state 23

state 37

    (30) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 76
    dot_expression                 shift and go to state 23

state 38

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 77


state 39

    (20) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 78
    dot_expression                 shift and go to state 23

state 40

    (35) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 79


state 41

    (43) expression -> ID ( . )
    (44) expression -> ID ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    )               shift and go to state 80
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression_list                shift and go to state 81
    expression                     shift and go to state 51
    dot_expression                 shift and go to state 23

state 42

    (50) dot_expression -> ID dots . ID

    ID              shift and go to state 82


state 43

    (48) dots -> . .
    (49) dots -> . . dots
    (48) dots -> . .
    (49) dots -> . . dots

    ID              reduce using rule 48 (dots -> . .)
    .               shift and go to state 43

    dots                           shift and go to state 83

state 44

    (4) expression -> import ID . as ID
    (21) expression -> import ID .

    as              shift and go to state 84
    and             reduce using rule 21 (expression -> import ID .)
    eq              reduce using rule 21 (expression -> import ID .)
    =               reduce using rule 21 (expression -> import ID .)
    >               reduce using rule 21 (expression -> import ID .)
    <               reduce using rule 21 (expression -> import ID .)
    ge              reduce using rule 21 (expression -> import ID .)
    le              reduce using rule 21 (expression -> import ID .)
    neqs            reduce using rule 21 (expression -> import ID .)
    or              reduce using rule 21 (expression -> import ID .)
    nand            reduce using rule 21 (expression -> import ID .)
    +               reduce using rule 21 (expression -> import ID .)
    -               reduce using rule 21 (expression -> import ID .)
    *               reduce using rule 21 (expression -> import ID .)
    /               reduce using rule 21 (expression -> import ID .)
    $end            reduce using rule 21 (expression -> import ID .)
    }               reduce using rule 21 (expression -> import ID .)
    ;               reduce using rule 21 (expression -> import ID .)
    then            reduce using rule 21 (expression -> import ID .)
    ,               reduce using rule 21 (expression -> import ID .)
    ]               reduce using rule 21 (expression -> import ID .)
    lambda          reduce using rule 21 (expression -> import ID .)
    do              reduce using rule 21 (expression -> import ID .)
    )               reduce using rule 21 (expression -> import ID .)
    in              reduce using rule 21 (expression -> import ID .)
    else            reduce using rule 21 (expression -> import ID .)


state 45

    (5) expression -> letrec ID . assign expression lambda expression

    assign          shift and go to state 85


state 46

    (6) expression -> { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 86
    ;               shift and go to state 87


state 47

    (26) sequence -> expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    }               reduce using rule 26 (sequence -> expression .)
    ;               reduce using rule 26 (sequence -> expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 48

    (22) expression -> - expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 22 (expression -> - expression .)
    eq              reduce using rule 22 (expression -> - expression .)
    =               reduce using rule 22 (expression -> - expression .)
    >               reduce using rule 22 (expression -> - expression .)
    <               reduce using rule 22 (expression -> - expression .)
    ge              reduce using rule 22 (expression -> - expression .)
    le              reduce using rule 22 (expression -> - expression .)
    neqs            reduce using rule 22 (expression -> - expression .)
    or              reduce using rule 22 (expression -> - expression .)
    nand            reduce using rule 22 (expression -> - expression .)
    +               reduce using rule 22 (expression -> - expression .)
    -               reduce using rule 22 (expression -> - expression .)
    *               reduce using rule 22 (expression -> - expression .)
    /               reduce using rule 22 (expression -> - expression .)
    $end            reduce using rule 22 (expression -> - expression .)
    }               reduce using rule 22 (expression -> - expression .)
    ;               reduce using rule 22 (expression -> - expression .)
    then            reduce using rule 22 (expression -> - expression .)
    ,               reduce using rule 22 (expression -> - expression .)
    ]               reduce using rule 22 (expression -> - expression .)
    lambda          reduce using rule 22 (expression -> - expression .)
    do              reduce using rule 22 (expression -> - expression .)
    )               reduce using rule 22 (expression -> - expression .)
    in              reduce using rule 22 (expression -> - expression .)
    else            reduce using rule 22 (expression -> - expression .)

  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 49

    (24) expression -> if expression . then expression
    (32) expression -> if expression . then expression else expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    then            shift and go to state 88
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 50

    (31) expression -> [ expression_list . ]

    ]               shift and go to state 89


state 51

    (7) expression_list -> expression . , expression_list
    (8) expression_list -> expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ,               shift and go to state 90
    ]               reduce using rule 8 (expression_list -> expression .)
    lambda          reduce using rule 8 (expression_list -> expression .)
    )               reduce using rule 8 (expression_list -> expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 52

    (33) expression -> lambda_start lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 91
    dot_expression                 shift and go to state 23

state 53

    (34) expression -> lambda_start expression_list . lambda expression

    lambda          shift and go to state 92


state 54

    (36) expression -> not expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 36 (expression -> not expression .)
    eq              reduce using rule 36 (expression -> not expression .)
    =               reduce using rule 36 (expression -> not expression .)
    >               reduce using rule 36 (expression -> not expression .)
    <               reduce using rule 36 (expression -> not expression .)
    ge              reduce using rule 36 (expression -> not expression .)
    le              reduce using rule 36 (expression -> not expression .)
    neqs            reduce using rule 36 (expression -> not expression .)
    or              reduce using rule 36 (expression -> not expression .)
    nand            reduce using rule 36 (expression -> not expression .)
    +               reduce using rule 36 (expression -> not expression .)
    -               reduce using rule 36 (expression -> not expression .)
    *               reduce using rule 36 (expression -> not expression .)
    /               reduce using rule 36 (expression -> not expression .)
    $end            reduce using rule 36 (expression -> not expression .)
    }               reduce using rule 36 (expression -> not expression .)
    ;               reduce using rule 36 (expression -> not expression .)
    then            reduce using rule 36 (expression -> not expression .)
    ,               reduce using rule 36 (expression -> not expression .)
    ]               reduce using rule 36 (expression -> not expression .)
    lambda          reduce using rule 36 (expression -> not expression .)
    do              reduce using rule 36 (expression -> not expression .)
    )               reduce using rule 36 (expression -> not expression .)
    in              reduce using rule 36 (expression -> not expression .)
    else            reduce using rule 36 (expression -> not expression .)

  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 55

    (37) expression -> loop expression . do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 93
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 56

    (38) expression -> ( expression_list . )

    )               shift and go to state 94


state 57

    (41) expression -> ( expression . )
    (7) expression_list -> expression . , expression_list
    (8) expression_list -> expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 95
    ,               shift and go to state 90
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! )               [ reduce using rule 8 (expression_list -> expression .) ]


state 58

    (42) expression -> for expression . ; expression ; expression do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ;               shift and go to state 96
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 59

    (45) expression -> while expression . do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 97
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 60

    (46) expression -> struct { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    sequence                       shift and go to state 98
    expression                     shift and go to state 47
    dot_expression                 shift and go to state 23

state 61

    (47) expression -> extend ID . { sequence }

    {               shift and go to state 99


state 62

    (52) expression -> dot_expression ( . )
    (53) expression -> dot_expression ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    )               shift and go to state 100
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    dot_expression                 shift and go to state 23
    expression_list                shift and go to state 101
    expression                     shift and go to state 51

state 63

    (9) expression -> expression and expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression and expression .)
    or              reduce using rule 9 (expression -> expression and expression .)
    nand            reduce using rule 9 (expression -> expression and expression .)
    $end            reduce using rule 9 (expression -> expression and expression .)
    }               reduce using rule 9 (expression -> expression and expression .)
    ;               reduce using rule 9 (expression -> expression and expression .)
    then            reduce using rule 9 (expression -> expression and expression .)
    ,               reduce using rule 9 (expression -> expression and expression .)
    ]               reduce using rule 9 (expression -> expression and expression .)
    lambda          reduce using rule 9 (expression -> expression and expression .)
    do              reduce using rule 9 (expression -> expression and expression .)
    )               reduce using rule 9 (expression -> expression and expression .)
    in              reduce using rule 9 (expression -> expression and expression .)
    else            reduce using rule 9 (expression -> expression and expression .)
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! eq              [ reduce using rule 9 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 9 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 9 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 9 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 24 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 64

    (10) expression -> expression eq expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression eq expression .)
    eq              reduce using rule 10 (expression -> expression eq expression .)
    =               reduce using rule 10 (expression -> expression eq expression .)
    neqs            reduce using rule 10 (expression -> expression eq expression .)
    or              reduce using rule 10 (expression -> expression eq expression .)
    nand            reduce using rule 10 (expression -> expression eq expression .)
    $end            reduce using rule 10 (expression -> expression eq expression .)
    }               reduce using rule 10 (expression -> expression eq expression .)
    ;               reduce using rule 10 (expression -> expression eq expression .)
    then            reduce using rule 10 (expression -> expression eq expression .)
    ,               reduce using rule 10 (expression -> expression eq expression .)
    ]               reduce using rule 10 (expression -> expression eq expression .)
    lambda          reduce using rule 10 (expression -> expression eq expression .)
    do              reduce using rule 10 (expression -> expression eq expression .)
    )               reduce using rule 10 (expression -> expression eq expression .)
    in              reduce using rule 10 (expression -> expression eq expression .)
    else            reduce using rule 10 (expression -> expression eq expression .)
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! >               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 65

    (11) expression -> expression = expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression = expression .)
    eq              reduce using rule 11 (expression -> expression = expression .)
    =               reduce using rule 11 (expression -> expression = expression .)
    neqs            reduce using rule 11 (expression -> expression = expression .)
    or              reduce using rule 11 (expression -> expression = expression .)
    nand            reduce using rule 11 (expression -> expression = expression .)
    $end            reduce using rule 11 (expression -> expression = expression .)
    }               reduce using rule 11 (expression -> expression = expression .)
    ;               reduce using rule 11 (expression -> expression = expression .)
    then            reduce using rule 11 (expression -> expression = expression .)
    ,               reduce using rule 11 (expression -> expression = expression .)
    ]               reduce using rule 11 (expression -> expression = expression .)
    lambda          reduce using rule 11 (expression -> expression = expression .)
    do              reduce using rule 11 (expression -> expression = expression .)
    )               reduce using rule 11 (expression -> expression = expression .)
    in              reduce using rule 11 (expression -> expression = expression .)
    else            reduce using rule 11 (expression -> expression = expression .)
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! >               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 11 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 11 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 66

    (12) expression -> expression > expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression > expression .)
    eq              reduce using rule 12 (expression -> expression > expression .)
    =               reduce using rule 12 (expression -> expression > expression .)
    >               reduce using rule 12 (expression -> expression > expression .)
    <               reduce using rule 12 (expression -> expression > expression .)
    ge              reduce using rule 12 (expression -> expression > expression .)
    le              reduce using rule 12 (expression -> expression > expression .)
    neqs            reduce using rule 12 (expression -> expression > expression .)
    or              reduce using rule 12 (expression -> expression > expression .)
    nand            reduce using rule 12 (expression -> expression > expression .)
    $end            reduce using rule 12 (expression -> expression > expression .)
    }               reduce using rule 12 (expression -> expression > expression .)
    ;               reduce using rule 12 (expression -> expression > expression .)
    then            reduce using rule 12 (expression -> expression > expression .)
    ,               reduce using rule 12 (expression -> expression > expression .)
    ]               reduce using rule 12 (expression -> expression > expression .)
    lambda          reduce using rule 12 (expression -> expression > expression .)
    do              reduce using rule 12 (expression -> expression > expression .)
    )               reduce using rule 12 (expression -> expression > expression .)
    in              reduce using rule 12 (expression -> expression > expression .)
    else            reduce using rule 12 (expression -> expression > expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 12 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 67

    (13) expression -> expression < expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression < expression .)
    eq              reduce using rule 13 (expression -> expression < expression .)
    =               reduce using rule 13 (expression -> expression < expression .)
    >               reduce using rule 13 (expression -> expression < expression .)
    <               reduce using rule 13 (expression -> expression < expression .)
    ge              reduce using rule 13 (expression -> expression < expression .)
    le              reduce using rule 13 (expression -> expression < expression .)
    neqs            reduce using rule 13 (expression -> expression < expression .)
    or              reduce using rule 13 (expression -> expression < expression .)
    nand            reduce using rule 13 (expression -> expression < expression .)
    $end            reduce using rule 13 (expression -> expression < expression .)
    }               reduce using rule 13 (expression -> expression < expression .)
    ;               reduce using rule 13 (expression -> expression < expression .)
    then            reduce using rule 13 (expression -> expression < expression .)
    ,               reduce using rule 13 (expression -> expression < expression .)
    ]               reduce using rule 13 (expression -> expression < expression .)
    lambda          reduce using rule 13 (expression -> expression < expression .)
    do              reduce using rule 13 (expression -> expression < expression .)
    )               reduce using rule 13 (expression -> expression < expression .)
    in              reduce using rule 13 (expression -> expression < expression .)
    else            reduce using rule 13 (expression -> expression < expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 13 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 68

    (14) expression -> expression ge expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression ge expression .)
    eq              reduce using rule 14 (expression -> expression ge expression .)
    =               reduce using rule 14 (expression -> expression ge expression .)
    >               reduce using rule 14 (expression -> expression ge expression .)
    <               reduce using rule 14 (expression -> expression ge expression .)
    ge              reduce using rule 14 (expression -> expression ge expression .)
    le              reduce using rule 14 (expression -> expression ge expression .)
    neqs            reduce using rule 14 (expression -> expression ge expression .)
    or              reduce using rule 14 (expression -> expression ge expression .)
    nand            reduce using rule 14 (expression -> expression ge expression .)
    $end            reduce using rule 14 (expression -> expression ge expression .)
    }               reduce using rule 14 (expression -> expression ge expression .)
    ;               reduce using rule 14 (expression -> expression ge expression .)
    then            reduce using rule 14 (expression -> expression ge expression .)
    ,               reduce using rule 14 (expression -> expression ge expression .)
    ]               reduce using rule 14 (expression -> expression ge expression .)
    lambda          reduce using rule 14 (expression -> expression ge expression .)
    do              reduce using rule 14 (expression -> expression ge expression .)
    )               reduce using rule 14 (expression -> expression ge expression .)
    in              reduce using rule 14 (expression -> expression ge expression .)
    else            reduce using rule 14 (expression -> expression ge expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 14 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 69

    (15) expression -> expression le expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 15 (expression -> expression le expression .)
    eq              reduce using rule 15 (expression -> expression le expression .)
    =               reduce using rule 15 (expression -> expression le expression .)
    >               reduce using rule 15 (expression -> expression le expression .)
    <               reduce using rule 15 (expression -> expression le expression .)
    ge              reduce using rule 15 (expression -> expression le expression .)
    le              reduce using rule 15 (expression -> expression le expression .)
    neqs            reduce using rule 15 (expression -> expression le expression .)
    or              reduce using rule 15 (expression -> expression le expression .)
    nand            reduce using rule 15 (expression -> expression le expression .)
    $end            reduce using rule 15 (expression -> expression le expression .)
    }               reduce using rule 15 (expression -> expression le expression .)
    ;               reduce using rule 15 (expression -> expression le expression .)
    then            reduce using rule 15 (expression -> expression le expression .)
    ,               reduce using rule 15 (expression -> expression le expression .)
    ]               reduce using rule 15 (expression -> expression le expression .)
    lambda          reduce using rule 15 (expression -> expression le expression .)
    do              reduce using rule 15 (expression -> expression le expression .)
    )               reduce using rule 15 (expression -> expression le expression .)
    in              reduce using rule 15 (expression -> expression le expression .)
    else            reduce using rule 15 (expression -> expression le expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 15 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 70

    (16) expression -> expression neqs expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 16 (expression -> expression neqs expression .)
    eq              reduce using rule 16 (expression -> expression neqs expression .)
    =               reduce using rule 16 (expression -> expression neqs expression .)
    neqs            reduce using rule 16 (expression -> expression neqs expression .)
    or              reduce using rule 16 (expression -> expression neqs expression .)
    nand            reduce using rule 16 (expression -> expression neqs expression .)
    $end            reduce using rule 16 (expression -> expression neqs expression .)
    }               reduce using rule 16 (expression -> expression neqs expression .)
    ;               reduce using rule 16 (expression -> expression neqs expression .)
    then            reduce using rule 16 (expression -> expression neqs expression .)
    ,               reduce using rule 16 (expression -> expression neqs expression .)
    ]               reduce using rule 16 (expression -> expression neqs expression .)
    lambda          reduce using rule 16 (expression -> expression neqs expression .)
    do              reduce using rule 16 (expression -> expression neqs expression .)
    )               reduce using rule 16 (expression -> expression neqs expression .)
    in              reduce using rule 16 (expression -> expression neqs expression .)
    else            reduce using rule 16 (expression -> expression neqs expression .)
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! >               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 71

    (17) expression -> expression or expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    or              reduce using rule 17 (expression -> expression or expression .)
    $end            reduce using rule 17 (expression -> expression or expression .)
    }               reduce using rule 17 (expression -> expression or expression .)
    ;               reduce using rule 17 (expression -> expression or expression .)
    then            reduce using rule 17 (expression -> expression or expression .)
    ,               reduce using rule 17 (expression -> expression or expression .)
    ]               reduce using rule 17 (expression -> expression or expression .)
    lambda          reduce using rule 17 (expression -> expression or expression .)
    do              reduce using rule 17 (expression -> expression or expression .)
    )               reduce using rule 17 (expression -> expression or expression .)
    in              reduce using rule 17 (expression -> expression or expression .)
    else            reduce using rule 17 (expression -> expression or expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 17 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 17 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 17 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 17 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 17 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 17 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 32 ]


state 72

    (18) expression -> expression nand expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 18 (expression -> expression nand expression .)
    or              reduce using rule 18 (expression -> expression nand expression .)
    nand            reduce using rule 18 (expression -> expression nand expression .)
    $end            reduce using rule 18 (expression -> expression nand expression .)
    }               reduce using rule 18 (expression -> expression nand expression .)
    ;               reduce using rule 18 (expression -> expression nand expression .)
    then            reduce using rule 18 (expression -> expression nand expression .)
    ,               reduce using rule 18 (expression -> expression nand expression .)
    ]               reduce using rule 18 (expression -> expression nand expression .)
    lambda          reduce using rule 18 (expression -> expression nand expression .)
    do              reduce using rule 18 (expression -> expression nand expression .)
    )               reduce using rule 18 (expression -> expression nand expression .)
    in              reduce using rule 18 (expression -> expression nand expression .)
    else            reduce using rule 18 (expression -> expression nand expression .)
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! eq              [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 24 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]


state 73

    (27) expression -> expression + expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 27 (expression -> expression + expression .)
    eq              reduce using rule 27 (expression -> expression + expression .)
    =               reduce using rule 27 (expression -> expression + expression .)
    >               reduce using rule 27 (expression -> expression + expression .)
    <               reduce using rule 27 (expression -> expression + expression .)
    ge              reduce using rule 27 (expression -> expression + expression .)
    le              reduce using rule 27 (expression -> expression + expression .)
    neqs            reduce using rule 27 (expression -> expression + expression .)
    or              reduce using rule 27 (expression -> expression + expression .)
    nand            reduce using rule 27 (expression -> expression + expression .)
    +               reduce using rule 27 (expression -> expression + expression .)
    -               reduce using rule 27 (expression -> expression + expression .)
    $end            reduce using rule 27 (expression -> expression + expression .)
    }               reduce using rule 27 (expression -> expression + expression .)
    ;               reduce using rule 27 (expression -> expression + expression .)
    then            reduce using rule 27 (expression -> expression + expression .)
    ,               reduce using rule 27 (expression -> expression + expression .)
    ]               reduce using rule 27 (expression -> expression + expression .)
    lambda          reduce using rule 27 (expression -> expression + expression .)
    do              reduce using rule 27 (expression -> expression + expression .)
    )               reduce using rule 27 (expression -> expression + expression .)
    in              reduce using rule 27 (expression -> expression + expression .)
    else            reduce using rule 27 (expression -> expression + expression .)
    *               shift and go to state 36
    /               shift and go to state 37

  ! *               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]


state 74

    (28) expression -> expression - expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 28 (expression -> expression - expression .)
    eq              reduce using rule 28 (expression -> expression - expression .)
    =               reduce using rule 28 (expression -> expression - expression .)
    >               reduce using rule 28 (expression -> expression - expression .)
    <               reduce using rule 28 (expression -> expression - expression .)
    ge              reduce using rule 28 (expression -> expression - expression .)
    le              reduce using rule 28 (expression -> expression - expression .)
    neqs            reduce using rule 28 (expression -> expression - expression .)
    or              reduce using rule 28 (expression -> expression - expression .)
    nand            reduce using rule 28 (expression -> expression - expression .)
    +               reduce using rule 28 (expression -> expression - expression .)
    -               reduce using rule 28 (expression -> expression - expression .)
    $end            reduce using rule 28 (expression -> expression - expression .)
    }               reduce using rule 28 (expression -> expression - expression .)
    ;               reduce using rule 28 (expression -> expression - expression .)
    then            reduce using rule 28 (expression -> expression - expression .)
    ,               reduce using rule 28 (expression -> expression - expression .)
    ]               reduce using rule 28 (expression -> expression - expression .)
    lambda          reduce using rule 28 (expression -> expression - expression .)
    do              reduce using rule 28 (expression -> expression - expression .)
    )               reduce using rule 28 (expression -> expression - expression .)
    in              reduce using rule 28 (expression -> expression - expression .)
    else            reduce using rule 28 (expression -> expression - expression .)
    *               shift and go to state 36
    /               shift and go to state 37

  ! *               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]


state 75

    (29) expression -> expression * expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 29 (expression -> expression * expression .)
    eq              reduce using rule 29 (expression -> expression * expression .)
    =               reduce using rule 29 (expression -> expression * expression .)
    >               reduce using rule 29 (expression -> expression * expression .)
    <               reduce using rule 29 (expression -> expression * expression .)
    ge              reduce using rule 29 (expression -> expression * expression .)
    le              reduce using rule 29 (expression -> expression * expression .)
    neqs            reduce using rule 29 (expression -> expression * expression .)
    or              reduce using rule 29 (expression -> expression * expression .)
    nand            reduce using rule 29 (expression -> expression * expression .)
    +               reduce using rule 29 (expression -> expression * expression .)
    -               reduce using rule 29 (expression -> expression * expression .)
    *               reduce using rule 29 (expression -> expression * expression .)
    /               reduce using rule 29 (expression -> expression * expression .)
    $end            reduce using rule 29 (expression -> expression * expression .)
    }               reduce using rule 29 (expression -> expression * expression .)
    ;               reduce using rule 29 (expression -> expression * expression .)
    then            reduce using rule 29 (expression -> expression * expression .)
    ,               reduce using rule 29 (expression -> expression * expression .)
    ]               reduce using rule 29 (expression -> expression * expression .)
    lambda          reduce using rule 29 (expression -> expression * expression .)
    do              reduce using rule 29 (expression -> expression * expression .)
    )               reduce using rule 29 (expression -> expression * expression .)
    in              reduce using rule 29 (expression -> expression * expression .)
    else            reduce using rule 29 (expression -> expression * expression .)

  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 76

    (30) expression -> expression / expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    and             reduce using rule 30 (expression -> expression / expression .)
    eq              reduce using rule 30 (expression -> expression / expression .)
    =               reduce using rule 30 (expression -> expression / expression .)
    >               reduce using rule 30 (expression -> expression / expression .)
    <               reduce using rule 30 (expression -> expression / expression .)
    ge              reduce using rule 30 (expression -> expression / expression .)
    le              reduce using rule 30 (expression -> expression / expression .)
    neqs            reduce using rule 30 (expression -> expression / expression .)
    or              reduce using rule 30 (expression -> expression / expression .)
    nand            reduce using rule 30 (expression -> expression / expression .)
    +               reduce using rule 30 (expression -> expression / expression .)
    -               reduce using rule 30 (expression -> expression / expression .)
    *               reduce using rule 30 (expression -> expression / expression .)
    /               reduce using rule 30 (expression -> expression / expression .)
    $end            reduce using rule 30 (expression -> expression / expression .)
    }               reduce using rule 30 (expression -> expression / expression .)
    ;               reduce using rule 30 (expression -> expression / expression .)
    then            reduce using rule 30 (expression -> expression / expression .)
    ,               reduce using rule 30 (expression -> expression / expression .)
    ]               reduce using rule 30 (expression -> expression / expression .)
    lambda          reduce using rule 30 (expression -> expression / expression .)
    do              reduce using rule 30 (expression -> expression / expression .)
    )               reduce using rule 30 (expression -> expression / expression .)
    in              reduce using rule 30 (expression -> expression / expression .)
    else            reduce using rule 30 (expression -> expression / expression .)

  ! and             [ shift and go to state 24 ]
  ! eq              [ shift and go to state 25 ]
  ! =               [ shift and go to state 26 ]
  ! >               [ shift and go to state 27 ]
  ! <               [ shift and go to state 28 ]
  ! ge              [ shift and go to state 29 ]
  ! le              [ shift and go to state 30 ]
  ! neqs            [ shift and go to state 31 ]
  ! or              [ shift and go to state 32 ]
  ! nand            [ shift and go to state 33 ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]


state 77

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 102
    dot_expression                 shift and go to state 23

state 78

    (20) expression -> ID assign expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 20 (expression -> ID assign expression .)
    }               reduce using rule 20 (expression -> ID assign expression .)
    ;               reduce using rule 20 (expression -> ID assign expression .)
    then            reduce using rule 20 (expression -> ID assign expression .)
    ,               reduce using rule 20 (expression -> ID assign expression .)
    ]               reduce using rule 20 (expression -> ID assign expression .)
    lambda          reduce using rule 20 (expression -> ID assign expression .)
    do              reduce using rule 20 (expression -> ID assign expression .)
    )               reduce using rule 20 (expression -> ID assign expression .)
    in              reduce using rule 20 (expression -> ID assign expression .)
    else            reduce using rule 20 (expression -> ID assign expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 20 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 20 (expression -> ID assign expression .) ]


state 79

    (35) expression -> ID [ NUMBER . ]

    ]               shift and go to state 103


state 80

    (43) expression -> ID ( ) .

    and             reduce using rule 43 (expression -> ID ( ) .)
    eq              reduce using rule 43 (expression -> ID ( ) .)
    =               reduce using rule 43 (expression -> ID ( ) .)
    >               reduce using rule 43 (expression -> ID ( ) .)
    <               reduce using rule 43 (expression -> ID ( ) .)
    ge              reduce using rule 43 (expression -> ID ( ) .)
    le              reduce using rule 43 (expression -> ID ( ) .)
    neqs            reduce using rule 43 (expression -> ID ( ) .)
    or              reduce using rule 43 (expression -> ID ( ) .)
    nand            reduce using rule 43 (expression -> ID ( ) .)
    +               reduce using rule 43 (expression -> ID ( ) .)
    -               reduce using rule 43 (expression -> ID ( ) .)
    *               reduce using rule 43 (expression -> ID ( ) .)
    /               reduce using rule 43 (expression -> ID ( ) .)
    $end            reduce using rule 43 (expression -> ID ( ) .)
    }               reduce using rule 43 (expression -> ID ( ) .)
    ;               reduce using rule 43 (expression -> ID ( ) .)
    then            reduce using rule 43 (expression -> ID ( ) .)
    ,               reduce using rule 43 (expression -> ID ( ) .)
    ]               reduce using rule 43 (expression -> ID ( ) .)
    lambda          reduce using rule 43 (expression -> ID ( ) .)
    do              reduce using rule 43 (expression -> ID ( ) .)
    )               reduce using rule 43 (expression -> ID ( ) .)
    in              reduce using rule 43 (expression -> ID ( ) .)
    else            reduce using rule 43 (expression -> ID ( ) .)


state 81

    (44) expression -> ID ( expression_list . )

    )               shift and go to state 104


state 82

    (50) dot_expression -> ID dots ID .

    (               reduce using rule 50 (dot_expression -> ID dots ID .)
    and             reduce using rule 50 (dot_expression -> ID dots ID .)
    eq              reduce using rule 50 (dot_expression -> ID dots ID .)
    =               reduce using rule 50 (dot_expression -> ID dots ID .)
    >               reduce using rule 50 (dot_expression -> ID dots ID .)
    <               reduce using rule 50 (dot_expression -> ID dots ID .)
    ge              reduce using rule 50 (dot_expression -> ID dots ID .)
    le              reduce using rule 50 (dot_expression -> ID dots ID .)
    neqs            reduce using rule 50 (dot_expression -> ID dots ID .)
    or              reduce using rule 50 (dot_expression -> ID dots ID .)
    nand            reduce using rule 50 (dot_expression -> ID dots ID .)
    +               reduce using rule 50 (dot_expression -> ID dots ID .)
    -               reduce using rule 50 (dot_expression -> ID dots ID .)
    *               reduce using rule 50 (dot_expression -> ID dots ID .)
    /               reduce using rule 50 (dot_expression -> ID dots ID .)
    $end            reduce using rule 50 (dot_expression -> ID dots ID .)
    }               reduce using rule 50 (dot_expression -> ID dots ID .)
    ;               reduce using rule 50 (dot_expression -> ID dots ID .)
    then            reduce using rule 50 (dot_expression -> ID dots ID .)
    ,               reduce using rule 50 (dot_expression -> ID dots ID .)
    ]               reduce using rule 50 (dot_expression -> ID dots ID .)
    lambda          reduce using rule 50 (dot_expression -> ID dots ID .)
    do              reduce using rule 50 (dot_expression -> ID dots ID .)
    )               reduce using rule 50 (dot_expression -> ID dots ID .)
    in              reduce using rule 50 (dot_expression -> ID dots ID .)
    else            reduce using rule 50 (dot_expression -> ID dots ID .)


state 83

    (49) dots -> . dots .

    ID              reduce using rule 49 (dots -> . dots .)


state 84

    (4) expression -> import ID as . ID

    ID              shift and go to state 105


state 85

    (5) expression -> letrec ID assign . expression lambda expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 106
    dot_expression                 shift and go to state 23

state 86

    (6) expression -> { sequence } .

    and             reduce using rule 6 (expression -> { sequence } .)
    eq              reduce using rule 6 (expression -> { sequence } .)
    =               reduce using rule 6 (expression -> { sequence } .)
    >               reduce using rule 6 (expression -> { sequence } .)
    <               reduce using rule 6 (expression -> { sequence } .)
    ge              reduce using rule 6 (expression -> { sequence } .)
    le              reduce using rule 6 (expression -> { sequence } .)
    neqs            reduce using rule 6 (expression -> { sequence } .)
    or              reduce using rule 6 (expression -> { sequence } .)
    nand            reduce using rule 6 (expression -> { sequence } .)
    +               reduce using rule 6 (expression -> { sequence } .)
    -               reduce using rule 6 (expression -> { sequence } .)
    *               reduce using rule 6 (expression -> { sequence } .)
    /               reduce using rule 6 (expression -> { sequence } .)
    $end            reduce using rule 6 (expression -> { sequence } .)
    }               reduce using rule 6 (expression -> { sequence } .)
    ;               reduce using rule 6 (expression -> { sequence } .)
    then            reduce using rule 6 (expression -> { sequence } .)
    ,               reduce using rule 6 (expression -> { sequence } .)
    ]               reduce using rule 6 (expression -> { sequence } .)
    lambda          reduce using rule 6 (expression -> { sequence } .)
    do              reduce using rule 6 (expression -> { sequence } .)
    )               reduce using rule 6 (expression -> { sequence } .)
    in              reduce using rule 6 (expression -> { sequence } .)
    else            reduce using rule 6 (expression -> { sequence } .)


state 87

    (25) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 107
    dot_expression                 shift and go to state 23

state 88

    (24) expression -> if expression then . expression
    (32) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 108
    dot_expression                 shift and go to state 23

state 89

    (31) expression -> [ expression_list ] .

    and             reduce using rule 31 (expression -> [ expression_list ] .)
    eq              reduce using rule 31 (expression -> [ expression_list ] .)
    =               reduce using rule 31 (expression -> [ expression_list ] .)
    >               reduce using rule 31 (expression -> [ expression_list ] .)
    <               reduce using rule 31 (expression -> [ expression_list ] .)
    ge              reduce using rule 31 (expression -> [ expression_list ] .)
    le              reduce using rule 31 (expression -> [ expression_list ] .)
    neqs            reduce using rule 31 (expression -> [ expression_list ] .)
    or              reduce using rule 31 (expression -> [ expression_list ] .)
    nand            reduce using rule 31 (expression -> [ expression_list ] .)
    +               reduce using rule 31 (expression -> [ expression_list ] .)
    -               reduce using rule 31 (expression -> [ expression_list ] .)
    *               reduce using rule 31 (expression -> [ expression_list ] .)
    /               reduce using rule 31 (expression -> [ expression_list ] .)
    $end            reduce using rule 31 (expression -> [ expression_list ] .)
    }               reduce using rule 31 (expression -> [ expression_list ] .)
    ;               reduce using rule 31 (expression -> [ expression_list ] .)
    then            reduce using rule 31 (expression -> [ expression_list ] .)
    ,               reduce using rule 31 (expression -> [ expression_list ] .)
    ]               reduce using rule 31 (expression -> [ expression_list ] .)
    lambda          reduce using rule 31 (expression -> [ expression_list ] .)
    do              reduce using rule 31 (expression -> [ expression_list ] .)
    )               reduce using rule 31 (expression -> [ expression_list ] .)
    in              reduce using rule 31 (expression -> [ expression_list ] .)
    else            reduce using rule 31 (expression -> [ expression_list ] .)


state 90

    (7) expression_list -> expression , . expression_list
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 51
    expression_list                shift and go to state 109
    dot_expression                 shift and go to state 23

state 91

    (33) expression -> lambda_start lambda expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 33 (expression -> lambda_start lambda expression .)
    }               reduce using rule 33 (expression -> lambda_start lambda expression .)
    ;               reduce using rule 33 (expression -> lambda_start lambda expression .)
    then            reduce using rule 33 (expression -> lambda_start lambda expression .)
    ,               reduce using rule 33 (expression -> lambda_start lambda expression .)
    ]               reduce using rule 33 (expression -> lambda_start lambda expression .)
    lambda          reduce using rule 33 (expression -> lambda_start lambda expression .)
    do              reduce using rule 33 (expression -> lambda_start lambda expression .)
    )               reduce using rule 33 (expression -> lambda_start lambda expression .)
    in              reduce using rule 33 (expression -> lambda_start lambda expression .)
    else            reduce using rule 33 (expression -> lambda_start lambda expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! eq              [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! =               [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! >               [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! <               [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! ge              [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! le              [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! neqs            [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! or              [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! nand            [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! +               [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! -               [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! *               [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]
  ! /               [ reduce using rule 33 (expression -> lambda_start lambda expression .) ]


state 92

    (34) expression -> lambda_start expression_list lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 110
    dot_expression                 shift and go to state 23

state 93

    (37) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 111
    dot_expression                 shift and go to state 23

state 94

    (38) expression -> ( expression_list ) .

    and             reduce using rule 38 (expression -> ( expression_list ) .)
    eq              reduce using rule 38 (expression -> ( expression_list ) .)
    =               reduce using rule 38 (expression -> ( expression_list ) .)
    >               reduce using rule 38 (expression -> ( expression_list ) .)
    <               reduce using rule 38 (expression -> ( expression_list ) .)
    ge              reduce using rule 38 (expression -> ( expression_list ) .)
    le              reduce using rule 38 (expression -> ( expression_list ) .)
    neqs            reduce using rule 38 (expression -> ( expression_list ) .)
    or              reduce using rule 38 (expression -> ( expression_list ) .)
    nand            reduce using rule 38 (expression -> ( expression_list ) .)
    +               reduce using rule 38 (expression -> ( expression_list ) .)
    -               reduce using rule 38 (expression -> ( expression_list ) .)
    *               reduce using rule 38 (expression -> ( expression_list ) .)
    /               reduce using rule 38 (expression -> ( expression_list ) .)
    $end            reduce using rule 38 (expression -> ( expression_list ) .)
    }               reduce using rule 38 (expression -> ( expression_list ) .)
    ;               reduce using rule 38 (expression -> ( expression_list ) .)
    then            reduce using rule 38 (expression -> ( expression_list ) .)
    ,               reduce using rule 38 (expression -> ( expression_list ) .)
    ]               reduce using rule 38 (expression -> ( expression_list ) .)
    lambda          reduce using rule 38 (expression -> ( expression_list ) .)
    do              reduce using rule 38 (expression -> ( expression_list ) .)
    )               reduce using rule 38 (expression -> ( expression_list ) .)
    in              reduce using rule 38 (expression -> ( expression_list ) .)
    else            reduce using rule 38 (expression -> ( expression_list ) .)


state 95

    (41) expression -> ( expression ) .

    and             reduce using rule 41 (expression -> ( expression ) .)
    eq              reduce using rule 41 (expression -> ( expression ) .)
    =               reduce using rule 41 (expression -> ( expression ) .)
    >               reduce using rule 41 (expression -> ( expression ) .)
    <               reduce using rule 41 (expression -> ( expression ) .)
    ge              reduce using rule 41 (expression -> ( expression ) .)
    le              reduce using rule 41 (expression -> ( expression ) .)
    neqs            reduce using rule 41 (expression -> ( expression ) .)
    or              reduce using rule 41 (expression -> ( expression ) .)
    nand            reduce using rule 41 (expression -> ( expression ) .)
    +               reduce using rule 41 (expression -> ( expression ) .)
    -               reduce using rule 41 (expression -> ( expression ) .)
    *               reduce using rule 41 (expression -> ( expression ) .)
    /               reduce using rule 41 (expression -> ( expression ) .)
    $end            reduce using rule 41 (expression -> ( expression ) .)
    }               reduce using rule 41 (expression -> ( expression ) .)
    ;               reduce using rule 41 (expression -> ( expression ) .)
    then            reduce using rule 41 (expression -> ( expression ) .)
    ,               reduce using rule 41 (expression -> ( expression ) .)
    ]               reduce using rule 41 (expression -> ( expression ) .)
    lambda          reduce using rule 41 (expression -> ( expression ) .)
    do              reduce using rule 41 (expression -> ( expression ) .)
    )               reduce using rule 41 (expression -> ( expression ) .)
    in              reduce using rule 41 (expression -> ( expression ) .)
    else            reduce using rule 41 (expression -> ( expression ) .)


state 96

    (42) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 112
    dot_expression                 shift and go to state 23

state 97

    (45) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 113
    dot_expression                 shift and go to state 23

state 98

    (46) expression -> struct { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 114
    ;               shift and go to state 87


state 99

    (47) expression -> extend ID { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    sequence                       shift and go to state 115
    expression                     shift and go to state 47
    dot_expression                 shift and go to state 23

state 100

    (52) expression -> dot_expression ( ) .

    and             reduce using rule 52 (expression -> dot_expression ( ) .)
    eq              reduce using rule 52 (expression -> dot_expression ( ) .)
    =               reduce using rule 52 (expression -> dot_expression ( ) .)
    >               reduce using rule 52 (expression -> dot_expression ( ) .)
    <               reduce using rule 52 (expression -> dot_expression ( ) .)
    ge              reduce using rule 52 (expression -> dot_expression ( ) .)
    le              reduce using rule 52 (expression -> dot_expression ( ) .)
    neqs            reduce using rule 52 (expression -> dot_expression ( ) .)
    or              reduce using rule 52 (expression -> dot_expression ( ) .)
    nand            reduce using rule 52 (expression -> dot_expression ( ) .)
    +               reduce using rule 52 (expression -> dot_expression ( ) .)
    -               reduce using rule 52 (expression -> dot_expression ( ) .)
    *               reduce using rule 52 (expression -> dot_expression ( ) .)
    /               reduce using rule 52 (expression -> dot_expression ( ) .)
    $end            reduce using rule 52 (expression -> dot_expression ( ) .)
    }               reduce using rule 52 (expression -> dot_expression ( ) .)
    ;               reduce using rule 52 (expression -> dot_expression ( ) .)
    then            reduce using rule 52 (expression -> dot_expression ( ) .)
    ,               reduce using rule 52 (expression -> dot_expression ( ) .)
    ]               reduce using rule 52 (expression -> dot_expression ( ) .)
    lambda          reduce using rule 52 (expression -> dot_expression ( ) .)
    do              reduce using rule 52 (expression -> dot_expression ( ) .)
    )               reduce using rule 52 (expression -> dot_expression ( ) .)
    in              reduce using rule 52 (expression -> dot_expression ( ) .)
    else            reduce using rule 52 (expression -> dot_expression ( ) .)


state 101

    (53) expression -> dot_expression ( expression_list . )

    )               shift and go to state 116


state 102

    (2) expression -> local ID assign expression . in expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    in              shift and go to state 117
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 103

    (35) expression -> ID [ NUMBER ] .

    and             reduce using rule 35 (expression -> ID [ NUMBER ] .)
    eq              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    ge              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    le              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    neqs            reduce using rule 35 (expression -> ID [ NUMBER ] .)
    or              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    nand            reduce using rule 35 (expression -> ID [ NUMBER ] .)
    +               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 35 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    then            reduce using rule 35 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    lambda          reduce using rule 35 (expression -> ID [ NUMBER ] .)
    do              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 35 (expression -> ID [ NUMBER ] .)
    in              reduce using rule 35 (expression -> ID [ NUMBER ] .)
    else            reduce using rule 35 (expression -> ID [ NUMBER ] .)


state 104

    (44) expression -> ID ( expression_list ) .

    and             reduce using rule 44 (expression -> ID ( expression_list ) .)
    eq              reduce using rule 44 (expression -> ID ( expression_list ) .)
    =               reduce using rule 44 (expression -> ID ( expression_list ) .)
    >               reduce using rule 44 (expression -> ID ( expression_list ) .)
    <               reduce using rule 44 (expression -> ID ( expression_list ) .)
    ge              reduce using rule 44 (expression -> ID ( expression_list ) .)
    le              reduce using rule 44 (expression -> ID ( expression_list ) .)
    neqs            reduce using rule 44 (expression -> ID ( expression_list ) .)
    or              reduce using rule 44 (expression -> ID ( expression_list ) .)
    nand            reduce using rule 44 (expression -> ID ( expression_list ) .)
    +               reduce using rule 44 (expression -> ID ( expression_list ) .)
    -               reduce using rule 44 (expression -> ID ( expression_list ) .)
    *               reduce using rule 44 (expression -> ID ( expression_list ) .)
    /               reduce using rule 44 (expression -> ID ( expression_list ) .)
    $end            reduce using rule 44 (expression -> ID ( expression_list ) .)
    }               reduce using rule 44 (expression -> ID ( expression_list ) .)
    ;               reduce using rule 44 (expression -> ID ( expression_list ) .)
    then            reduce using rule 44 (expression -> ID ( expression_list ) .)
    ,               reduce using rule 44 (expression -> ID ( expression_list ) .)
    ]               reduce using rule 44 (expression -> ID ( expression_list ) .)
    lambda          reduce using rule 44 (expression -> ID ( expression_list ) .)
    do              reduce using rule 44 (expression -> ID ( expression_list ) .)
    )               reduce using rule 44 (expression -> ID ( expression_list ) .)
    in              reduce using rule 44 (expression -> ID ( expression_list ) .)
    else            reduce using rule 44 (expression -> ID ( expression_list ) .)


state 105

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    ,               reduce using rule 4 (expression -> import ID as ID .)
    ]               reduce using rule 4 (expression -> import ID as ID .)
    lambda          reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 106

    (5) expression -> letrec ID assign expression . lambda expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    lambda          shift and go to state 118
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 107

    (25) sequence -> sequence ; expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    }               reduce using rule 25 (sequence -> sequence ; expression .)
    ;               reduce using rule 25 (sequence -> sequence ; expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 108

    (24) expression -> if expression then expression .
    (32) expression -> if expression then expression . else expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 24 (expression -> if expression then expression .)
    }               reduce using rule 24 (expression -> if expression then expression .)
    ;               reduce using rule 24 (expression -> if expression then expression .)
    then            reduce using rule 24 (expression -> if expression then expression .)
    ,               reduce using rule 24 (expression -> if expression then expression .)
    ]               reduce using rule 24 (expression -> if expression then expression .)
    lambda          reduce using rule 24 (expression -> if expression then expression .)
    do              reduce using rule 24 (expression -> if expression then expression .)
    )               reduce using rule 24 (expression -> if expression then expression .)
    in              reduce using rule 24 (expression -> if expression then expression .)
    else            shift and go to state 119
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 24 (expression -> if expression then expression .) ]


state 109

    (7) expression_list -> expression , expression_list .

    ]               reduce using rule 7 (expression_list -> expression , expression_list .)
    lambda          reduce using rule 7 (expression_list -> expression , expression_list .)
    )               reduce using rule 7 (expression_list -> expression , expression_list .)


state 110

    (34) expression -> lambda_start expression_list lambda expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    }               reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    ;               reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    then            reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    ,               reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    ]               reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    lambda          reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    do              reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    )               reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    in              reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    else            reduce using rule 34 (expression -> lambda_start expression_list lambda expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! eq              [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! =               [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! >               [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! <               [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! ge              [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! le              [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! neqs            [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! or              [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! nand            [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! +               [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! -               [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! *               [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]
  ! /               [ reduce using rule 34 (expression -> lambda_start expression_list lambda expression .) ]


state 111

    (37) expression -> loop expression do expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 37 (expression -> loop expression do expression .)
    }               reduce using rule 37 (expression -> loop expression do expression .)
    ;               reduce using rule 37 (expression -> loop expression do expression .)
    then            reduce using rule 37 (expression -> loop expression do expression .)
    ,               reduce using rule 37 (expression -> loop expression do expression .)
    ]               reduce using rule 37 (expression -> loop expression do expression .)
    lambda          reduce using rule 37 (expression -> loop expression do expression .)
    do              reduce using rule 37 (expression -> loop expression do expression .)
    )               reduce using rule 37 (expression -> loop expression do expression .)
    in              reduce using rule 37 (expression -> loop expression do expression .)
    else            reduce using rule 37 (expression -> loop expression do expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 37 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 37 (expression -> loop expression do expression .) ]


state 112

    (42) expression -> for expression ; expression . ; expression do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    ;               shift and go to state 120
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 113

    (45) expression -> while expression do expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 45 (expression -> while expression do expression .)
    }               reduce using rule 45 (expression -> while expression do expression .)
    ;               reduce using rule 45 (expression -> while expression do expression .)
    then            reduce using rule 45 (expression -> while expression do expression .)
    ,               reduce using rule 45 (expression -> while expression do expression .)
    ]               reduce using rule 45 (expression -> while expression do expression .)
    lambda          reduce using rule 45 (expression -> while expression do expression .)
    do              reduce using rule 45 (expression -> while expression do expression .)
    )               reduce using rule 45 (expression -> while expression do expression .)
    in              reduce using rule 45 (expression -> while expression do expression .)
    else            reduce using rule 45 (expression -> while expression do expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 45 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 45 (expression -> while expression do expression .) ]


state 114

    (46) expression -> struct { sequence } .

    and             reduce using rule 46 (expression -> struct { sequence } .)
    eq              reduce using rule 46 (expression -> struct { sequence } .)
    =               reduce using rule 46 (expression -> struct { sequence } .)
    >               reduce using rule 46 (expression -> struct { sequence } .)
    <               reduce using rule 46 (expression -> struct { sequence } .)
    ge              reduce using rule 46 (expression -> struct { sequence } .)
    le              reduce using rule 46 (expression -> struct { sequence } .)
    neqs            reduce using rule 46 (expression -> struct { sequence } .)
    or              reduce using rule 46 (expression -> struct { sequence } .)
    nand            reduce using rule 46 (expression -> struct { sequence } .)
    +               reduce using rule 46 (expression -> struct { sequence } .)
    -               reduce using rule 46 (expression -> struct { sequence } .)
    *               reduce using rule 46 (expression -> struct { sequence } .)
    /               reduce using rule 46 (expression -> struct { sequence } .)
    $end            reduce using rule 46 (expression -> struct { sequence } .)
    }               reduce using rule 46 (expression -> struct { sequence } .)
    ;               reduce using rule 46 (expression -> struct { sequence } .)
    then            reduce using rule 46 (expression -> struct { sequence } .)
    ,               reduce using rule 46 (expression -> struct { sequence } .)
    ]               reduce using rule 46 (expression -> struct { sequence } .)
    lambda          reduce using rule 46 (expression -> struct { sequence } .)
    do              reduce using rule 46 (expression -> struct { sequence } .)
    )               reduce using rule 46 (expression -> struct { sequence } .)
    in              reduce using rule 46 (expression -> struct { sequence } .)
    else            reduce using rule 46 (expression -> struct { sequence } .)


state 115

    (47) expression -> extend ID { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 121
    ;               shift and go to state 87


state 116

    (53) expression -> dot_expression ( expression_list ) .

    and             reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    eq              reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    =               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    >               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    <               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    ge              reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    le              reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    neqs            reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    or              reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    nand            reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    +               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    -               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    *               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    /               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    $end            reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    }               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    ;               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    then            reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    ,               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    ]               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    lambda          reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    do              reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    )               reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    in              reduce using rule 53 (expression -> dot_expression ( expression_list ) .)
    else            reduce using rule 53 (expression -> dot_expression ( expression_list ) .)


state 117

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 122
    dot_expression                 shift and go to state 23

state 118

    (5) expression -> letrec ID assign expression lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 123
    dot_expression                 shift and go to state 23

state 119

    (32) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 124
    dot_expression                 shift and go to state 23

state 120

    (42) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 125
    dot_expression                 shift and go to state 23

state 121

    (47) expression -> extend ID { sequence } .

    and             reduce using rule 47 (expression -> extend ID { sequence } .)
    eq              reduce using rule 47 (expression -> extend ID { sequence } .)
    =               reduce using rule 47 (expression -> extend ID { sequence } .)
    >               reduce using rule 47 (expression -> extend ID { sequence } .)
    <               reduce using rule 47 (expression -> extend ID { sequence } .)
    ge              reduce using rule 47 (expression -> extend ID { sequence } .)
    le              reduce using rule 47 (expression -> extend ID { sequence } .)
    neqs            reduce using rule 47 (expression -> extend ID { sequence } .)
    or              reduce using rule 47 (expression -> extend ID { sequence } .)
    nand            reduce using rule 47 (expression -> extend ID { sequence } .)
    +               reduce using rule 47 (expression -> extend ID { sequence } .)
    -               reduce using rule 47 (expression -> extend ID { sequence } .)
    *               reduce using rule 47 (expression -> extend ID { sequence } .)
    /               reduce using rule 47 (expression -> extend ID { sequence } .)
    $end            reduce using rule 47 (expression -> extend ID { sequence } .)
    }               reduce using rule 47 (expression -> extend ID { sequence } .)
    ;               reduce using rule 47 (expression -> extend ID { sequence } .)
    then            reduce using rule 47 (expression -> extend ID { sequence } .)
    ,               reduce using rule 47 (expression -> extend ID { sequence } .)
    ]               reduce using rule 47 (expression -> extend ID { sequence } .)
    lambda          reduce using rule 47 (expression -> extend ID { sequence } .)
    do              reduce using rule 47 (expression -> extend ID { sequence } .)
    )               reduce using rule 47 (expression -> extend ID { sequence } .)
    in              reduce using rule 47 (expression -> extend ID { sequence } .)
    else            reduce using rule 47 (expression -> extend ID { sequence } .)


state 122

    (2) expression -> local ID assign expression in expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    ,               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ]               reduce using rule 2 (expression -> local ID assign expression in expression .)
    lambda          reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 123

    (5) expression -> letrec ID assign expression lambda expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    }               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ;               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    then            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ,               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ]               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    lambda          reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    do              reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    )               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    in              reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    else            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]


state 124

    (32) expression -> if expression then expression else expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 32 (expression -> if expression then expression else expression .)
    }               reduce using rule 32 (expression -> if expression then expression else expression .)
    ;               reduce using rule 32 (expression -> if expression then expression else expression .)
    then            reduce using rule 32 (expression -> if expression then expression else expression .)
    ,               reduce using rule 32 (expression -> if expression then expression else expression .)
    ]               reduce using rule 32 (expression -> if expression then expression else expression .)
    lambda          reduce using rule 32 (expression -> if expression then expression else expression .)
    do              reduce using rule 32 (expression -> if expression then expression else expression .)
    )               reduce using rule 32 (expression -> if expression then expression else expression .)
    in              reduce using rule 32 (expression -> if expression then expression else expression .)
    else            reduce using rule 32 (expression -> if expression then expression else expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 32 (expression -> if expression then expression else expression .) ]


state 125

    (42) expression -> for expression ; expression ; expression . do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    do              shift and go to state 126
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37


state 126

    (42) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . ID assign expression
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . [ expression_list ]
    (32) expression -> . if expression then expression else expression
    (33) expression -> . lambda_start lambda expression
    (34) expression -> . lambda_start expression_list lambda expression
    (35) expression -> . ID [ NUMBER ]
    (36) expression -> . not expression
    (37) expression -> . loop expression do expression
    (38) expression -> . ( expression_list )
    (39) expression -> . NUMBER
    (40) expression -> . BOOL
    (41) expression -> . ( expression )
    (42) expression -> . for expression ; expression ; expression do expression
    (43) expression -> . ID ( )
    (44) expression -> . ID ( expression_list )
    (45) expression -> . while expression do expression
    (46) expression -> . struct { sequence }
    (47) expression -> . extend ID { sequence }
    (51) expression -> . dot_expression
    (52) expression -> . dot_expression ( )
    (53) expression -> . dot_expression ( expression_list )
    (50) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 9
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 12
    lambda_start    shift and go to state 13
    not             shift and go to state 15
    loop            shift and go to state 16
    (               shift and go to state 17
    NUMBER          shift and go to state 14
    BOOL            shift and go to state 18
    for             shift and go to state 19
    while           shift and go to state 20
    struct          shift and go to state 21
    extend          shift and go to state 22

    expression                     shift and go to state 127
    dot_expression                 shift and go to state 23

state 127

    (42) expression -> for expression ; expression ; expression do expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression

    $end            reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    ,               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    ]               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    lambda          reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 42 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 24
    eq              shift and go to state 25
    =               shift and go to state 26
    >               shift and go to state 27
    <               shift and go to state 28
    ge              shift and go to state 29
    le              shift and go to state 30
    neqs            shift and go to state 31
    or              shift and go to state 32
    nand            shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! and             [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 42 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 57 resolved as shift
WARNING: shift/reduce conflict for and in state 122 resolved as shift
WARNING: shift/reduce conflict for eq in state 122 resolved as shift
WARNING: shift/reduce conflict for = in state 122 resolved as shift
WARNING: shift/reduce conflict for > in state 122 resolved as shift
WARNING: shift/reduce conflict for < in state 122 resolved as shift
WARNING: shift/reduce conflict for ge in state 122 resolved as shift
WARNING: shift/reduce conflict for le in state 122 resolved as shift
WARNING: shift/reduce conflict for neqs in state 122 resolved as shift
WARNING: shift/reduce conflict for or in state 122 resolved as shift
WARNING: shift/reduce conflict for nand in state 122 resolved as shift
WARNING: shift/reduce conflict for + in state 122 resolved as shift
WARNING: shift/reduce conflict for - in state 122 resolved as shift
WARNING: shift/reduce conflict for * in state 122 resolved as shift
WARNING: shift/reduce conflict for / in state 122 resolved as shift
