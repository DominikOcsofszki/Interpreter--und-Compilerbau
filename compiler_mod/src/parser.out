Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> - expression
Rule 2     expression -> expression + expression
Rule 3     expression -> expression - expression
Rule 4     expression -> expression * expression
Rule 5     expression -> expression / expression
Rule 6     expression_list -> expression , expression_list
Rule 7     expression_list -> expression
Rule 8     expression -> NUMBER
Rule 9     expression -> { sequence }
Rule 10    expression -> LOCAL ID ASSIGN expression IN expression
Rule 11    expression -> BOOL
Rule 12    expression -> IF expression THEN expression
Rule 13    expression -> IMPORT ID AS ID
Rule 14    sequence_struct -> sequence_struct ; . ID ASSIGN expression
Rule 15    sequence_struct -> . ID ASSIGN expression
Rule 16    sequence -> expression
Rule 17    sequence -> sequence ; expression
Rule 18    expression -> FLOAT
Rule 19    expression -> IF expression THEN expression ELSE expression
Rule 20    expression -> IMPORT ID
Rule 21    expression -> LAMBDA_START LAMBDA expression
Rule 22    expression -> LAMBDA_START expression_list LAMBDA expression
Rule 23    expression -> expression AND expression
Rule 24    expression -> expression EQ expression
Rule 25    expression -> expression = expression
Rule 26    expression -> expression > expression
Rule 27    expression -> expression < expression
Rule 28    expression -> expression GE expression
Rule 29    expression -> expression LE expression
Rule 30    expression -> expression NEQS expression
Rule 31    expression -> expression OR expression
Rule 32    expression -> expression NAND expression
Rule 33    expression -> STRING
Rule 34    expression -> STRUCT { sequence_struct }
Rule 35    expression -> LOOP expression DO expression
Rule 36    expression -> CHAR
Rule 37    expression -> EXTEND ID { sequence_struct }
Rule 38    expression -> ID ( )
Rule 39    expression -> ID ( expression_list )
Rule 40    expression -> FOR expression ; expression ; expression DO expression
Rule 41    expression -> ID
Rule 42    dots -> .
Rule 43    dots -> . dots
Rule 44    expression -> WHILE expression DO expression
Rule 45    dot_expression -> ID dots ID
Rule 46    dot_expression -> dots ID
Rule 47    expression -> NOT expression
Rule 48    expression -> dot_expression
Rule 49    expression -> dot_expression ( )
Rule 50    expression -> dot_expression ( expression_list )
Rule 51    expression -> dots ID
Rule 52    expression -> [ expression_list ]
Rule 53    expression -> ID ASSIGN expression
Rule 54    expression -> ID [ NUMBER ]
Rule 55    expression -> dots ID ASSIGN expression
Rule 56    expression -> ( expression_list )

Terminals, with rules where they appear

(                    : 38 39 49 50 56
)                    : 38 39 49 50 56
*                    : 4
+                    : 2
,                    : 6
-                    : 1 3
.                    : 14 15 42 43
/                    : 5
;                    : 14 17 40 40
<                    : 27
=                    : 25
>                    : 26
AND                  : 23
AS                   : 13
ASSIGN               : 10 14 15 53 55
BOOL                 : 11
CHAR                 : 36
DO                   : 35 40 44
ELSE                 : 19
EQ                   : 24
EXTEND               : 37
FLOAT                : 18
FOR                  : 40
GE                   : 28
ID                   : 10 13 13 14 15 20 37 38 39 41 45 45 46 51 53 54 55
IF                   : 12 19
IMPORT               : 13 20
IN                   : 10
LAMBDA               : 21 22
LAMBDA_START         : 21 22
LE                   : 29
LOCAL                : 10
LOOP                 : 35
NAND                 : 32
NEQS                 : 30
NOT                  : 47
NUMBER               : 8 54
OR                   : 31
STRING               : 33
STRUCT               : 34
THEN                 : 12 19
WHILE                : 44
[                    : 52 54
]                    : 52 54
error                : 
{                    : 9 34 37
}                    : 9 34 37

Nonterminals, with rules where they appear

dot_expression       : 48 49 50
dots                 : 43 45 46 51 55
expression           : 1 2 2 3 3 4 4 5 5 6 7 10 10 12 12 14 15 16 17 19 19 19 21 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 35 35 40 40 40 40 44 44 47 53 55 0
expression_list      : 6 22 39 50 52 56
sequence             : 9 17
sequence_struct      : 14 34 37

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 1
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 1

    (0) S' -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 2

    (1) expression -> - . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 39
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 3

    (8) expression -> NUMBER .

    +               reduce using rule 8 (expression -> NUMBER .)
    -               reduce using rule 8 (expression -> NUMBER .)
    *               reduce using rule 8 (expression -> NUMBER .)
    /               reduce using rule 8 (expression -> NUMBER .)
    AND             reduce using rule 8 (expression -> NUMBER .)
    EQ              reduce using rule 8 (expression -> NUMBER .)
    =               reduce using rule 8 (expression -> NUMBER .)
    >               reduce using rule 8 (expression -> NUMBER .)
    <               reduce using rule 8 (expression -> NUMBER .)
    GE              reduce using rule 8 (expression -> NUMBER .)
    LE              reduce using rule 8 (expression -> NUMBER .)
    NEQS            reduce using rule 8 (expression -> NUMBER .)
    OR              reduce using rule 8 (expression -> NUMBER .)
    NAND            reduce using rule 8 (expression -> NUMBER .)
    $end            reduce using rule 8 (expression -> NUMBER .)
    }               reduce using rule 8 (expression -> NUMBER .)
    ;               reduce using rule 8 (expression -> NUMBER .)
    THEN            reduce using rule 8 (expression -> NUMBER .)
    ,               reduce using rule 8 (expression -> NUMBER .)
    LAMBDA          reduce using rule 8 (expression -> NUMBER .)
    DO              reduce using rule 8 (expression -> NUMBER .)
    )               reduce using rule 8 (expression -> NUMBER .)
    ]               reduce using rule 8 (expression -> NUMBER .)
    IN              reduce using rule 8 (expression -> NUMBER .)
    ELSE            reduce using rule 8 (expression -> NUMBER .)


state 4

    (9) expression -> { . sequence }
    (16) sequence -> . expression
    (17) sequence -> . sequence ; expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    sequence                       shift and go to state 40
    expression                     shift and go to state 41
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 5

    (10) expression -> LOCAL . ID ASSIGN expression IN expression

    ID              shift and go to state 42


state 6

    (38) expression -> ID . ( )
    (39) expression -> ID . ( expression_list )
    (41) expression -> ID .
    (53) expression -> ID . ASSIGN expression
    (54) expression -> ID . [ NUMBER ]
    (45) dot_expression -> ID . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    (               shift and go to state 43
    +               reduce using rule 41 (expression -> ID .)
    -               reduce using rule 41 (expression -> ID .)
    *               reduce using rule 41 (expression -> ID .)
    /               reduce using rule 41 (expression -> ID .)
    AND             reduce using rule 41 (expression -> ID .)
    EQ              reduce using rule 41 (expression -> ID .)
    =               reduce using rule 41 (expression -> ID .)
    >               reduce using rule 41 (expression -> ID .)
    <               reduce using rule 41 (expression -> ID .)
    GE              reduce using rule 41 (expression -> ID .)
    LE              reduce using rule 41 (expression -> ID .)
    NEQS            reduce using rule 41 (expression -> ID .)
    OR              reduce using rule 41 (expression -> ID .)
    NAND            reduce using rule 41 (expression -> ID .)
    $end            reduce using rule 41 (expression -> ID .)
    }               reduce using rule 41 (expression -> ID .)
    ;               reduce using rule 41 (expression -> ID .)
    THEN            reduce using rule 41 (expression -> ID .)
    ,               reduce using rule 41 (expression -> ID .)
    LAMBDA          reduce using rule 41 (expression -> ID .)
    DO              reduce using rule 41 (expression -> ID .)
    )               reduce using rule 41 (expression -> ID .)
    ]               reduce using rule 41 (expression -> ID .)
    IN              reduce using rule 41 (expression -> ID .)
    ELSE            reduce using rule 41 (expression -> ID .)
    ASSIGN          shift and go to state 44
    [               shift and go to state 45
    .               shift and go to state 24

    dots                           shift and go to state 46

state 7

    (11) expression -> BOOL .

    +               reduce using rule 11 (expression -> BOOL .)
    -               reduce using rule 11 (expression -> BOOL .)
    *               reduce using rule 11 (expression -> BOOL .)
    /               reduce using rule 11 (expression -> BOOL .)
    AND             reduce using rule 11 (expression -> BOOL .)
    EQ              reduce using rule 11 (expression -> BOOL .)
    =               reduce using rule 11 (expression -> BOOL .)
    >               reduce using rule 11 (expression -> BOOL .)
    <               reduce using rule 11 (expression -> BOOL .)
    GE              reduce using rule 11 (expression -> BOOL .)
    LE              reduce using rule 11 (expression -> BOOL .)
    NEQS            reduce using rule 11 (expression -> BOOL .)
    OR              reduce using rule 11 (expression -> BOOL .)
    NAND            reduce using rule 11 (expression -> BOOL .)
    $end            reduce using rule 11 (expression -> BOOL .)
    }               reduce using rule 11 (expression -> BOOL .)
    ;               reduce using rule 11 (expression -> BOOL .)
    THEN            reduce using rule 11 (expression -> BOOL .)
    ,               reduce using rule 11 (expression -> BOOL .)
    LAMBDA          reduce using rule 11 (expression -> BOOL .)
    DO              reduce using rule 11 (expression -> BOOL .)
    )               reduce using rule 11 (expression -> BOOL .)
    ]               reduce using rule 11 (expression -> BOOL .)
    IN              reduce using rule 11 (expression -> BOOL .)
    ELSE            reduce using rule 11 (expression -> BOOL .)


state 8

    (12) expression -> IF . expression THEN expression
    (19) expression -> IF . expression THEN expression ELSE expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 47
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 9

    (13) expression -> IMPORT . ID AS ID
    (20) expression -> IMPORT . ID

    ID              shift and go to state 48


state 10

    (18) expression -> FLOAT .

    +               reduce using rule 18 (expression -> FLOAT .)
    -               reduce using rule 18 (expression -> FLOAT .)
    *               reduce using rule 18 (expression -> FLOAT .)
    /               reduce using rule 18 (expression -> FLOAT .)
    AND             reduce using rule 18 (expression -> FLOAT .)
    EQ              reduce using rule 18 (expression -> FLOAT .)
    =               reduce using rule 18 (expression -> FLOAT .)
    >               reduce using rule 18 (expression -> FLOAT .)
    <               reduce using rule 18 (expression -> FLOAT .)
    GE              reduce using rule 18 (expression -> FLOAT .)
    LE              reduce using rule 18 (expression -> FLOAT .)
    NEQS            reduce using rule 18 (expression -> FLOAT .)
    OR              reduce using rule 18 (expression -> FLOAT .)
    NAND            reduce using rule 18 (expression -> FLOAT .)
    $end            reduce using rule 18 (expression -> FLOAT .)
    }               reduce using rule 18 (expression -> FLOAT .)
    ;               reduce using rule 18 (expression -> FLOAT .)
    THEN            reduce using rule 18 (expression -> FLOAT .)
    ,               reduce using rule 18 (expression -> FLOAT .)
    LAMBDA          reduce using rule 18 (expression -> FLOAT .)
    DO              reduce using rule 18 (expression -> FLOAT .)
    )               reduce using rule 18 (expression -> FLOAT .)
    ]               reduce using rule 18 (expression -> FLOAT .)
    IN              reduce using rule 18 (expression -> FLOAT .)
    ELSE            reduce using rule 18 (expression -> FLOAT .)


state 11

    (21) expression -> LAMBDA_START . LAMBDA expression
    (22) expression -> LAMBDA_START . expression_list LAMBDA expression
    (6) expression_list -> . expression , expression_list
    (7) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    LAMBDA          shift and go to state 49
    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 50
    expression_list                shift and go to state 51
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 12

    (33) expression -> STRING .

    +               reduce using rule 33 (expression -> STRING .)
    -               reduce using rule 33 (expression -> STRING .)
    *               reduce using rule 33 (expression -> STRING .)
    /               reduce using rule 33 (expression -> STRING .)
    AND             reduce using rule 33 (expression -> STRING .)
    EQ              reduce using rule 33 (expression -> STRING .)
    =               reduce using rule 33 (expression -> STRING .)
    >               reduce using rule 33 (expression -> STRING .)
    <               reduce using rule 33 (expression -> STRING .)
    GE              reduce using rule 33 (expression -> STRING .)
    LE              reduce using rule 33 (expression -> STRING .)
    NEQS            reduce using rule 33 (expression -> STRING .)
    OR              reduce using rule 33 (expression -> STRING .)
    NAND            reduce using rule 33 (expression -> STRING .)
    $end            reduce using rule 33 (expression -> STRING .)
    }               reduce using rule 33 (expression -> STRING .)
    ;               reduce using rule 33 (expression -> STRING .)
    THEN            reduce using rule 33 (expression -> STRING .)
    ,               reduce using rule 33 (expression -> STRING .)
    LAMBDA          reduce using rule 33 (expression -> STRING .)
    DO              reduce using rule 33 (expression -> STRING .)
    )               reduce using rule 33 (expression -> STRING .)
    ]               reduce using rule 33 (expression -> STRING .)
    IN              reduce using rule 33 (expression -> STRING .)
    ELSE            reduce using rule 33 (expression -> STRING .)


state 13

    (34) expression -> STRUCT . { sequence_struct }

    {               shift and go to state 52


state 14

    (35) expression -> LOOP . expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 53
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 15

    (36) expression -> CHAR .

    +               reduce using rule 36 (expression -> CHAR .)
    -               reduce using rule 36 (expression -> CHAR .)
    *               reduce using rule 36 (expression -> CHAR .)
    /               reduce using rule 36 (expression -> CHAR .)
    AND             reduce using rule 36 (expression -> CHAR .)
    EQ              reduce using rule 36 (expression -> CHAR .)
    =               reduce using rule 36 (expression -> CHAR .)
    >               reduce using rule 36 (expression -> CHAR .)
    <               reduce using rule 36 (expression -> CHAR .)
    GE              reduce using rule 36 (expression -> CHAR .)
    LE              reduce using rule 36 (expression -> CHAR .)
    NEQS            reduce using rule 36 (expression -> CHAR .)
    OR              reduce using rule 36 (expression -> CHAR .)
    NAND            reduce using rule 36 (expression -> CHAR .)
    $end            reduce using rule 36 (expression -> CHAR .)
    }               reduce using rule 36 (expression -> CHAR .)
    ;               reduce using rule 36 (expression -> CHAR .)
    THEN            reduce using rule 36 (expression -> CHAR .)
    ,               reduce using rule 36 (expression -> CHAR .)
    LAMBDA          reduce using rule 36 (expression -> CHAR .)
    DO              reduce using rule 36 (expression -> CHAR .)
    )               reduce using rule 36 (expression -> CHAR .)
    ]               reduce using rule 36 (expression -> CHAR .)
    IN              reduce using rule 36 (expression -> CHAR .)
    ELSE            reduce using rule 36 (expression -> CHAR .)


state 16

    (37) expression -> EXTEND . ID { sequence_struct }

    ID              shift and go to state 54


state 17

    (56) expression -> ( . expression_list )
    (6) expression_list -> . expression , expression_list
    (7) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression_list                shift and go to state 55
    expression                     shift and go to state 50
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 18

    (40) expression -> FOR . expression ; expression ; expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 56
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 19

    (44) expression -> WHILE . expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 57
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 20

    (47) expression -> NOT . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 58
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 21

    (48) expression -> dot_expression .
    (49) expression -> dot_expression . ( )
    (50) expression -> dot_expression . ( expression_list )

    +               reduce using rule 48 (expression -> dot_expression .)
    -               reduce using rule 48 (expression -> dot_expression .)
    *               reduce using rule 48 (expression -> dot_expression .)
    /               reduce using rule 48 (expression -> dot_expression .)
    AND             reduce using rule 48 (expression -> dot_expression .)
    EQ              reduce using rule 48 (expression -> dot_expression .)
    =               reduce using rule 48 (expression -> dot_expression .)
    >               reduce using rule 48 (expression -> dot_expression .)
    <               reduce using rule 48 (expression -> dot_expression .)
    GE              reduce using rule 48 (expression -> dot_expression .)
    LE              reduce using rule 48 (expression -> dot_expression .)
    NEQS            reduce using rule 48 (expression -> dot_expression .)
    OR              reduce using rule 48 (expression -> dot_expression .)
    NAND            reduce using rule 48 (expression -> dot_expression .)
    $end            reduce using rule 48 (expression -> dot_expression .)
    }               reduce using rule 48 (expression -> dot_expression .)
    ;               reduce using rule 48 (expression -> dot_expression .)
    THEN            reduce using rule 48 (expression -> dot_expression .)
    ,               reduce using rule 48 (expression -> dot_expression .)
    LAMBDA          reduce using rule 48 (expression -> dot_expression .)
    DO              reduce using rule 48 (expression -> dot_expression .)
    )               reduce using rule 48 (expression -> dot_expression .)
    ]               reduce using rule 48 (expression -> dot_expression .)
    IN              reduce using rule 48 (expression -> dot_expression .)
    ELSE            reduce using rule 48 (expression -> dot_expression .)
    (               shift and go to state 59


state 22

    (51) expression -> dots . ID
    (55) expression -> dots . ID ASSIGN expression
    (46) dot_expression -> dots . ID

    ID              shift and go to state 60


state 23

    (52) expression -> [ . expression_list ]
    (6) expression_list -> . expression , expression_list
    (7) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression_list                shift and go to state 61
    expression                     shift and go to state 50
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 24

    (42) dots -> . .
    (43) dots -> . . dots
    (42) dots -> . .
    (43) dots -> . . dots

    ID              reduce using rule 42 (dots -> . .)
    .               shift and go to state 24

    dots                           shift and go to state 62

state 25

    (2) expression -> expression + . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 63
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 26

    (3) expression -> expression - . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 64
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 27

    (4) expression -> expression * . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 65
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 28

    (5) expression -> expression / . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 66
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 29

    (23) expression -> expression AND . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 67
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 30

    (24) expression -> expression EQ . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 68
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 31

    (25) expression -> expression = . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 69
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 32

    (26) expression -> expression > . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 70
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 33

    (27) expression -> expression < . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 71
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 34

    (28) expression -> expression GE . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 72
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 35

    (29) expression -> expression LE . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 73
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 36

    (30) expression -> expression NEQS . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 74
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 37

    (31) expression -> expression OR . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 75
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 38

    (32) expression -> expression NAND . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 76
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 39

    (1) expression -> - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 1 (expression -> - expression .)
    -               reduce using rule 1 (expression -> - expression .)
    *               reduce using rule 1 (expression -> - expression .)
    /               reduce using rule 1 (expression -> - expression .)
    AND             reduce using rule 1 (expression -> - expression .)
    EQ              reduce using rule 1 (expression -> - expression .)
    =               reduce using rule 1 (expression -> - expression .)
    >               reduce using rule 1 (expression -> - expression .)
    <               reduce using rule 1 (expression -> - expression .)
    GE              reduce using rule 1 (expression -> - expression .)
    LE              reduce using rule 1 (expression -> - expression .)
    NEQS            reduce using rule 1 (expression -> - expression .)
    OR              reduce using rule 1 (expression -> - expression .)
    NAND            reduce using rule 1 (expression -> - expression .)
    $end            reduce using rule 1 (expression -> - expression .)
    }               reduce using rule 1 (expression -> - expression .)
    ;               reduce using rule 1 (expression -> - expression .)
    THEN            reduce using rule 1 (expression -> - expression .)
    ,               reduce using rule 1 (expression -> - expression .)
    LAMBDA          reduce using rule 1 (expression -> - expression .)
    DO              reduce using rule 1 (expression -> - expression .)
    )               reduce using rule 1 (expression -> - expression .)
    ]               reduce using rule 1 (expression -> - expression .)
    IN              reduce using rule 1 (expression -> - expression .)
    ELSE            reduce using rule 1 (expression -> - expression .)

  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! /               [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 40

    (9) expression -> { sequence . }
    (17) sequence -> sequence . ; expression

    }               shift and go to state 77
    ;               shift and go to state 78


state 41

    (16) sequence -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 16 (sequence -> expression .)
    ;               reduce using rule 16 (sequence -> expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 42

    (10) expression -> LOCAL ID . ASSIGN expression IN expression

    ASSIGN          shift and go to state 79


state 43

    (38) expression -> ID ( . )
    (39) expression -> ID ( . expression_list )
    (6) expression_list -> . expression , expression_list
    (7) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    )               shift and go to state 80
    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression_list                shift and go to state 81
    expression                     shift and go to state 50
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 44

    (53) expression -> ID ASSIGN . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 82
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 45

    (54) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 83


state 46

    (45) dot_expression -> ID dots . ID

    ID              shift and go to state 84


state 47

    (12) expression -> IF expression . THEN expression
    (19) expression -> IF expression . THEN expression ELSE expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    THEN            shift and go to state 85
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 48

    (13) expression -> IMPORT ID . AS ID
    (20) expression -> IMPORT ID .

    AS              shift and go to state 86
    +               reduce using rule 20 (expression -> IMPORT ID .)
    -               reduce using rule 20 (expression -> IMPORT ID .)
    *               reduce using rule 20 (expression -> IMPORT ID .)
    /               reduce using rule 20 (expression -> IMPORT ID .)
    AND             reduce using rule 20 (expression -> IMPORT ID .)
    EQ              reduce using rule 20 (expression -> IMPORT ID .)
    =               reduce using rule 20 (expression -> IMPORT ID .)
    >               reduce using rule 20 (expression -> IMPORT ID .)
    <               reduce using rule 20 (expression -> IMPORT ID .)
    GE              reduce using rule 20 (expression -> IMPORT ID .)
    LE              reduce using rule 20 (expression -> IMPORT ID .)
    NEQS            reduce using rule 20 (expression -> IMPORT ID .)
    OR              reduce using rule 20 (expression -> IMPORT ID .)
    NAND            reduce using rule 20 (expression -> IMPORT ID .)
    $end            reduce using rule 20 (expression -> IMPORT ID .)
    }               reduce using rule 20 (expression -> IMPORT ID .)
    ;               reduce using rule 20 (expression -> IMPORT ID .)
    THEN            reduce using rule 20 (expression -> IMPORT ID .)
    ,               reduce using rule 20 (expression -> IMPORT ID .)
    LAMBDA          reduce using rule 20 (expression -> IMPORT ID .)
    DO              reduce using rule 20 (expression -> IMPORT ID .)
    )               reduce using rule 20 (expression -> IMPORT ID .)
    ]               reduce using rule 20 (expression -> IMPORT ID .)
    IN              reduce using rule 20 (expression -> IMPORT ID .)
    ELSE            reduce using rule 20 (expression -> IMPORT ID .)


state 49

    (21) expression -> LAMBDA_START LAMBDA . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 87
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 50

    (6) expression_list -> expression . , expression_list
    (7) expression_list -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    ,               shift and go to state 88
    LAMBDA          reduce using rule 7 (expression_list -> expression .)
    )               reduce using rule 7 (expression_list -> expression .)
    ]               reduce using rule 7 (expression_list -> expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 51

    (22) expression -> LAMBDA_START expression_list . LAMBDA expression

    LAMBDA          shift and go to state 89


state 52

    (34) expression -> STRUCT { . sequence_struct }
    (14) sequence_struct -> . sequence_struct ; . ID ASSIGN expression
    (15) sequence_struct -> . . ID ASSIGN expression

    .               shift and go to state 91

    sequence_struct                shift and go to state 90

state 53

    (35) expression -> LOOP expression . DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    DO              shift and go to state 92
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 54

    (37) expression -> EXTEND ID . { sequence_struct }

    {               shift and go to state 93


state 55

    (56) expression -> ( expression_list . )

    )               shift and go to state 94


state 56

    (40) expression -> FOR expression . ; expression ; expression DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    ;               shift and go to state 95
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 57

    (44) expression -> WHILE expression . DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    DO              shift and go to state 96
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 58

    (47) expression -> NOT expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 47 (expression -> NOT expression .)
    -               reduce using rule 47 (expression -> NOT expression .)
    *               reduce using rule 47 (expression -> NOT expression .)
    /               reduce using rule 47 (expression -> NOT expression .)
    AND             reduce using rule 47 (expression -> NOT expression .)
    EQ              reduce using rule 47 (expression -> NOT expression .)
    =               reduce using rule 47 (expression -> NOT expression .)
    >               reduce using rule 47 (expression -> NOT expression .)
    <               reduce using rule 47 (expression -> NOT expression .)
    GE              reduce using rule 47 (expression -> NOT expression .)
    LE              reduce using rule 47 (expression -> NOT expression .)
    NEQS            reduce using rule 47 (expression -> NOT expression .)
    OR              reduce using rule 47 (expression -> NOT expression .)
    NAND            reduce using rule 47 (expression -> NOT expression .)
    $end            reduce using rule 47 (expression -> NOT expression .)
    }               reduce using rule 47 (expression -> NOT expression .)
    ;               reduce using rule 47 (expression -> NOT expression .)
    THEN            reduce using rule 47 (expression -> NOT expression .)
    ,               reduce using rule 47 (expression -> NOT expression .)
    LAMBDA          reduce using rule 47 (expression -> NOT expression .)
    DO              reduce using rule 47 (expression -> NOT expression .)
    )               reduce using rule 47 (expression -> NOT expression .)
    ]               reduce using rule 47 (expression -> NOT expression .)
    IN              reduce using rule 47 (expression -> NOT expression .)
    ELSE            reduce using rule 47 (expression -> NOT expression .)

  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! /               [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 59

    (49) expression -> dot_expression ( . )
    (50) expression -> dot_expression ( . expression_list )
    (6) expression_list -> . expression , expression_list
    (7) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    )               shift and go to state 97
    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    dot_expression                 shift and go to state 21
    expression_list                shift and go to state 98
    expression                     shift and go to state 50
    dots                           shift and go to state 22

state 60

    (51) expression -> dots ID .
    (55) expression -> dots ID . ASSIGN expression
    (46) dot_expression -> dots ID .

  ! reduce/reduce conflict for + resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for - resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for * resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for / resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for AND resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for EQ resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for = resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for > resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for < resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for GE resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for LE resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for NEQS resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for OR resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for NAND resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for $end resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for } resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for ; resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for THEN resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for , resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for LAMBDA resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for DO resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for ) resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for ] resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for IN resolved using rule 46 (dot_expression -> dots ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 46 (dot_expression -> dots ID .)
    ASSIGN          shift and go to state 99
    (               reduce using rule 46 (dot_expression -> dots ID .)
    +               reduce using rule 46 (dot_expression -> dots ID .)
    -               reduce using rule 46 (dot_expression -> dots ID .)
    *               reduce using rule 46 (dot_expression -> dots ID .)
    /               reduce using rule 46 (dot_expression -> dots ID .)
    AND             reduce using rule 46 (dot_expression -> dots ID .)
    EQ              reduce using rule 46 (dot_expression -> dots ID .)
    =               reduce using rule 46 (dot_expression -> dots ID .)
    >               reduce using rule 46 (dot_expression -> dots ID .)
    <               reduce using rule 46 (dot_expression -> dots ID .)
    GE              reduce using rule 46 (dot_expression -> dots ID .)
    LE              reduce using rule 46 (dot_expression -> dots ID .)
    NEQS            reduce using rule 46 (dot_expression -> dots ID .)
    OR              reduce using rule 46 (dot_expression -> dots ID .)
    NAND            reduce using rule 46 (dot_expression -> dots ID .)
    $end            reduce using rule 46 (dot_expression -> dots ID .)
    }               reduce using rule 46 (dot_expression -> dots ID .)
    ;               reduce using rule 46 (dot_expression -> dots ID .)
    THEN            reduce using rule 46 (dot_expression -> dots ID .)
    ,               reduce using rule 46 (dot_expression -> dots ID .)
    LAMBDA          reduce using rule 46 (dot_expression -> dots ID .)
    DO              reduce using rule 46 (dot_expression -> dots ID .)
    )               reduce using rule 46 (dot_expression -> dots ID .)
    ]               reduce using rule 46 (dot_expression -> dots ID .)
    IN              reduce using rule 46 (dot_expression -> dots ID .)
    ELSE            reduce using rule 46 (dot_expression -> dots ID .)

  ! +               [ reduce using rule 51 (expression -> dots ID .) ]
  ! -               [ reduce using rule 51 (expression -> dots ID .) ]
  ! *               [ reduce using rule 51 (expression -> dots ID .) ]
  ! /               [ reduce using rule 51 (expression -> dots ID .) ]
  ! AND             [ reduce using rule 51 (expression -> dots ID .) ]
  ! EQ              [ reduce using rule 51 (expression -> dots ID .) ]
  ! =               [ reduce using rule 51 (expression -> dots ID .) ]
  ! >               [ reduce using rule 51 (expression -> dots ID .) ]
  ! <               [ reduce using rule 51 (expression -> dots ID .) ]
  ! GE              [ reduce using rule 51 (expression -> dots ID .) ]
  ! LE              [ reduce using rule 51 (expression -> dots ID .) ]
  ! NEQS            [ reduce using rule 51 (expression -> dots ID .) ]
  ! OR              [ reduce using rule 51 (expression -> dots ID .) ]
  ! NAND            [ reduce using rule 51 (expression -> dots ID .) ]
  ! $end            [ reduce using rule 51 (expression -> dots ID .) ]
  ! }               [ reduce using rule 51 (expression -> dots ID .) ]
  ! ;               [ reduce using rule 51 (expression -> dots ID .) ]
  ! THEN            [ reduce using rule 51 (expression -> dots ID .) ]
  ! ,               [ reduce using rule 51 (expression -> dots ID .) ]
  ! LAMBDA          [ reduce using rule 51 (expression -> dots ID .) ]
  ! DO              [ reduce using rule 51 (expression -> dots ID .) ]
  ! )               [ reduce using rule 51 (expression -> dots ID .) ]
  ! ]               [ reduce using rule 51 (expression -> dots ID .) ]
  ! IN              [ reduce using rule 51 (expression -> dots ID .) ]
  ! ELSE            [ reduce using rule 51 (expression -> dots ID .) ]


state 61

    (52) expression -> [ expression_list . ]

    ]               shift and go to state 100


state 62

    (43) dots -> . dots .

    ID              reduce using rule 43 (dots -> . dots .)


state 63

    (2) expression -> expression + expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 2 (expression -> expression + expression .)
    -               reduce using rule 2 (expression -> expression + expression .)
    AND             reduce using rule 2 (expression -> expression + expression .)
    EQ              reduce using rule 2 (expression -> expression + expression .)
    =               reduce using rule 2 (expression -> expression + expression .)
    >               reduce using rule 2 (expression -> expression + expression .)
    <               reduce using rule 2 (expression -> expression + expression .)
    GE              reduce using rule 2 (expression -> expression + expression .)
    LE              reduce using rule 2 (expression -> expression + expression .)
    NEQS            reduce using rule 2 (expression -> expression + expression .)
    OR              reduce using rule 2 (expression -> expression + expression .)
    NAND            reduce using rule 2 (expression -> expression + expression .)
    $end            reduce using rule 2 (expression -> expression + expression .)
    }               reduce using rule 2 (expression -> expression + expression .)
    ;               reduce using rule 2 (expression -> expression + expression .)
    THEN            reduce using rule 2 (expression -> expression + expression .)
    ,               reduce using rule 2 (expression -> expression + expression .)
    LAMBDA          reduce using rule 2 (expression -> expression + expression .)
    DO              reduce using rule 2 (expression -> expression + expression .)
    )               reduce using rule 2 (expression -> expression + expression .)
    ]               reduce using rule 2 (expression -> expression + expression .)
    IN              reduce using rule 2 (expression -> expression + expression .)
    ELSE            reduce using rule 2 (expression -> expression + expression .)
    *               shift and go to state 27
    /               shift and go to state 28

  ! *               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 64

    (3) expression -> expression - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 3 (expression -> expression - expression .)
    -               reduce using rule 3 (expression -> expression - expression .)
    AND             reduce using rule 3 (expression -> expression - expression .)
    EQ              reduce using rule 3 (expression -> expression - expression .)
    =               reduce using rule 3 (expression -> expression - expression .)
    >               reduce using rule 3 (expression -> expression - expression .)
    <               reduce using rule 3 (expression -> expression - expression .)
    GE              reduce using rule 3 (expression -> expression - expression .)
    LE              reduce using rule 3 (expression -> expression - expression .)
    NEQS            reduce using rule 3 (expression -> expression - expression .)
    OR              reduce using rule 3 (expression -> expression - expression .)
    NAND            reduce using rule 3 (expression -> expression - expression .)
    $end            reduce using rule 3 (expression -> expression - expression .)
    }               reduce using rule 3 (expression -> expression - expression .)
    ;               reduce using rule 3 (expression -> expression - expression .)
    THEN            reduce using rule 3 (expression -> expression - expression .)
    ,               reduce using rule 3 (expression -> expression - expression .)
    LAMBDA          reduce using rule 3 (expression -> expression - expression .)
    DO              reduce using rule 3 (expression -> expression - expression .)
    )               reduce using rule 3 (expression -> expression - expression .)
    ]               reduce using rule 3 (expression -> expression - expression .)
    IN              reduce using rule 3 (expression -> expression - expression .)
    ELSE            reduce using rule 3 (expression -> expression - expression .)
    *               shift and go to state 27
    /               shift and go to state 28

  ! *               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 65

    (4) expression -> expression * expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 4 (expression -> expression * expression .)
    -               reduce using rule 4 (expression -> expression * expression .)
    *               reduce using rule 4 (expression -> expression * expression .)
    /               reduce using rule 4 (expression -> expression * expression .)
    AND             reduce using rule 4 (expression -> expression * expression .)
    EQ              reduce using rule 4 (expression -> expression * expression .)
    =               reduce using rule 4 (expression -> expression * expression .)
    >               reduce using rule 4 (expression -> expression * expression .)
    <               reduce using rule 4 (expression -> expression * expression .)
    GE              reduce using rule 4 (expression -> expression * expression .)
    LE              reduce using rule 4 (expression -> expression * expression .)
    NEQS            reduce using rule 4 (expression -> expression * expression .)
    OR              reduce using rule 4 (expression -> expression * expression .)
    NAND            reduce using rule 4 (expression -> expression * expression .)
    $end            reduce using rule 4 (expression -> expression * expression .)
    }               reduce using rule 4 (expression -> expression * expression .)
    ;               reduce using rule 4 (expression -> expression * expression .)
    THEN            reduce using rule 4 (expression -> expression * expression .)
    ,               reduce using rule 4 (expression -> expression * expression .)
    LAMBDA          reduce using rule 4 (expression -> expression * expression .)
    DO              reduce using rule 4 (expression -> expression * expression .)
    )               reduce using rule 4 (expression -> expression * expression .)
    ]               reduce using rule 4 (expression -> expression * expression .)
    IN              reduce using rule 4 (expression -> expression * expression .)
    ELSE            reduce using rule 4 (expression -> expression * expression .)

  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! /               [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 66

    (5) expression -> expression / expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    +               reduce using rule 5 (expression -> expression / expression .)
    -               reduce using rule 5 (expression -> expression / expression .)
    *               reduce using rule 5 (expression -> expression / expression .)
    /               reduce using rule 5 (expression -> expression / expression .)
    AND             reduce using rule 5 (expression -> expression / expression .)
    EQ              reduce using rule 5 (expression -> expression / expression .)
    =               reduce using rule 5 (expression -> expression / expression .)
    >               reduce using rule 5 (expression -> expression / expression .)
    <               reduce using rule 5 (expression -> expression / expression .)
    GE              reduce using rule 5 (expression -> expression / expression .)
    LE              reduce using rule 5 (expression -> expression / expression .)
    NEQS            reduce using rule 5 (expression -> expression / expression .)
    OR              reduce using rule 5 (expression -> expression / expression .)
    NAND            reduce using rule 5 (expression -> expression / expression .)
    $end            reduce using rule 5 (expression -> expression / expression .)
    }               reduce using rule 5 (expression -> expression / expression .)
    ;               reduce using rule 5 (expression -> expression / expression .)
    THEN            reduce using rule 5 (expression -> expression / expression .)
    ,               reduce using rule 5 (expression -> expression / expression .)
    LAMBDA          reduce using rule 5 (expression -> expression / expression .)
    DO              reduce using rule 5 (expression -> expression / expression .)
    )               reduce using rule 5 (expression -> expression / expression .)
    ]               reduce using rule 5 (expression -> expression / expression .)
    IN              reduce using rule 5 (expression -> expression / expression .)
    ELSE            reduce using rule 5 (expression -> expression / expression .)

  ! +               [ shift and go to state 25 ]
  ! -               [ shift and go to state 26 ]
  ! *               [ shift and go to state 27 ]
  ! /               [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 67

    (23) expression -> expression AND expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 23 (expression -> expression AND expression .)
    OR              reduce using rule 23 (expression -> expression AND expression .)
    NAND            reduce using rule 23 (expression -> expression AND expression .)
    $end            reduce using rule 23 (expression -> expression AND expression .)
    }               reduce using rule 23 (expression -> expression AND expression .)
    ;               reduce using rule 23 (expression -> expression AND expression .)
    THEN            reduce using rule 23 (expression -> expression AND expression .)
    ,               reduce using rule 23 (expression -> expression AND expression .)
    LAMBDA          reduce using rule 23 (expression -> expression AND expression .)
    DO              reduce using rule 23 (expression -> expression AND expression .)
    )               reduce using rule 23 (expression -> expression AND expression .)
    ]               reduce using rule 23 (expression -> expression AND expression .)
    IN              reduce using rule 23 (expression -> expression AND expression .)
    ELSE            reduce using rule 23 (expression -> expression AND expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36

  ! +               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! =               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! NEQS            [ reduce using rule 23 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 68

    (24) expression -> expression EQ expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 24 (expression -> expression EQ expression .)
    EQ              reduce using rule 24 (expression -> expression EQ expression .)
    =               reduce using rule 24 (expression -> expression EQ expression .)
    NEQS            reduce using rule 24 (expression -> expression EQ expression .)
    OR              reduce using rule 24 (expression -> expression EQ expression .)
    NAND            reduce using rule 24 (expression -> expression EQ expression .)
    $end            reduce using rule 24 (expression -> expression EQ expression .)
    }               reduce using rule 24 (expression -> expression EQ expression .)
    ;               reduce using rule 24 (expression -> expression EQ expression .)
    THEN            reduce using rule 24 (expression -> expression EQ expression .)
    ,               reduce using rule 24 (expression -> expression EQ expression .)
    LAMBDA          reduce using rule 24 (expression -> expression EQ expression .)
    DO              reduce using rule 24 (expression -> expression EQ expression .)
    )               reduce using rule 24 (expression -> expression EQ expression .)
    ]               reduce using rule 24 (expression -> expression EQ expression .)
    IN              reduce using rule 24 (expression -> expression EQ expression .)
    ELSE            reduce using rule 24 (expression -> expression EQ expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35

  ! +               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 24 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 69

    (25) expression -> expression = expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 25 (expression -> expression = expression .)
    EQ              reduce using rule 25 (expression -> expression = expression .)
    =               reduce using rule 25 (expression -> expression = expression .)
    NEQS            reduce using rule 25 (expression -> expression = expression .)
    OR              reduce using rule 25 (expression -> expression = expression .)
    NAND            reduce using rule 25 (expression -> expression = expression .)
    $end            reduce using rule 25 (expression -> expression = expression .)
    }               reduce using rule 25 (expression -> expression = expression .)
    ;               reduce using rule 25 (expression -> expression = expression .)
    THEN            reduce using rule 25 (expression -> expression = expression .)
    ,               reduce using rule 25 (expression -> expression = expression .)
    LAMBDA          reduce using rule 25 (expression -> expression = expression .)
    DO              reduce using rule 25 (expression -> expression = expression .)
    )               reduce using rule 25 (expression -> expression = expression .)
    ]               reduce using rule 25 (expression -> expression = expression .)
    IN              reduce using rule 25 (expression -> expression = expression .)
    ELSE            reduce using rule 25 (expression -> expression = expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35

  ! +               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! >               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 25 (expression -> expression = expression .) ]
  ! GE              [ reduce using rule 25 (expression -> expression = expression .) ]
  ! LE              [ reduce using rule 25 (expression -> expression = expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 70

    (26) expression -> expression > expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 26 (expression -> expression > expression .)
    EQ              reduce using rule 26 (expression -> expression > expression .)
    =               reduce using rule 26 (expression -> expression > expression .)
    >               reduce using rule 26 (expression -> expression > expression .)
    <               reduce using rule 26 (expression -> expression > expression .)
    GE              reduce using rule 26 (expression -> expression > expression .)
    LE              reduce using rule 26 (expression -> expression > expression .)
    NEQS            reduce using rule 26 (expression -> expression > expression .)
    OR              reduce using rule 26 (expression -> expression > expression .)
    NAND            reduce using rule 26 (expression -> expression > expression .)
    $end            reduce using rule 26 (expression -> expression > expression .)
    }               reduce using rule 26 (expression -> expression > expression .)
    ;               reduce using rule 26 (expression -> expression > expression .)
    THEN            reduce using rule 26 (expression -> expression > expression .)
    ,               reduce using rule 26 (expression -> expression > expression .)
    LAMBDA          reduce using rule 26 (expression -> expression > expression .)
    DO              reduce using rule 26 (expression -> expression > expression .)
    )               reduce using rule 26 (expression -> expression > expression .)
    ]               reduce using rule 26 (expression -> expression > expression .)
    IN              reduce using rule 26 (expression -> expression > expression .)
    ELSE            reduce using rule 26 (expression -> expression > expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28

  ! +               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 71

    (27) expression -> expression < expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 27 (expression -> expression < expression .)
    EQ              reduce using rule 27 (expression -> expression < expression .)
    =               reduce using rule 27 (expression -> expression < expression .)
    >               reduce using rule 27 (expression -> expression < expression .)
    <               reduce using rule 27 (expression -> expression < expression .)
    GE              reduce using rule 27 (expression -> expression < expression .)
    LE              reduce using rule 27 (expression -> expression < expression .)
    NEQS            reduce using rule 27 (expression -> expression < expression .)
    OR              reduce using rule 27 (expression -> expression < expression .)
    NAND            reduce using rule 27 (expression -> expression < expression .)
    $end            reduce using rule 27 (expression -> expression < expression .)
    }               reduce using rule 27 (expression -> expression < expression .)
    ;               reduce using rule 27 (expression -> expression < expression .)
    THEN            reduce using rule 27 (expression -> expression < expression .)
    ,               reduce using rule 27 (expression -> expression < expression .)
    LAMBDA          reduce using rule 27 (expression -> expression < expression .)
    DO              reduce using rule 27 (expression -> expression < expression .)
    )               reduce using rule 27 (expression -> expression < expression .)
    ]               reduce using rule 27 (expression -> expression < expression .)
    IN              reduce using rule 27 (expression -> expression < expression .)
    ELSE            reduce using rule 27 (expression -> expression < expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28

  ! +               [ reduce using rule 27 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 27 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 27 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression < expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 72

    (28) expression -> expression GE expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 28 (expression -> expression GE expression .)
    EQ              reduce using rule 28 (expression -> expression GE expression .)
    =               reduce using rule 28 (expression -> expression GE expression .)
    >               reduce using rule 28 (expression -> expression GE expression .)
    <               reduce using rule 28 (expression -> expression GE expression .)
    GE              reduce using rule 28 (expression -> expression GE expression .)
    LE              reduce using rule 28 (expression -> expression GE expression .)
    NEQS            reduce using rule 28 (expression -> expression GE expression .)
    OR              reduce using rule 28 (expression -> expression GE expression .)
    NAND            reduce using rule 28 (expression -> expression GE expression .)
    $end            reduce using rule 28 (expression -> expression GE expression .)
    }               reduce using rule 28 (expression -> expression GE expression .)
    ;               reduce using rule 28 (expression -> expression GE expression .)
    THEN            reduce using rule 28 (expression -> expression GE expression .)
    ,               reduce using rule 28 (expression -> expression GE expression .)
    LAMBDA          reduce using rule 28 (expression -> expression GE expression .)
    DO              reduce using rule 28 (expression -> expression GE expression .)
    )               reduce using rule 28 (expression -> expression GE expression .)
    ]               reduce using rule 28 (expression -> expression GE expression .)
    IN              reduce using rule 28 (expression -> expression GE expression .)
    ELSE            reduce using rule 28 (expression -> expression GE expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28

  ! +               [ reduce using rule 28 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 28 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 28 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 73

    (29) expression -> expression LE expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 29 (expression -> expression LE expression .)
    EQ              reduce using rule 29 (expression -> expression LE expression .)
    =               reduce using rule 29 (expression -> expression LE expression .)
    >               reduce using rule 29 (expression -> expression LE expression .)
    <               reduce using rule 29 (expression -> expression LE expression .)
    GE              reduce using rule 29 (expression -> expression LE expression .)
    LE              reduce using rule 29 (expression -> expression LE expression .)
    NEQS            reduce using rule 29 (expression -> expression LE expression .)
    OR              reduce using rule 29 (expression -> expression LE expression .)
    NAND            reduce using rule 29 (expression -> expression LE expression .)
    $end            reduce using rule 29 (expression -> expression LE expression .)
    }               reduce using rule 29 (expression -> expression LE expression .)
    ;               reduce using rule 29 (expression -> expression LE expression .)
    THEN            reduce using rule 29 (expression -> expression LE expression .)
    ,               reduce using rule 29 (expression -> expression LE expression .)
    LAMBDA          reduce using rule 29 (expression -> expression LE expression .)
    DO              reduce using rule 29 (expression -> expression LE expression .)
    )               reduce using rule 29 (expression -> expression LE expression .)
    ]               reduce using rule 29 (expression -> expression LE expression .)
    IN              reduce using rule 29 (expression -> expression LE expression .)
    ELSE            reduce using rule 29 (expression -> expression LE expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28

  ! +               [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! >               [ shift and go to state 32 ]
  ! <               [ shift and go to state 33 ]
  ! GE              [ shift and go to state 34 ]
  ! LE              [ shift and go to state 35 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 74

    (30) expression -> expression NEQS expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 30 (expression -> expression NEQS expression .)
    EQ              reduce using rule 30 (expression -> expression NEQS expression .)
    =               reduce using rule 30 (expression -> expression NEQS expression .)
    NEQS            reduce using rule 30 (expression -> expression NEQS expression .)
    OR              reduce using rule 30 (expression -> expression NEQS expression .)
    NAND            reduce using rule 30 (expression -> expression NEQS expression .)
    $end            reduce using rule 30 (expression -> expression NEQS expression .)
    }               reduce using rule 30 (expression -> expression NEQS expression .)
    ;               reduce using rule 30 (expression -> expression NEQS expression .)
    THEN            reduce using rule 30 (expression -> expression NEQS expression .)
    ,               reduce using rule 30 (expression -> expression NEQS expression .)
    LAMBDA          reduce using rule 30 (expression -> expression NEQS expression .)
    DO              reduce using rule 30 (expression -> expression NEQS expression .)
    )               reduce using rule 30 (expression -> expression NEQS expression .)
    ]               reduce using rule 30 (expression -> expression NEQS expression .)
    IN              reduce using rule 30 (expression -> expression NEQS expression .)
    ELSE            reduce using rule 30 (expression -> expression NEQS expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35

  ! +               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! -               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! *               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! /               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! >               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! <               [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! GE              [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! LE              [ reduce using rule 30 (expression -> expression NEQS expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! EQ              [ shift and go to state 30 ]
  ! =               [ shift and go to state 31 ]
  ! NEQS            [ shift and go to state 36 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 75

    (31) expression -> expression OR expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    OR              reduce using rule 31 (expression -> expression OR expression .)
    $end            reduce using rule 31 (expression -> expression OR expression .)
    }               reduce using rule 31 (expression -> expression OR expression .)
    ;               reduce using rule 31 (expression -> expression OR expression .)
    THEN            reduce using rule 31 (expression -> expression OR expression .)
    ,               reduce using rule 31 (expression -> expression OR expression .)
    LAMBDA          reduce using rule 31 (expression -> expression OR expression .)
    DO              reduce using rule 31 (expression -> expression OR expression .)
    )               reduce using rule 31 (expression -> expression OR expression .)
    ]               reduce using rule 31 (expression -> expression OR expression .)
    IN              reduce using rule 31 (expression -> expression OR expression .)
    ELSE            reduce using rule 31 (expression -> expression OR expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    NAND            shift and go to state 38

  ! +               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! =               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! NEQS            [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! NAND            [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 37 ]


state 76

    (32) expression -> expression NAND expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    AND             reduce using rule 32 (expression -> expression NAND expression .)
    OR              reduce using rule 32 (expression -> expression NAND expression .)
    NAND            reduce using rule 32 (expression -> expression NAND expression .)
    $end            reduce using rule 32 (expression -> expression NAND expression .)
    }               reduce using rule 32 (expression -> expression NAND expression .)
    ;               reduce using rule 32 (expression -> expression NAND expression .)
    THEN            reduce using rule 32 (expression -> expression NAND expression .)
    ,               reduce using rule 32 (expression -> expression NAND expression .)
    LAMBDA          reduce using rule 32 (expression -> expression NAND expression .)
    DO              reduce using rule 32 (expression -> expression NAND expression .)
    )               reduce using rule 32 (expression -> expression NAND expression .)
    ]               reduce using rule 32 (expression -> expression NAND expression .)
    IN              reduce using rule 32 (expression -> expression NAND expression .)
    ELSE            reduce using rule 32 (expression -> expression NAND expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36

  ! +               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! -               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! *               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! /               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! EQ              [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! =               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! >               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! <               [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! GE              [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! LE              [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! NEQS            [ reduce using rule 32 (expression -> expression NAND expression .) ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 37 ]
  ! NAND            [ shift and go to state 38 ]


state 77

    (9) expression -> { sequence } .

    +               reduce using rule 9 (expression -> { sequence } .)
    -               reduce using rule 9 (expression -> { sequence } .)
    *               reduce using rule 9 (expression -> { sequence } .)
    /               reduce using rule 9 (expression -> { sequence } .)
    AND             reduce using rule 9 (expression -> { sequence } .)
    EQ              reduce using rule 9 (expression -> { sequence } .)
    =               reduce using rule 9 (expression -> { sequence } .)
    >               reduce using rule 9 (expression -> { sequence } .)
    <               reduce using rule 9 (expression -> { sequence } .)
    GE              reduce using rule 9 (expression -> { sequence } .)
    LE              reduce using rule 9 (expression -> { sequence } .)
    NEQS            reduce using rule 9 (expression -> { sequence } .)
    OR              reduce using rule 9 (expression -> { sequence } .)
    NAND            reduce using rule 9 (expression -> { sequence } .)
    $end            reduce using rule 9 (expression -> { sequence } .)
    }               reduce using rule 9 (expression -> { sequence } .)
    ;               reduce using rule 9 (expression -> { sequence } .)
    THEN            reduce using rule 9 (expression -> { sequence } .)
    ,               reduce using rule 9 (expression -> { sequence } .)
    LAMBDA          reduce using rule 9 (expression -> { sequence } .)
    DO              reduce using rule 9 (expression -> { sequence } .)
    )               reduce using rule 9 (expression -> { sequence } .)
    ]               reduce using rule 9 (expression -> { sequence } .)
    IN              reduce using rule 9 (expression -> { sequence } .)
    ELSE            reduce using rule 9 (expression -> { sequence } .)


state 78

    (17) sequence -> sequence ; . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 101
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 79

    (10) expression -> LOCAL ID ASSIGN . expression IN expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 102
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 80

    (38) expression -> ID ( ) .

    +               reduce using rule 38 (expression -> ID ( ) .)
    -               reduce using rule 38 (expression -> ID ( ) .)
    *               reduce using rule 38 (expression -> ID ( ) .)
    /               reduce using rule 38 (expression -> ID ( ) .)
    AND             reduce using rule 38 (expression -> ID ( ) .)
    EQ              reduce using rule 38 (expression -> ID ( ) .)
    =               reduce using rule 38 (expression -> ID ( ) .)
    >               reduce using rule 38 (expression -> ID ( ) .)
    <               reduce using rule 38 (expression -> ID ( ) .)
    GE              reduce using rule 38 (expression -> ID ( ) .)
    LE              reduce using rule 38 (expression -> ID ( ) .)
    NEQS            reduce using rule 38 (expression -> ID ( ) .)
    OR              reduce using rule 38 (expression -> ID ( ) .)
    NAND            reduce using rule 38 (expression -> ID ( ) .)
    $end            reduce using rule 38 (expression -> ID ( ) .)
    }               reduce using rule 38 (expression -> ID ( ) .)
    ;               reduce using rule 38 (expression -> ID ( ) .)
    THEN            reduce using rule 38 (expression -> ID ( ) .)
    ,               reduce using rule 38 (expression -> ID ( ) .)
    LAMBDA          reduce using rule 38 (expression -> ID ( ) .)
    DO              reduce using rule 38 (expression -> ID ( ) .)
    )               reduce using rule 38 (expression -> ID ( ) .)
    ]               reduce using rule 38 (expression -> ID ( ) .)
    IN              reduce using rule 38 (expression -> ID ( ) .)
    ELSE            reduce using rule 38 (expression -> ID ( ) .)


state 81

    (39) expression -> ID ( expression_list . )

    )               shift and go to state 103


state 82

    (53) expression -> ID ASSIGN expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 53 (expression -> ID ASSIGN expression .)
    }               reduce using rule 53 (expression -> ID ASSIGN expression .)
    ;               reduce using rule 53 (expression -> ID ASSIGN expression .)
    THEN            reduce using rule 53 (expression -> ID ASSIGN expression .)
    ,               reduce using rule 53 (expression -> ID ASSIGN expression .)
    LAMBDA          reduce using rule 53 (expression -> ID ASSIGN expression .)
    DO              reduce using rule 53 (expression -> ID ASSIGN expression .)
    )               reduce using rule 53 (expression -> ID ASSIGN expression .)
    ]               reduce using rule 53 (expression -> ID ASSIGN expression .)
    IN              reduce using rule 53 (expression -> ID ASSIGN expression .)
    ELSE            reduce using rule 53 (expression -> ID ASSIGN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! -               [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! *               [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! /               [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! AND             [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! EQ              [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! =               [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! >               [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! <               [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! GE              [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! LE              [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! NEQS            [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! OR              [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]
  ! NAND            [ reduce using rule 53 (expression -> ID ASSIGN expression .) ]


state 83

    (54) expression -> ID [ NUMBER . ]

    ]               shift and go to state 104


state 84

    (45) dot_expression -> ID dots ID .

    (               reduce using rule 45 (dot_expression -> ID dots ID .)
    +               reduce using rule 45 (dot_expression -> ID dots ID .)
    -               reduce using rule 45 (dot_expression -> ID dots ID .)
    *               reduce using rule 45 (dot_expression -> ID dots ID .)
    /               reduce using rule 45 (dot_expression -> ID dots ID .)
    AND             reduce using rule 45 (dot_expression -> ID dots ID .)
    EQ              reduce using rule 45 (dot_expression -> ID dots ID .)
    =               reduce using rule 45 (dot_expression -> ID dots ID .)
    >               reduce using rule 45 (dot_expression -> ID dots ID .)
    <               reduce using rule 45 (dot_expression -> ID dots ID .)
    GE              reduce using rule 45 (dot_expression -> ID dots ID .)
    LE              reduce using rule 45 (dot_expression -> ID dots ID .)
    NEQS            reduce using rule 45 (dot_expression -> ID dots ID .)
    OR              reduce using rule 45 (dot_expression -> ID dots ID .)
    NAND            reduce using rule 45 (dot_expression -> ID dots ID .)
    $end            reduce using rule 45 (dot_expression -> ID dots ID .)
    }               reduce using rule 45 (dot_expression -> ID dots ID .)
    ;               reduce using rule 45 (dot_expression -> ID dots ID .)
    THEN            reduce using rule 45 (dot_expression -> ID dots ID .)
    ,               reduce using rule 45 (dot_expression -> ID dots ID .)
    LAMBDA          reduce using rule 45 (dot_expression -> ID dots ID .)
    DO              reduce using rule 45 (dot_expression -> ID dots ID .)
    )               reduce using rule 45 (dot_expression -> ID dots ID .)
    ]               reduce using rule 45 (dot_expression -> ID dots ID .)
    IN              reduce using rule 45 (dot_expression -> ID dots ID .)
    ELSE            reduce using rule 45 (dot_expression -> ID dots ID .)


state 85

    (12) expression -> IF expression THEN . expression
    (19) expression -> IF expression THEN . expression ELSE expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 105
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 86

    (13) expression -> IMPORT ID AS . ID

    ID              shift and go to state 106


state 87

    (21) expression -> LAMBDA_START LAMBDA expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    }               reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    ;               reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    THEN            reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    ,               reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    LAMBDA          reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    DO              reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    )               reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    ]               reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    IN              reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    ELSE            reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! -               [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! *               [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! /               [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! AND             [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! EQ              [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! =               [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! >               [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! <               [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! GE              [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! LE              [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! NEQS            [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! OR              [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]
  ! NAND            [ reduce using rule 21 (expression -> LAMBDA_START LAMBDA expression .) ]


state 88

    (6) expression_list -> expression , . expression_list
    (6) expression_list -> . expression , expression_list
    (7) expression_list -> . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 50
    expression_list                shift and go to state 107
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 89

    (22) expression -> LAMBDA_START expression_list LAMBDA . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 108
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 90

    (34) expression -> STRUCT { sequence_struct . }
    (14) sequence_struct -> sequence_struct . ; . ID ASSIGN expression

    }               shift and go to state 109
    ;               shift and go to state 110


state 91

    (15) sequence_struct -> . . ID ASSIGN expression

    ID              shift and go to state 111


state 92

    (35) expression -> LOOP expression DO . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 112
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 93

    (37) expression -> EXTEND ID { . sequence_struct }
    (14) sequence_struct -> . sequence_struct ; . ID ASSIGN expression
    (15) sequence_struct -> . . ID ASSIGN expression

    .               shift and go to state 91

    sequence_struct                shift and go to state 113

state 94

    (56) expression -> ( expression_list ) .

    +               reduce using rule 56 (expression -> ( expression_list ) .)
    -               reduce using rule 56 (expression -> ( expression_list ) .)
    *               reduce using rule 56 (expression -> ( expression_list ) .)
    /               reduce using rule 56 (expression -> ( expression_list ) .)
    AND             reduce using rule 56 (expression -> ( expression_list ) .)
    EQ              reduce using rule 56 (expression -> ( expression_list ) .)
    =               reduce using rule 56 (expression -> ( expression_list ) .)
    >               reduce using rule 56 (expression -> ( expression_list ) .)
    <               reduce using rule 56 (expression -> ( expression_list ) .)
    GE              reduce using rule 56 (expression -> ( expression_list ) .)
    LE              reduce using rule 56 (expression -> ( expression_list ) .)
    NEQS            reduce using rule 56 (expression -> ( expression_list ) .)
    OR              reduce using rule 56 (expression -> ( expression_list ) .)
    NAND            reduce using rule 56 (expression -> ( expression_list ) .)
    $end            reduce using rule 56 (expression -> ( expression_list ) .)
    }               reduce using rule 56 (expression -> ( expression_list ) .)
    ;               reduce using rule 56 (expression -> ( expression_list ) .)
    THEN            reduce using rule 56 (expression -> ( expression_list ) .)
    ,               reduce using rule 56 (expression -> ( expression_list ) .)
    LAMBDA          reduce using rule 56 (expression -> ( expression_list ) .)
    DO              reduce using rule 56 (expression -> ( expression_list ) .)
    )               reduce using rule 56 (expression -> ( expression_list ) .)
    ]               reduce using rule 56 (expression -> ( expression_list ) .)
    IN              reduce using rule 56 (expression -> ( expression_list ) .)
    ELSE            reduce using rule 56 (expression -> ( expression_list ) .)


state 95

    (40) expression -> FOR expression ; . expression ; expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 114
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 96

    (44) expression -> WHILE expression DO . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 115
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 97

    (49) expression -> dot_expression ( ) .

    +               reduce using rule 49 (expression -> dot_expression ( ) .)
    -               reduce using rule 49 (expression -> dot_expression ( ) .)
    *               reduce using rule 49 (expression -> dot_expression ( ) .)
    /               reduce using rule 49 (expression -> dot_expression ( ) .)
    AND             reduce using rule 49 (expression -> dot_expression ( ) .)
    EQ              reduce using rule 49 (expression -> dot_expression ( ) .)
    =               reduce using rule 49 (expression -> dot_expression ( ) .)
    >               reduce using rule 49 (expression -> dot_expression ( ) .)
    <               reduce using rule 49 (expression -> dot_expression ( ) .)
    GE              reduce using rule 49 (expression -> dot_expression ( ) .)
    LE              reduce using rule 49 (expression -> dot_expression ( ) .)
    NEQS            reduce using rule 49 (expression -> dot_expression ( ) .)
    OR              reduce using rule 49 (expression -> dot_expression ( ) .)
    NAND            reduce using rule 49 (expression -> dot_expression ( ) .)
    $end            reduce using rule 49 (expression -> dot_expression ( ) .)
    }               reduce using rule 49 (expression -> dot_expression ( ) .)
    ;               reduce using rule 49 (expression -> dot_expression ( ) .)
    THEN            reduce using rule 49 (expression -> dot_expression ( ) .)
    ,               reduce using rule 49 (expression -> dot_expression ( ) .)
    LAMBDA          reduce using rule 49 (expression -> dot_expression ( ) .)
    DO              reduce using rule 49 (expression -> dot_expression ( ) .)
    )               reduce using rule 49 (expression -> dot_expression ( ) .)
    ]               reduce using rule 49 (expression -> dot_expression ( ) .)
    IN              reduce using rule 49 (expression -> dot_expression ( ) .)
    ELSE            reduce using rule 49 (expression -> dot_expression ( ) .)


state 98

    (50) expression -> dot_expression ( expression_list . )

    )               shift and go to state 116


state 99

    (55) expression -> dots ID ASSIGN . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    dots                           shift and go to state 22
    expression                     shift and go to state 117
    dot_expression                 shift and go to state 21

state 100

    (52) expression -> [ expression_list ] .

    +               reduce using rule 52 (expression -> [ expression_list ] .)
    -               reduce using rule 52 (expression -> [ expression_list ] .)
    *               reduce using rule 52 (expression -> [ expression_list ] .)
    /               reduce using rule 52 (expression -> [ expression_list ] .)
    AND             reduce using rule 52 (expression -> [ expression_list ] .)
    EQ              reduce using rule 52 (expression -> [ expression_list ] .)
    =               reduce using rule 52 (expression -> [ expression_list ] .)
    >               reduce using rule 52 (expression -> [ expression_list ] .)
    <               reduce using rule 52 (expression -> [ expression_list ] .)
    GE              reduce using rule 52 (expression -> [ expression_list ] .)
    LE              reduce using rule 52 (expression -> [ expression_list ] .)
    NEQS            reduce using rule 52 (expression -> [ expression_list ] .)
    OR              reduce using rule 52 (expression -> [ expression_list ] .)
    NAND            reduce using rule 52 (expression -> [ expression_list ] .)
    $end            reduce using rule 52 (expression -> [ expression_list ] .)
    }               reduce using rule 52 (expression -> [ expression_list ] .)
    ;               reduce using rule 52 (expression -> [ expression_list ] .)
    THEN            reduce using rule 52 (expression -> [ expression_list ] .)
    ,               reduce using rule 52 (expression -> [ expression_list ] .)
    LAMBDA          reduce using rule 52 (expression -> [ expression_list ] .)
    DO              reduce using rule 52 (expression -> [ expression_list ] .)
    )               reduce using rule 52 (expression -> [ expression_list ] .)
    ]               reduce using rule 52 (expression -> [ expression_list ] .)
    IN              reduce using rule 52 (expression -> [ expression_list ] .)
    ELSE            reduce using rule 52 (expression -> [ expression_list ] .)


state 101

    (17) sequence -> sequence ; expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 17 (sequence -> sequence ; expression .)
    ;               reduce using rule 17 (sequence -> sequence ; expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 102

    (10) expression -> LOCAL ID ASSIGN expression . IN expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    IN              shift and go to state 118
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 103

    (39) expression -> ID ( expression_list ) .

    +               reduce using rule 39 (expression -> ID ( expression_list ) .)
    -               reduce using rule 39 (expression -> ID ( expression_list ) .)
    *               reduce using rule 39 (expression -> ID ( expression_list ) .)
    /               reduce using rule 39 (expression -> ID ( expression_list ) .)
    AND             reduce using rule 39 (expression -> ID ( expression_list ) .)
    EQ              reduce using rule 39 (expression -> ID ( expression_list ) .)
    =               reduce using rule 39 (expression -> ID ( expression_list ) .)
    >               reduce using rule 39 (expression -> ID ( expression_list ) .)
    <               reduce using rule 39 (expression -> ID ( expression_list ) .)
    GE              reduce using rule 39 (expression -> ID ( expression_list ) .)
    LE              reduce using rule 39 (expression -> ID ( expression_list ) .)
    NEQS            reduce using rule 39 (expression -> ID ( expression_list ) .)
    OR              reduce using rule 39 (expression -> ID ( expression_list ) .)
    NAND            reduce using rule 39 (expression -> ID ( expression_list ) .)
    $end            reduce using rule 39 (expression -> ID ( expression_list ) .)
    }               reduce using rule 39 (expression -> ID ( expression_list ) .)
    ;               reduce using rule 39 (expression -> ID ( expression_list ) .)
    THEN            reduce using rule 39 (expression -> ID ( expression_list ) .)
    ,               reduce using rule 39 (expression -> ID ( expression_list ) .)
    LAMBDA          reduce using rule 39 (expression -> ID ( expression_list ) .)
    DO              reduce using rule 39 (expression -> ID ( expression_list ) .)
    )               reduce using rule 39 (expression -> ID ( expression_list ) .)
    ]               reduce using rule 39 (expression -> ID ( expression_list ) .)
    IN              reduce using rule 39 (expression -> ID ( expression_list ) .)
    ELSE            reduce using rule 39 (expression -> ID ( expression_list ) .)


state 104

    (54) expression -> ID [ NUMBER ] .

    +               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    AND             reduce using rule 54 (expression -> ID [ NUMBER ] .)
    EQ              reduce using rule 54 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    GE              reduce using rule 54 (expression -> ID [ NUMBER ] .)
    LE              reduce using rule 54 (expression -> ID [ NUMBER ] .)
    NEQS            reduce using rule 54 (expression -> ID [ NUMBER ] .)
    OR              reduce using rule 54 (expression -> ID [ NUMBER ] .)
    NAND            reduce using rule 54 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 54 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    THEN            reduce using rule 54 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    LAMBDA          reduce using rule 54 (expression -> ID [ NUMBER ] .)
    DO              reduce using rule 54 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 54 (expression -> ID [ NUMBER ] .)
    IN              reduce using rule 54 (expression -> ID [ NUMBER ] .)
    ELSE            reduce using rule 54 (expression -> ID [ NUMBER ] .)


state 105

    (12) expression -> IF expression THEN expression .
    (19) expression -> IF expression THEN expression . ELSE expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 12 (expression -> IF expression THEN expression .)
    }               reduce using rule 12 (expression -> IF expression THEN expression .)
    ;               reduce using rule 12 (expression -> IF expression THEN expression .)
    THEN            reduce using rule 12 (expression -> IF expression THEN expression .)
    ,               reduce using rule 12 (expression -> IF expression THEN expression .)
    LAMBDA          reduce using rule 12 (expression -> IF expression THEN expression .)
    DO              reduce using rule 12 (expression -> IF expression THEN expression .)
    )               reduce using rule 12 (expression -> IF expression THEN expression .)
    ]               reduce using rule 12 (expression -> IF expression THEN expression .)
    IN              reduce using rule 12 (expression -> IF expression THEN expression .)
    ELSE            shift and go to state 119
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! -               [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! *               [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! /               [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! AND             [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! EQ              [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! =               [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! >               [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! <               [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! GE              [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! LE              [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! NEQS            [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! OR              [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! NAND            [ reduce using rule 12 (expression -> IF expression THEN expression .) ]
  ! ELSE            [ reduce using rule 12 (expression -> IF expression THEN expression .) ]


state 106

    (13) expression -> IMPORT ID AS ID .

    +               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    -               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    *               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    /               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    AND             reduce using rule 13 (expression -> IMPORT ID AS ID .)
    EQ              reduce using rule 13 (expression -> IMPORT ID AS ID .)
    =               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    >               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    <               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    GE              reduce using rule 13 (expression -> IMPORT ID AS ID .)
    LE              reduce using rule 13 (expression -> IMPORT ID AS ID .)
    NEQS            reduce using rule 13 (expression -> IMPORT ID AS ID .)
    OR              reduce using rule 13 (expression -> IMPORT ID AS ID .)
    NAND            reduce using rule 13 (expression -> IMPORT ID AS ID .)
    $end            reduce using rule 13 (expression -> IMPORT ID AS ID .)
    }               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    ;               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    THEN            reduce using rule 13 (expression -> IMPORT ID AS ID .)
    ,               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    LAMBDA          reduce using rule 13 (expression -> IMPORT ID AS ID .)
    DO              reduce using rule 13 (expression -> IMPORT ID AS ID .)
    )               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    ]               reduce using rule 13 (expression -> IMPORT ID AS ID .)
    IN              reduce using rule 13 (expression -> IMPORT ID AS ID .)
    ELSE            reduce using rule 13 (expression -> IMPORT ID AS ID .)


state 107

    (6) expression_list -> expression , expression_list .

    LAMBDA          reduce using rule 6 (expression_list -> expression , expression_list .)
    )               reduce using rule 6 (expression_list -> expression , expression_list .)
    ]               reduce using rule 6 (expression_list -> expression , expression_list .)


state 108

    (22) expression -> LAMBDA_START expression_list LAMBDA expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    }               reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    ;               reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    THEN            reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    ,               reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    LAMBDA          reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    DO              reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    )               reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    ]               reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    IN              reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    ELSE            reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! -               [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! *               [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! /               [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! AND             [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! EQ              [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! =               [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! >               [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! <               [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! GE              [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! LE              [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! NEQS            [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! OR              [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]
  ! NAND            [ reduce using rule 22 (expression -> LAMBDA_START expression_list LAMBDA expression .) ]


state 109

    (34) expression -> STRUCT { sequence_struct } .

    +               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    -               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    *               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    /               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    AND             reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    EQ              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    =               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    >               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    <               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    GE              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    LE              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    NEQS            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    OR              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    NAND            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    $end            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    }               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    ;               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    THEN            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    ,               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    LAMBDA          reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    DO              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    )               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    ]               reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    IN              reduce using rule 34 (expression -> STRUCT { sequence_struct } .)
    ELSE            reduce using rule 34 (expression -> STRUCT { sequence_struct } .)


state 110

    (14) sequence_struct -> sequence_struct ; . . ID ASSIGN expression

    .               shift and go to state 120


state 111

    (15) sequence_struct -> . ID . ASSIGN expression

    ASSIGN          shift and go to state 121


state 112

    (35) expression -> LOOP expression DO expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 35 (expression -> LOOP expression DO expression .)
    }               reduce using rule 35 (expression -> LOOP expression DO expression .)
    ;               reduce using rule 35 (expression -> LOOP expression DO expression .)
    THEN            reduce using rule 35 (expression -> LOOP expression DO expression .)
    ,               reduce using rule 35 (expression -> LOOP expression DO expression .)
    LAMBDA          reduce using rule 35 (expression -> LOOP expression DO expression .)
    DO              reduce using rule 35 (expression -> LOOP expression DO expression .)
    )               reduce using rule 35 (expression -> LOOP expression DO expression .)
    ]               reduce using rule 35 (expression -> LOOP expression DO expression .)
    IN              reduce using rule 35 (expression -> LOOP expression DO expression .)
    ELSE            reduce using rule 35 (expression -> LOOP expression DO expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! -               [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! *               [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! /               [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! AND             [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! EQ              [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! =               [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! >               [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! <               [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! GE              [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! LE              [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! NEQS            [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! OR              [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]
  ! NAND            [ reduce using rule 35 (expression -> LOOP expression DO expression .) ]


state 113

    (37) expression -> EXTEND ID { sequence_struct . }
    (14) sequence_struct -> sequence_struct . ; . ID ASSIGN expression

    }               shift and go to state 122
    ;               shift and go to state 110


state 114

    (40) expression -> FOR expression ; expression . ; expression DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    ;               shift and go to state 123
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 115

    (44) expression -> WHILE expression DO expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 44 (expression -> WHILE expression DO expression .)
    }               reduce using rule 44 (expression -> WHILE expression DO expression .)
    ;               reduce using rule 44 (expression -> WHILE expression DO expression .)
    THEN            reduce using rule 44 (expression -> WHILE expression DO expression .)
    ,               reduce using rule 44 (expression -> WHILE expression DO expression .)
    LAMBDA          reduce using rule 44 (expression -> WHILE expression DO expression .)
    DO              reduce using rule 44 (expression -> WHILE expression DO expression .)
    )               reduce using rule 44 (expression -> WHILE expression DO expression .)
    ]               reduce using rule 44 (expression -> WHILE expression DO expression .)
    IN              reduce using rule 44 (expression -> WHILE expression DO expression .)
    ELSE            reduce using rule 44 (expression -> WHILE expression DO expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! -               [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! *               [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! /               [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! AND             [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! =               [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! >               [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! <               [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! GE              [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! LE              [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! NEQS            [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! OR              [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]
  ! NAND            [ reduce using rule 44 (expression -> WHILE expression DO expression .) ]


state 116

    (50) expression -> dot_expression ( expression_list ) .

    +               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    -               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    *               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    /               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    AND             reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    EQ              reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    =               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    >               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    <               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    GE              reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    LE              reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    NEQS            reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    OR              reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    NAND            reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    $end            reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    }               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    ;               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    THEN            reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    ,               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    LAMBDA          reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    DO              reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    )               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    ]               reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    IN              reduce using rule 50 (expression -> dot_expression ( expression_list ) .)
    ELSE            reduce using rule 50 (expression -> dot_expression ( expression_list ) .)


state 117

    (55) expression -> dots ID ASSIGN expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    }               reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    ;               reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    THEN            reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    ,               reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    LAMBDA          reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    DO              reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    )               reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    ]               reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    IN              reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    ELSE            reduce using rule 55 (expression -> dots ID ASSIGN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! -               [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! *               [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! /               [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! AND             [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! =               [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! >               [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! <               [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! GE              [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! LE              [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! NEQS            [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! OR              [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]
  ! NAND            [ reduce using rule 55 (expression -> dots ID ASSIGN expression .) ]


state 118

    (10) expression -> LOCAL ID ASSIGN expression IN . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 124
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 119

    (19) expression -> IF expression THEN expression ELSE . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 125
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 120

    (14) sequence_struct -> sequence_struct ; . . ID ASSIGN expression

    ID              shift and go to state 126


state 121

    (15) sequence_struct -> . ID ASSIGN . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 127
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 122

    (37) expression -> EXTEND ID { sequence_struct } .

    +               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    -               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    *               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    /               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    AND             reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    EQ              reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    =               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    >               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    <               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    GE              reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    LE              reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    NEQS            reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    OR              reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    NAND            reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    $end            reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    }               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    ;               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    THEN            reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    ,               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    LAMBDA          reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    DO              reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    )               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    ]               reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    IN              reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)
    ELSE            reduce using rule 37 (expression -> EXTEND ID { sequence_struct } .)


state 123

    (40) expression -> FOR expression ; expression ; . expression DO expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 128
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 124

    (10) expression -> LOCAL ID ASSIGN expression IN expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for NEQS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
    $end            reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    }               reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ;               reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    THEN            reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ,               reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    LAMBDA          reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    DO              reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    )               reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ]               reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    IN              reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    ELSE            reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! -               [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! *               [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! /               [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! AND             [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! EQ              [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! =               [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! >               [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! <               [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! GE              [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! LE              [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! NEQS            [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! OR              [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]
  ! NAND            [ reduce using rule 10 (expression -> LOCAL ID ASSIGN expression IN expression .) ]


state 125

    (19) expression -> IF expression THEN expression ELSE expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    }               reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    ;               reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    ,               reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    LAMBDA          reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    DO              reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    )               reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    ]               reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    IN              reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! -               [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! *               [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! /               [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! AND             [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! EQ              [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! =               [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! >               [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! <               [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! GE              [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LE              [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! NEQS            [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! OR              [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]
  ! NAND            [ reduce using rule 19 (expression -> IF expression THEN expression ELSE expression .) ]


state 126

    (14) sequence_struct -> sequence_struct ; . ID . ASSIGN expression

    ASSIGN          shift and go to state 129


state 127

    (15) sequence_struct -> . ID ASSIGN expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 15 (sequence_struct -> . ID ASSIGN expression .)
    ;               reduce using rule 15 (sequence_struct -> . ID ASSIGN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 128

    (40) expression -> FOR expression ; expression ; expression . DO expression
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    DO              shift and go to state 130
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 129

    (14) sequence_struct -> sequence_struct ; . ID ASSIGN . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 131
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 130

    (40) expression -> FOR expression ; expression ; expression DO . expression
    (1) expression -> . - expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . { sequence }
    (10) expression -> . LOCAL ID ASSIGN expression IN expression
    (11) expression -> . BOOL
    (12) expression -> . IF expression THEN expression
    (13) expression -> . IMPORT ID AS ID
    (18) expression -> . FLOAT
    (19) expression -> . IF expression THEN expression ELSE expression
    (20) expression -> . IMPORT ID
    (21) expression -> . LAMBDA_START LAMBDA expression
    (22) expression -> . LAMBDA_START expression_list LAMBDA expression
    (23) expression -> . expression AND expression
    (24) expression -> . expression EQ expression
    (25) expression -> . expression = expression
    (26) expression -> . expression > expression
    (27) expression -> . expression < expression
    (28) expression -> . expression GE expression
    (29) expression -> . expression LE expression
    (30) expression -> . expression NEQS expression
    (31) expression -> . expression OR expression
    (32) expression -> . expression NAND expression
    (33) expression -> . STRING
    (34) expression -> . STRUCT { sequence_struct }
    (35) expression -> . LOOP expression DO expression
    (36) expression -> . CHAR
    (37) expression -> . EXTEND ID { sequence_struct }
    (38) expression -> . ID ( )
    (39) expression -> . ID ( expression_list )
    (40) expression -> . FOR expression ; expression ; expression DO expression
    (41) expression -> . ID
    (44) expression -> . WHILE expression DO expression
    (47) expression -> . NOT expression
    (48) expression -> . dot_expression
    (49) expression -> . dot_expression ( )
    (50) expression -> . dot_expression ( expression_list )
    (51) expression -> . dots ID
    (52) expression -> . [ expression_list ]
    (53) expression -> . ID ASSIGN expression
    (54) expression -> . ID [ NUMBER ]
    (55) expression -> . dots ID ASSIGN expression
    (56) expression -> . ( expression_list )
    (45) dot_expression -> . ID dots ID
    (46) dot_expression -> . dots ID
    (42) dots -> . .
    (43) dots -> . . dots

    -               shift and go to state 2
    NUMBER          shift and go to state 3
    {               shift and go to state 4
    LOCAL           shift and go to state 5
    BOOL            shift and go to state 7
    IF              shift and go to state 8
    IMPORT          shift and go to state 9
    FLOAT           shift and go to state 10
    LAMBDA_START    shift and go to state 11
    STRING          shift and go to state 12
    STRUCT          shift and go to state 13
    LOOP            shift and go to state 14
    CHAR            shift and go to state 15
    EXTEND          shift and go to state 16
    ID              shift and go to state 6
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    NOT             shift and go to state 20
    [               shift and go to state 23
    (               shift and go to state 17
    .               shift and go to state 24

    expression                     shift and go to state 132
    dot_expression                 shift and go to state 21
    dots                           shift and go to state 22

state 131

    (14) sequence_struct -> sequence_struct ; . ID ASSIGN expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    }               reduce using rule 14 (sequence_struct -> sequence_struct ; . ID ASSIGN expression .)
    ;               reduce using rule 14 (sequence_struct -> sequence_struct ; . ID ASSIGN expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38


state 132

    (40) expression -> FOR expression ; expression ; expression DO expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (23) expression -> expression . AND expression
    (24) expression -> expression . EQ expression
    (25) expression -> expression . = expression
    (26) expression -> expression . > expression
    (27) expression -> expression . < expression
    (28) expression -> expression . GE expression
    (29) expression -> expression . LE expression
    (30) expression -> expression . NEQS expression
    (31) expression -> expression . OR expression
    (32) expression -> expression . NAND expression

    $end            reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    }               reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    ;               reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    THEN            reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    ,               reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    LAMBDA          reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    DO              reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    )               reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    ]               reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    IN              reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    ELSE            reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .)
    +               shift and go to state 25
    -               shift and go to state 26
    *               shift and go to state 27
    /               shift and go to state 28
    AND             shift and go to state 29
    EQ              shift and go to state 30
    =               shift and go to state 31
    >               shift and go to state 32
    <               shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    NEQS            shift and go to state 36
    OR              shift and go to state 37
    NAND            shift and go to state 38

  ! +               [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! -               [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! *               [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! /               [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! AND             [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! EQ              [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! =               [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! >               [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! <               [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! GE              [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! LE              [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! NEQS            [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! OR              [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]
  ! NAND            [ reduce using rule 40 (expression -> FOR expression ; expression ; expression DO expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 124 resolved as shift
WARNING: shift/reduce conflict for - in state 124 resolved as shift
WARNING: shift/reduce conflict for * in state 124 resolved as shift
WARNING: shift/reduce conflict for / in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for = in state 124 resolved as shift
WARNING: shift/reduce conflict for > in state 124 resolved as shift
WARNING: shift/reduce conflict for < in state 124 resolved as shift
WARNING: shift/reduce conflict for GE in state 124 resolved as shift
WARNING: shift/reduce conflict for LE in state 124 resolved as shift
WARNING: shift/reduce conflict for NEQS in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for NAND in state 124 resolved as shift
WARNING: reduce/reduce conflict in state 60 resolved using rule (dot_expression -> dots ID)
WARNING: rejected rule (expression -> dots ID) in state 60
WARNING: Rule (expression -> dots ID) is never reduced
