Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> letrec ID assign expression lambda expression
Rule 6     expression -> { sequence }
Rule 7     expression_list -> expression , expression_list
Rule 8     expression_list -> expression
Rule 9     expression -> expression and expression
Rule 10    expression -> expression eq expression
Rule 11    expression -> expression = expression
Rule 12    expression -> expression > expression
Rule 13    expression -> expression < expression
Rule 14    expression -> expression ge expression
Rule 15    expression -> expression le expression
Rule 16    expression -> expression neqs expression
Rule 17    expression -> expression or expression
Rule 18    expression -> expression nand expression
Rule 19    expression -> string
Rule 20    expression -> dots ID
Rule 21    expression -> import ID
Rule 22    expression -> - expression
Rule 23    expression -> char
Rule 24    expression -> if expression then expression
Rule 25    sequence -> sequence ; expression
Rule 26    sequence -> expression
Rule 27    expression -> ID assign expression
Rule 28    expression -> expression + expression
Rule 29    expression -> expression - expression
Rule 30    expression -> expression * expression
Rule 31    expression -> expression / expression
Rule 32    expression -> [ expression_list ]
Rule 33    expression -> if expression then expression else expression
Rule 34    expression -> lambda_start lambda expression
Rule 35    expression -> lambda_start expression_list lambda expression
Rule 36    expression -> ID [ NUMBER ]
Rule 37    expression -> not expression
Rule 38    expression -> loop expression do expression
Rule 39    expression -> ( expression_list )
Rule 40    expression -> NUMBER
Rule 41    expression -> BOOL
Rule 42    expression -> ( expression )
Rule 43    expression -> for expression ; expression ; expression do expression
Rule 44    expression -> ID ( )
Rule 45    expression -> ID ( expression_list )
Rule 46    expression -> while expression do expression
Rule 47    expression -> struct { sequence }
Rule 48    expression -> extend ID { sequence }
Rule 49    dots -> .
Rule 50    dots -> . dots
Rule 51    dot_expression -> ID dots ID
Rule 52    expression -> dot_expression
Rule 53    expression -> dot_expression ( )
Rule 54    expression -> dot_expression ( expression_list )

Terminals, with rules where they appear

(                    : 39 42 44 45 53 54
)                    : 39 42 44 45 53 54
*                    : 30
+                    : 28
,                    : 7
-                    : 22 29
.                    : 49 50
/                    : 31
;                    : 25 43 43
<                    : 13
=                    : 11
>                    : 12
BOOL                 : 41
ID                   : 2 3 4 4 5 20 21 27 36 44 45 48 51 51
NUMBER               : 36 40
[                    : 32 36
]                    : 32 36
and                  : 9
as                   : 4
assign               : 2 5 27
char                 : 23
do                   : 38 43 46
else                 : 33
eq                   : 10
error                : 
extend               : 48
float                : 1
for                  : 43
ge                   : 14
if                   : 24 33
import               : 4 21
in                   : 2
lambda               : 5 34 35
lambda_start         : 34 35
le                   : 15
letrec               : 5
local                : 2
loop                 : 38
nand                 : 18
neqs                 : 16
not                  : 37
or                   : 17
string               : 19
struct               : 47
then                 : 24 33
while                : 46
{                    : 6 47 48
}                    : 6 47 48

Nonterminals, with rules where they appear

dot_expression       : 52 53 54
dots                 : 20 50 51
expression           : 2 2 5 5 7 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 22 24 24 25 26 27 28 28 29 29 30 30 31 31 33 33 33 34 35 37 38 38 42 43 43 43 43 46 46 0
expression_list      : 7 32 35 39 45 54
sequence             : 6 25 47 48

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 1
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 1

    (0) S' -> expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    ,               reduce using rule 1 (expression -> float .)
    ]               reduce using rule 1 (expression -> float .)
    lambda          reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 40


state 4

    (3) expression -> ID .
    (27) expression -> ID . assign expression
    (36) expression -> ID . [ NUMBER ]
    (44) expression -> ID . ( )
    (45) expression -> ID . ( expression_list )
    (51) dot_expression -> ID . dots ID
    (49) dots -> . .
    (50) dots -> . . dots

    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    ,               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    lambda          reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    assign          shift and go to state 41
    [               shift and go to state 42
    (               shift and go to state 43
    .               shift and go to state 25

    dots                           shift and go to state 44

state 5

    (4) expression -> import . ID as ID
    (21) expression -> import . ID

    ID              shift and go to state 45


state 6

    (5) expression -> letrec . ID assign expression lambda expression

    ID              shift and go to state 46


state 7

    (6) expression -> { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    sequence                       shift and go to state 47
    expression                     shift and go to state 48
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 8

    (19) expression -> string .

    and             reduce using rule 19 (expression -> string .)
    eq              reduce using rule 19 (expression -> string .)
    =               reduce using rule 19 (expression -> string .)
    >               reduce using rule 19 (expression -> string .)
    <               reduce using rule 19 (expression -> string .)
    ge              reduce using rule 19 (expression -> string .)
    le              reduce using rule 19 (expression -> string .)
    neqs            reduce using rule 19 (expression -> string .)
    or              reduce using rule 19 (expression -> string .)
    nand            reduce using rule 19 (expression -> string .)
    +               reduce using rule 19 (expression -> string .)
    -               reduce using rule 19 (expression -> string .)
    *               reduce using rule 19 (expression -> string .)
    /               reduce using rule 19 (expression -> string .)
    $end            reduce using rule 19 (expression -> string .)
    }               reduce using rule 19 (expression -> string .)
    ;               reduce using rule 19 (expression -> string .)
    then            reduce using rule 19 (expression -> string .)
    ,               reduce using rule 19 (expression -> string .)
    ]               reduce using rule 19 (expression -> string .)
    lambda          reduce using rule 19 (expression -> string .)
    do              reduce using rule 19 (expression -> string .)
    )               reduce using rule 19 (expression -> string .)
    in              reduce using rule 19 (expression -> string .)
    else            reduce using rule 19 (expression -> string .)


state 9

    (20) expression -> dots . ID

    ID              shift and go to state 49


state 10

    (22) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 50
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 11

    (23) expression -> char .

    and             reduce using rule 23 (expression -> char .)
    eq              reduce using rule 23 (expression -> char .)
    =               reduce using rule 23 (expression -> char .)
    >               reduce using rule 23 (expression -> char .)
    <               reduce using rule 23 (expression -> char .)
    ge              reduce using rule 23 (expression -> char .)
    le              reduce using rule 23 (expression -> char .)
    neqs            reduce using rule 23 (expression -> char .)
    or              reduce using rule 23 (expression -> char .)
    nand            reduce using rule 23 (expression -> char .)
    +               reduce using rule 23 (expression -> char .)
    -               reduce using rule 23 (expression -> char .)
    *               reduce using rule 23 (expression -> char .)
    /               reduce using rule 23 (expression -> char .)
    $end            reduce using rule 23 (expression -> char .)
    }               reduce using rule 23 (expression -> char .)
    ;               reduce using rule 23 (expression -> char .)
    then            reduce using rule 23 (expression -> char .)
    ,               reduce using rule 23 (expression -> char .)
    ]               reduce using rule 23 (expression -> char .)
    lambda          reduce using rule 23 (expression -> char .)
    do              reduce using rule 23 (expression -> char .)
    )               reduce using rule 23 (expression -> char .)
    in              reduce using rule 23 (expression -> char .)
    else            reduce using rule 23 (expression -> char .)


state 12

    (24) expression -> if . expression then expression
    (33) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 51
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 13

    (32) expression -> [ . expression_list ]
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression_list                shift and go to state 52
    expression                     shift and go to state 53
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 14

    (34) expression -> lambda_start . lambda expression
    (35) expression -> lambda_start . expression_list lambda expression
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    lambda          shift and go to state 54
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 53
    expression_list                shift and go to state 55
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 15

    (40) expression -> NUMBER .

    and             reduce using rule 40 (expression -> NUMBER .)
    eq              reduce using rule 40 (expression -> NUMBER .)
    =               reduce using rule 40 (expression -> NUMBER .)
    >               reduce using rule 40 (expression -> NUMBER .)
    <               reduce using rule 40 (expression -> NUMBER .)
    ge              reduce using rule 40 (expression -> NUMBER .)
    le              reduce using rule 40 (expression -> NUMBER .)
    neqs            reduce using rule 40 (expression -> NUMBER .)
    or              reduce using rule 40 (expression -> NUMBER .)
    nand            reduce using rule 40 (expression -> NUMBER .)
    +               reduce using rule 40 (expression -> NUMBER .)
    -               reduce using rule 40 (expression -> NUMBER .)
    *               reduce using rule 40 (expression -> NUMBER .)
    /               reduce using rule 40 (expression -> NUMBER .)
    $end            reduce using rule 40 (expression -> NUMBER .)
    }               reduce using rule 40 (expression -> NUMBER .)
    ;               reduce using rule 40 (expression -> NUMBER .)
    then            reduce using rule 40 (expression -> NUMBER .)
    ,               reduce using rule 40 (expression -> NUMBER .)
    ]               reduce using rule 40 (expression -> NUMBER .)
    lambda          reduce using rule 40 (expression -> NUMBER .)
    do              reduce using rule 40 (expression -> NUMBER .)
    )               reduce using rule 40 (expression -> NUMBER .)
    in              reduce using rule 40 (expression -> NUMBER .)
    else            reduce using rule 40 (expression -> NUMBER .)


state 16

    (37) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 56
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 17

    (38) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 57
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 18

    (39) expression -> ( . expression_list )
    (42) expression -> ( . expression )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression_list                shift and go to state 58
    expression                     shift and go to state 59
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 19

    (41) expression -> BOOL .

    and             reduce using rule 41 (expression -> BOOL .)
    eq              reduce using rule 41 (expression -> BOOL .)
    =               reduce using rule 41 (expression -> BOOL .)
    >               reduce using rule 41 (expression -> BOOL .)
    <               reduce using rule 41 (expression -> BOOL .)
    ge              reduce using rule 41 (expression -> BOOL .)
    le              reduce using rule 41 (expression -> BOOL .)
    neqs            reduce using rule 41 (expression -> BOOL .)
    or              reduce using rule 41 (expression -> BOOL .)
    nand            reduce using rule 41 (expression -> BOOL .)
    +               reduce using rule 41 (expression -> BOOL .)
    -               reduce using rule 41 (expression -> BOOL .)
    *               reduce using rule 41 (expression -> BOOL .)
    /               reduce using rule 41 (expression -> BOOL .)
    $end            reduce using rule 41 (expression -> BOOL .)
    }               reduce using rule 41 (expression -> BOOL .)
    ;               reduce using rule 41 (expression -> BOOL .)
    then            reduce using rule 41 (expression -> BOOL .)
    ,               reduce using rule 41 (expression -> BOOL .)
    ]               reduce using rule 41 (expression -> BOOL .)
    lambda          reduce using rule 41 (expression -> BOOL .)
    do              reduce using rule 41 (expression -> BOOL .)
    )               reduce using rule 41 (expression -> BOOL .)
    in              reduce using rule 41 (expression -> BOOL .)
    else            reduce using rule 41 (expression -> BOOL .)


state 20

    (43) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 60
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 21

    (46) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 61
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 22

    (47) expression -> struct . { sequence }

    {               shift and go to state 62


state 23

    (48) expression -> extend . ID { sequence }

    ID              shift and go to state 63


state 24

    (52) expression -> dot_expression .
    (53) expression -> dot_expression . ( )
    (54) expression -> dot_expression . ( expression_list )

    and             reduce using rule 52 (expression -> dot_expression .)
    eq              reduce using rule 52 (expression -> dot_expression .)
    =               reduce using rule 52 (expression -> dot_expression .)
    >               reduce using rule 52 (expression -> dot_expression .)
    <               reduce using rule 52 (expression -> dot_expression .)
    ge              reduce using rule 52 (expression -> dot_expression .)
    le              reduce using rule 52 (expression -> dot_expression .)
    neqs            reduce using rule 52 (expression -> dot_expression .)
    or              reduce using rule 52 (expression -> dot_expression .)
    nand            reduce using rule 52 (expression -> dot_expression .)
    +               reduce using rule 52 (expression -> dot_expression .)
    -               reduce using rule 52 (expression -> dot_expression .)
    *               reduce using rule 52 (expression -> dot_expression .)
    /               reduce using rule 52 (expression -> dot_expression .)
    $end            reduce using rule 52 (expression -> dot_expression .)
    }               reduce using rule 52 (expression -> dot_expression .)
    ;               reduce using rule 52 (expression -> dot_expression .)
    then            reduce using rule 52 (expression -> dot_expression .)
    ,               reduce using rule 52 (expression -> dot_expression .)
    ]               reduce using rule 52 (expression -> dot_expression .)
    lambda          reduce using rule 52 (expression -> dot_expression .)
    do              reduce using rule 52 (expression -> dot_expression .)
    )               reduce using rule 52 (expression -> dot_expression .)
    in              reduce using rule 52 (expression -> dot_expression .)
    else            reduce using rule 52 (expression -> dot_expression .)
    (               shift and go to state 64


state 25

    (49) dots -> . .
    (50) dots -> . . dots
    (49) dots -> . .
    (50) dots -> . . dots

    ID              reduce using rule 49 (dots -> . .)
    .               shift and go to state 25

    dots                           shift and go to state 65

state 26

    (9) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 66
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 27

    (10) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 67
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 28

    (11) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 68
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 29

    (12) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 69
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 30

    (13) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 70
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 31

    (14) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 71
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 32

    (15) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 72
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 33

    (16) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 73
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 34

    (17) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 74
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 35

    (18) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 75
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 36

    (28) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 76
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 37

    (29) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 77
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 38

    (30) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 78
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 39

    (31) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 79
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 40

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 80


state 41

    (27) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 81
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 42

    (36) expression -> ID [ . NUMBER ]

    NUMBER          shift and go to state 82


state 43

    (44) expression -> ID ( . )
    (45) expression -> ID ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    )               shift and go to state 83
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression_list                shift and go to state 84
    expression                     shift and go to state 53
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 44

    (51) dot_expression -> ID dots . ID

    ID              shift and go to state 85


state 45

    (4) expression -> import ID . as ID
    (21) expression -> import ID .

    as              shift and go to state 86
    and             reduce using rule 21 (expression -> import ID .)
    eq              reduce using rule 21 (expression -> import ID .)
    =               reduce using rule 21 (expression -> import ID .)
    >               reduce using rule 21 (expression -> import ID .)
    <               reduce using rule 21 (expression -> import ID .)
    ge              reduce using rule 21 (expression -> import ID .)
    le              reduce using rule 21 (expression -> import ID .)
    neqs            reduce using rule 21 (expression -> import ID .)
    or              reduce using rule 21 (expression -> import ID .)
    nand            reduce using rule 21 (expression -> import ID .)
    +               reduce using rule 21 (expression -> import ID .)
    -               reduce using rule 21 (expression -> import ID .)
    *               reduce using rule 21 (expression -> import ID .)
    /               reduce using rule 21 (expression -> import ID .)
    $end            reduce using rule 21 (expression -> import ID .)
    }               reduce using rule 21 (expression -> import ID .)
    ;               reduce using rule 21 (expression -> import ID .)
    then            reduce using rule 21 (expression -> import ID .)
    ,               reduce using rule 21 (expression -> import ID .)
    ]               reduce using rule 21 (expression -> import ID .)
    lambda          reduce using rule 21 (expression -> import ID .)
    do              reduce using rule 21 (expression -> import ID .)
    )               reduce using rule 21 (expression -> import ID .)
    in              reduce using rule 21 (expression -> import ID .)
    else            reduce using rule 21 (expression -> import ID .)


state 46

    (5) expression -> letrec ID . assign expression lambda expression

    assign          shift and go to state 87


state 47

    (6) expression -> { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 88
    ;               shift and go to state 89


state 48

    (26) sequence -> expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    }               reduce using rule 26 (sequence -> expression .)
    ;               reduce using rule 26 (sequence -> expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 49

    (20) expression -> dots ID .

    and             reduce using rule 20 (expression -> dots ID .)
    eq              reduce using rule 20 (expression -> dots ID .)
    =               reduce using rule 20 (expression -> dots ID .)
    >               reduce using rule 20 (expression -> dots ID .)
    <               reduce using rule 20 (expression -> dots ID .)
    ge              reduce using rule 20 (expression -> dots ID .)
    le              reduce using rule 20 (expression -> dots ID .)
    neqs            reduce using rule 20 (expression -> dots ID .)
    or              reduce using rule 20 (expression -> dots ID .)
    nand            reduce using rule 20 (expression -> dots ID .)
    +               reduce using rule 20 (expression -> dots ID .)
    -               reduce using rule 20 (expression -> dots ID .)
    *               reduce using rule 20 (expression -> dots ID .)
    /               reduce using rule 20 (expression -> dots ID .)
    $end            reduce using rule 20 (expression -> dots ID .)
    }               reduce using rule 20 (expression -> dots ID .)
    ;               reduce using rule 20 (expression -> dots ID .)
    then            reduce using rule 20 (expression -> dots ID .)
    ,               reduce using rule 20 (expression -> dots ID .)
    ]               reduce using rule 20 (expression -> dots ID .)
    lambda          reduce using rule 20 (expression -> dots ID .)
    do              reduce using rule 20 (expression -> dots ID .)
    )               reduce using rule 20 (expression -> dots ID .)
    in              reduce using rule 20 (expression -> dots ID .)
    else            reduce using rule 20 (expression -> dots ID .)


state 50

    (22) expression -> - expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 22 (expression -> - expression .)
    eq              reduce using rule 22 (expression -> - expression .)
    =               reduce using rule 22 (expression -> - expression .)
    >               reduce using rule 22 (expression -> - expression .)
    <               reduce using rule 22 (expression -> - expression .)
    ge              reduce using rule 22 (expression -> - expression .)
    le              reduce using rule 22 (expression -> - expression .)
    neqs            reduce using rule 22 (expression -> - expression .)
    or              reduce using rule 22 (expression -> - expression .)
    nand            reduce using rule 22 (expression -> - expression .)
    +               reduce using rule 22 (expression -> - expression .)
    -               reduce using rule 22 (expression -> - expression .)
    *               reduce using rule 22 (expression -> - expression .)
    /               reduce using rule 22 (expression -> - expression .)
    $end            reduce using rule 22 (expression -> - expression .)
    }               reduce using rule 22 (expression -> - expression .)
    ;               reduce using rule 22 (expression -> - expression .)
    then            reduce using rule 22 (expression -> - expression .)
    ,               reduce using rule 22 (expression -> - expression .)
    ]               reduce using rule 22 (expression -> - expression .)
    lambda          reduce using rule 22 (expression -> - expression .)
    do              reduce using rule 22 (expression -> - expression .)
    )               reduce using rule 22 (expression -> - expression .)
    in              reduce using rule 22 (expression -> - expression .)
    else            reduce using rule 22 (expression -> - expression .)

  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]


state 51

    (24) expression -> if expression . then expression
    (33) expression -> if expression . then expression else expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    then            shift and go to state 90
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 52

    (32) expression -> [ expression_list . ]

    ]               shift and go to state 91


state 53

    (7) expression_list -> expression . , expression_list
    (8) expression_list -> expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ,               shift and go to state 92
    ]               reduce using rule 8 (expression_list -> expression .)
    lambda          reduce using rule 8 (expression_list -> expression .)
    )               reduce using rule 8 (expression_list -> expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 54

    (34) expression -> lambda_start lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 93
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 55

    (35) expression -> lambda_start expression_list . lambda expression

    lambda          shift and go to state 94


state 56

    (37) expression -> not expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 37 (expression -> not expression .)
    eq              reduce using rule 37 (expression -> not expression .)
    =               reduce using rule 37 (expression -> not expression .)
    >               reduce using rule 37 (expression -> not expression .)
    <               reduce using rule 37 (expression -> not expression .)
    ge              reduce using rule 37 (expression -> not expression .)
    le              reduce using rule 37 (expression -> not expression .)
    neqs            reduce using rule 37 (expression -> not expression .)
    or              reduce using rule 37 (expression -> not expression .)
    nand            reduce using rule 37 (expression -> not expression .)
    +               reduce using rule 37 (expression -> not expression .)
    -               reduce using rule 37 (expression -> not expression .)
    *               reduce using rule 37 (expression -> not expression .)
    /               reduce using rule 37 (expression -> not expression .)
    $end            reduce using rule 37 (expression -> not expression .)
    }               reduce using rule 37 (expression -> not expression .)
    ;               reduce using rule 37 (expression -> not expression .)
    then            reduce using rule 37 (expression -> not expression .)
    ,               reduce using rule 37 (expression -> not expression .)
    ]               reduce using rule 37 (expression -> not expression .)
    lambda          reduce using rule 37 (expression -> not expression .)
    do              reduce using rule 37 (expression -> not expression .)
    )               reduce using rule 37 (expression -> not expression .)
    in              reduce using rule 37 (expression -> not expression .)
    else            reduce using rule 37 (expression -> not expression .)

  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]


state 57

    (38) expression -> loop expression . do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 95
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 58

    (39) expression -> ( expression_list . )

    )               shift and go to state 96


state 59

    (42) expression -> ( expression . )
    (7) expression_list -> expression . , expression_list
    (8) expression_list -> expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 97
    ,               shift and go to state 92
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! )               [ reduce using rule 8 (expression_list -> expression .) ]


state 60

    (43) expression -> for expression . ; expression ; expression do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ;               shift and go to state 98
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 61

    (46) expression -> while expression . do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 99
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 62

    (47) expression -> struct { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    sequence                       shift and go to state 100
    expression                     shift and go to state 48
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 63

    (48) expression -> extend ID . { sequence }

    {               shift and go to state 101


state 64

    (53) expression -> dot_expression ( . )
    (54) expression -> dot_expression ( . expression_list )
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    )               shift and go to state 102
    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    dot_expression                 shift and go to state 24
    expression_list                shift and go to state 103
    expression                     shift and go to state 53
    dots                           shift and go to state 9

state 65

    (50) dots -> . dots .

    ID              reduce using rule 50 (dots -> . dots .)


state 66

    (9) expression -> expression and expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression and expression .)
    or              reduce using rule 9 (expression -> expression and expression .)
    nand            reduce using rule 9 (expression -> expression and expression .)
    $end            reduce using rule 9 (expression -> expression and expression .)
    }               reduce using rule 9 (expression -> expression and expression .)
    ;               reduce using rule 9 (expression -> expression and expression .)
    then            reduce using rule 9 (expression -> expression and expression .)
    ,               reduce using rule 9 (expression -> expression and expression .)
    ]               reduce using rule 9 (expression -> expression and expression .)
    lambda          reduce using rule 9 (expression -> expression and expression .)
    do              reduce using rule 9 (expression -> expression and expression .)
    )               reduce using rule 9 (expression -> expression and expression .)
    in              reduce using rule 9 (expression -> expression and expression .)
    else            reduce using rule 9 (expression -> expression and expression .)
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! eq              [ reduce using rule 9 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 9 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 9 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 9 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 26 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 67

    (10) expression -> expression eq expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression eq expression .)
    eq              reduce using rule 10 (expression -> expression eq expression .)
    =               reduce using rule 10 (expression -> expression eq expression .)
    neqs            reduce using rule 10 (expression -> expression eq expression .)
    or              reduce using rule 10 (expression -> expression eq expression .)
    nand            reduce using rule 10 (expression -> expression eq expression .)
    $end            reduce using rule 10 (expression -> expression eq expression .)
    }               reduce using rule 10 (expression -> expression eq expression .)
    ;               reduce using rule 10 (expression -> expression eq expression .)
    then            reduce using rule 10 (expression -> expression eq expression .)
    ,               reduce using rule 10 (expression -> expression eq expression .)
    ]               reduce using rule 10 (expression -> expression eq expression .)
    lambda          reduce using rule 10 (expression -> expression eq expression .)
    do              reduce using rule 10 (expression -> expression eq expression .)
    )               reduce using rule 10 (expression -> expression eq expression .)
    in              reduce using rule 10 (expression -> expression eq expression .)
    else            reduce using rule 10 (expression -> expression eq expression .)
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! >               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 68

    (11) expression -> expression = expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression = expression .)
    eq              reduce using rule 11 (expression -> expression = expression .)
    =               reduce using rule 11 (expression -> expression = expression .)
    neqs            reduce using rule 11 (expression -> expression = expression .)
    or              reduce using rule 11 (expression -> expression = expression .)
    nand            reduce using rule 11 (expression -> expression = expression .)
    $end            reduce using rule 11 (expression -> expression = expression .)
    }               reduce using rule 11 (expression -> expression = expression .)
    ;               reduce using rule 11 (expression -> expression = expression .)
    then            reduce using rule 11 (expression -> expression = expression .)
    ,               reduce using rule 11 (expression -> expression = expression .)
    ]               reduce using rule 11 (expression -> expression = expression .)
    lambda          reduce using rule 11 (expression -> expression = expression .)
    do              reduce using rule 11 (expression -> expression = expression .)
    )               reduce using rule 11 (expression -> expression = expression .)
    in              reduce using rule 11 (expression -> expression = expression .)
    else            reduce using rule 11 (expression -> expression = expression .)
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! >               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 11 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 11 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 69

    (12) expression -> expression > expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression > expression .)
    eq              reduce using rule 12 (expression -> expression > expression .)
    =               reduce using rule 12 (expression -> expression > expression .)
    >               reduce using rule 12 (expression -> expression > expression .)
    <               reduce using rule 12 (expression -> expression > expression .)
    ge              reduce using rule 12 (expression -> expression > expression .)
    le              reduce using rule 12 (expression -> expression > expression .)
    neqs            reduce using rule 12 (expression -> expression > expression .)
    or              reduce using rule 12 (expression -> expression > expression .)
    nand            reduce using rule 12 (expression -> expression > expression .)
    $end            reduce using rule 12 (expression -> expression > expression .)
    }               reduce using rule 12 (expression -> expression > expression .)
    ;               reduce using rule 12 (expression -> expression > expression .)
    then            reduce using rule 12 (expression -> expression > expression .)
    ,               reduce using rule 12 (expression -> expression > expression .)
    ]               reduce using rule 12 (expression -> expression > expression .)
    lambda          reduce using rule 12 (expression -> expression > expression .)
    do              reduce using rule 12 (expression -> expression > expression .)
    )               reduce using rule 12 (expression -> expression > expression .)
    in              reduce using rule 12 (expression -> expression > expression .)
    else            reduce using rule 12 (expression -> expression > expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! +               [ reduce using rule 12 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 70

    (13) expression -> expression < expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression < expression .)
    eq              reduce using rule 13 (expression -> expression < expression .)
    =               reduce using rule 13 (expression -> expression < expression .)
    >               reduce using rule 13 (expression -> expression < expression .)
    <               reduce using rule 13 (expression -> expression < expression .)
    ge              reduce using rule 13 (expression -> expression < expression .)
    le              reduce using rule 13 (expression -> expression < expression .)
    neqs            reduce using rule 13 (expression -> expression < expression .)
    or              reduce using rule 13 (expression -> expression < expression .)
    nand            reduce using rule 13 (expression -> expression < expression .)
    $end            reduce using rule 13 (expression -> expression < expression .)
    }               reduce using rule 13 (expression -> expression < expression .)
    ;               reduce using rule 13 (expression -> expression < expression .)
    then            reduce using rule 13 (expression -> expression < expression .)
    ,               reduce using rule 13 (expression -> expression < expression .)
    ]               reduce using rule 13 (expression -> expression < expression .)
    lambda          reduce using rule 13 (expression -> expression < expression .)
    do              reduce using rule 13 (expression -> expression < expression .)
    )               reduce using rule 13 (expression -> expression < expression .)
    in              reduce using rule 13 (expression -> expression < expression .)
    else            reduce using rule 13 (expression -> expression < expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! +               [ reduce using rule 13 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 71

    (14) expression -> expression ge expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression ge expression .)
    eq              reduce using rule 14 (expression -> expression ge expression .)
    =               reduce using rule 14 (expression -> expression ge expression .)
    >               reduce using rule 14 (expression -> expression ge expression .)
    <               reduce using rule 14 (expression -> expression ge expression .)
    ge              reduce using rule 14 (expression -> expression ge expression .)
    le              reduce using rule 14 (expression -> expression ge expression .)
    neqs            reduce using rule 14 (expression -> expression ge expression .)
    or              reduce using rule 14 (expression -> expression ge expression .)
    nand            reduce using rule 14 (expression -> expression ge expression .)
    $end            reduce using rule 14 (expression -> expression ge expression .)
    }               reduce using rule 14 (expression -> expression ge expression .)
    ;               reduce using rule 14 (expression -> expression ge expression .)
    then            reduce using rule 14 (expression -> expression ge expression .)
    ,               reduce using rule 14 (expression -> expression ge expression .)
    ]               reduce using rule 14 (expression -> expression ge expression .)
    lambda          reduce using rule 14 (expression -> expression ge expression .)
    do              reduce using rule 14 (expression -> expression ge expression .)
    )               reduce using rule 14 (expression -> expression ge expression .)
    in              reduce using rule 14 (expression -> expression ge expression .)
    else            reduce using rule 14 (expression -> expression ge expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! +               [ reduce using rule 14 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 72

    (15) expression -> expression le expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 15 (expression -> expression le expression .)
    eq              reduce using rule 15 (expression -> expression le expression .)
    =               reduce using rule 15 (expression -> expression le expression .)
    >               reduce using rule 15 (expression -> expression le expression .)
    <               reduce using rule 15 (expression -> expression le expression .)
    ge              reduce using rule 15 (expression -> expression le expression .)
    le              reduce using rule 15 (expression -> expression le expression .)
    neqs            reduce using rule 15 (expression -> expression le expression .)
    or              reduce using rule 15 (expression -> expression le expression .)
    nand            reduce using rule 15 (expression -> expression le expression .)
    $end            reduce using rule 15 (expression -> expression le expression .)
    }               reduce using rule 15 (expression -> expression le expression .)
    ;               reduce using rule 15 (expression -> expression le expression .)
    then            reduce using rule 15 (expression -> expression le expression .)
    ,               reduce using rule 15 (expression -> expression le expression .)
    ]               reduce using rule 15 (expression -> expression le expression .)
    lambda          reduce using rule 15 (expression -> expression le expression .)
    do              reduce using rule 15 (expression -> expression le expression .)
    )               reduce using rule 15 (expression -> expression le expression .)
    in              reduce using rule 15 (expression -> expression le expression .)
    else            reduce using rule 15 (expression -> expression le expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! +               [ reduce using rule 15 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 73

    (16) expression -> expression neqs expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 16 (expression -> expression neqs expression .)
    eq              reduce using rule 16 (expression -> expression neqs expression .)
    =               reduce using rule 16 (expression -> expression neqs expression .)
    neqs            reduce using rule 16 (expression -> expression neqs expression .)
    or              reduce using rule 16 (expression -> expression neqs expression .)
    nand            reduce using rule 16 (expression -> expression neqs expression .)
    $end            reduce using rule 16 (expression -> expression neqs expression .)
    }               reduce using rule 16 (expression -> expression neqs expression .)
    ;               reduce using rule 16 (expression -> expression neqs expression .)
    then            reduce using rule 16 (expression -> expression neqs expression .)
    ,               reduce using rule 16 (expression -> expression neqs expression .)
    ]               reduce using rule 16 (expression -> expression neqs expression .)
    lambda          reduce using rule 16 (expression -> expression neqs expression .)
    do              reduce using rule 16 (expression -> expression neqs expression .)
    )               reduce using rule 16 (expression -> expression neqs expression .)
    in              reduce using rule 16 (expression -> expression neqs expression .)
    else            reduce using rule 16 (expression -> expression neqs expression .)
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! >               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 74

    (17) expression -> expression or expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    or              reduce using rule 17 (expression -> expression or expression .)
    $end            reduce using rule 17 (expression -> expression or expression .)
    }               reduce using rule 17 (expression -> expression or expression .)
    ;               reduce using rule 17 (expression -> expression or expression .)
    then            reduce using rule 17 (expression -> expression or expression .)
    ,               reduce using rule 17 (expression -> expression or expression .)
    ]               reduce using rule 17 (expression -> expression or expression .)
    lambda          reduce using rule 17 (expression -> expression or expression .)
    do              reduce using rule 17 (expression -> expression or expression .)
    )               reduce using rule 17 (expression -> expression or expression .)
    in              reduce using rule 17 (expression -> expression or expression .)
    else            reduce using rule 17 (expression -> expression or expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 17 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 17 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 17 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 17 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 17 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 17 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 34 ]


state 75

    (18) expression -> expression nand expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 18 (expression -> expression nand expression .)
    or              reduce using rule 18 (expression -> expression nand expression .)
    nand            reduce using rule 18 (expression -> expression nand expression .)
    $end            reduce using rule 18 (expression -> expression nand expression .)
    }               reduce using rule 18 (expression -> expression nand expression .)
    ;               reduce using rule 18 (expression -> expression nand expression .)
    then            reduce using rule 18 (expression -> expression nand expression .)
    ,               reduce using rule 18 (expression -> expression nand expression .)
    ]               reduce using rule 18 (expression -> expression nand expression .)
    lambda          reduce using rule 18 (expression -> expression nand expression .)
    do              reduce using rule 18 (expression -> expression nand expression .)
    )               reduce using rule 18 (expression -> expression nand expression .)
    in              reduce using rule 18 (expression -> expression nand expression .)
    else            reduce using rule 18 (expression -> expression nand expression .)
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! eq              [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 18 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 26 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]


state 76

    (28) expression -> expression + expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 28 (expression -> expression + expression .)
    eq              reduce using rule 28 (expression -> expression + expression .)
    =               reduce using rule 28 (expression -> expression + expression .)
    >               reduce using rule 28 (expression -> expression + expression .)
    <               reduce using rule 28 (expression -> expression + expression .)
    ge              reduce using rule 28 (expression -> expression + expression .)
    le              reduce using rule 28 (expression -> expression + expression .)
    neqs            reduce using rule 28 (expression -> expression + expression .)
    or              reduce using rule 28 (expression -> expression + expression .)
    nand            reduce using rule 28 (expression -> expression + expression .)
    +               reduce using rule 28 (expression -> expression + expression .)
    -               reduce using rule 28 (expression -> expression + expression .)
    $end            reduce using rule 28 (expression -> expression + expression .)
    }               reduce using rule 28 (expression -> expression + expression .)
    ;               reduce using rule 28 (expression -> expression + expression .)
    then            reduce using rule 28 (expression -> expression + expression .)
    ,               reduce using rule 28 (expression -> expression + expression .)
    ]               reduce using rule 28 (expression -> expression + expression .)
    lambda          reduce using rule 28 (expression -> expression + expression .)
    do              reduce using rule 28 (expression -> expression + expression .)
    )               reduce using rule 28 (expression -> expression + expression .)
    in              reduce using rule 28 (expression -> expression + expression .)
    else            reduce using rule 28 (expression -> expression + expression .)
    *               shift and go to state 38
    /               shift and go to state 39

  ! *               [ reduce using rule 28 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]


state 77

    (29) expression -> expression - expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 29 (expression -> expression - expression .)
    eq              reduce using rule 29 (expression -> expression - expression .)
    =               reduce using rule 29 (expression -> expression - expression .)
    >               reduce using rule 29 (expression -> expression - expression .)
    <               reduce using rule 29 (expression -> expression - expression .)
    ge              reduce using rule 29 (expression -> expression - expression .)
    le              reduce using rule 29 (expression -> expression - expression .)
    neqs            reduce using rule 29 (expression -> expression - expression .)
    or              reduce using rule 29 (expression -> expression - expression .)
    nand            reduce using rule 29 (expression -> expression - expression .)
    +               reduce using rule 29 (expression -> expression - expression .)
    -               reduce using rule 29 (expression -> expression - expression .)
    $end            reduce using rule 29 (expression -> expression - expression .)
    }               reduce using rule 29 (expression -> expression - expression .)
    ;               reduce using rule 29 (expression -> expression - expression .)
    then            reduce using rule 29 (expression -> expression - expression .)
    ,               reduce using rule 29 (expression -> expression - expression .)
    ]               reduce using rule 29 (expression -> expression - expression .)
    lambda          reduce using rule 29 (expression -> expression - expression .)
    do              reduce using rule 29 (expression -> expression - expression .)
    )               reduce using rule 29 (expression -> expression - expression .)
    in              reduce using rule 29 (expression -> expression - expression .)
    else            reduce using rule 29 (expression -> expression - expression .)
    *               shift and go to state 38
    /               shift and go to state 39

  ! *               [ reduce using rule 29 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]


state 78

    (30) expression -> expression * expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 30 (expression -> expression * expression .)
    eq              reduce using rule 30 (expression -> expression * expression .)
    =               reduce using rule 30 (expression -> expression * expression .)
    >               reduce using rule 30 (expression -> expression * expression .)
    <               reduce using rule 30 (expression -> expression * expression .)
    ge              reduce using rule 30 (expression -> expression * expression .)
    le              reduce using rule 30 (expression -> expression * expression .)
    neqs            reduce using rule 30 (expression -> expression * expression .)
    or              reduce using rule 30 (expression -> expression * expression .)
    nand            reduce using rule 30 (expression -> expression * expression .)
    +               reduce using rule 30 (expression -> expression * expression .)
    -               reduce using rule 30 (expression -> expression * expression .)
    *               reduce using rule 30 (expression -> expression * expression .)
    /               reduce using rule 30 (expression -> expression * expression .)
    $end            reduce using rule 30 (expression -> expression * expression .)
    }               reduce using rule 30 (expression -> expression * expression .)
    ;               reduce using rule 30 (expression -> expression * expression .)
    then            reduce using rule 30 (expression -> expression * expression .)
    ,               reduce using rule 30 (expression -> expression * expression .)
    ]               reduce using rule 30 (expression -> expression * expression .)
    lambda          reduce using rule 30 (expression -> expression * expression .)
    do              reduce using rule 30 (expression -> expression * expression .)
    )               reduce using rule 30 (expression -> expression * expression .)
    in              reduce using rule 30 (expression -> expression * expression .)
    else            reduce using rule 30 (expression -> expression * expression .)

  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]


state 79

    (31) expression -> expression / expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 31 (expression -> expression / expression .)
    eq              reduce using rule 31 (expression -> expression / expression .)
    =               reduce using rule 31 (expression -> expression / expression .)
    >               reduce using rule 31 (expression -> expression / expression .)
    <               reduce using rule 31 (expression -> expression / expression .)
    ge              reduce using rule 31 (expression -> expression / expression .)
    le              reduce using rule 31 (expression -> expression / expression .)
    neqs            reduce using rule 31 (expression -> expression / expression .)
    or              reduce using rule 31 (expression -> expression / expression .)
    nand            reduce using rule 31 (expression -> expression / expression .)
    +               reduce using rule 31 (expression -> expression / expression .)
    -               reduce using rule 31 (expression -> expression / expression .)
    *               reduce using rule 31 (expression -> expression / expression .)
    /               reduce using rule 31 (expression -> expression / expression .)
    $end            reduce using rule 31 (expression -> expression / expression .)
    }               reduce using rule 31 (expression -> expression / expression .)
    ;               reduce using rule 31 (expression -> expression / expression .)
    then            reduce using rule 31 (expression -> expression / expression .)
    ,               reduce using rule 31 (expression -> expression / expression .)
    ]               reduce using rule 31 (expression -> expression / expression .)
    lambda          reduce using rule 31 (expression -> expression / expression .)
    do              reduce using rule 31 (expression -> expression / expression .)
    )               reduce using rule 31 (expression -> expression / expression .)
    in              reduce using rule 31 (expression -> expression / expression .)
    else            reduce using rule 31 (expression -> expression / expression .)

  ! and             [ shift and go to state 26 ]
  ! eq              [ shift and go to state 27 ]
  ! =               [ shift and go to state 28 ]
  ! >               [ shift and go to state 29 ]
  ! <               [ shift and go to state 30 ]
  ! ge              [ shift and go to state 31 ]
  ! le              [ shift and go to state 32 ]
  ! neqs            [ shift and go to state 33 ]
  ! or              [ shift and go to state 34 ]
  ! nand            [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]


state 80

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 104
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 81

    (27) expression -> ID assign expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 27 (expression -> ID assign expression .)
    }               reduce using rule 27 (expression -> ID assign expression .)
    ;               reduce using rule 27 (expression -> ID assign expression .)
    then            reduce using rule 27 (expression -> ID assign expression .)
    ,               reduce using rule 27 (expression -> ID assign expression .)
    ]               reduce using rule 27 (expression -> ID assign expression .)
    lambda          reduce using rule 27 (expression -> ID assign expression .)
    do              reduce using rule 27 (expression -> ID assign expression .)
    )               reduce using rule 27 (expression -> ID assign expression .)
    in              reduce using rule 27 (expression -> ID assign expression .)
    else            reduce using rule 27 (expression -> ID assign expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 27 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 27 (expression -> ID assign expression .) ]


state 82

    (36) expression -> ID [ NUMBER . ]

    ]               shift and go to state 105


state 83

    (44) expression -> ID ( ) .

    and             reduce using rule 44 (expression -> ID ( ) .)
    eq              reduce using rule 44 (expression -> ID ( ) .)
    =               reduce using rule 44 (expression -> ID ( ) .)
    >               reduce using rule 44 (expression -> ID ( ) .)
    <               reduce using rule 44 (expression -> ID ( ) .)
    ge              reduce using rule 44 (expression -> ID ( ) .)
    le              reduce using rule 44 (expression -> ID ( ) .)
    neqs            reduce using rule 44 (expression -> ID ( ) .)
    or              reduce using rule 44 (expression -> ID ( ) .)
    nand            reduce using rule 44 (expression -> ID ( ) .)
    +               reduce using rule 44 (expression -> ID ( ) .)
    -               reduce using rule 44 (expression -> ID ( ) .)
    *               reduce using rule 44 (expression -> ID ( ) .)
    /               reduce using rule 44 (expression -> ID ( ) .)
    $end            reduce using rule 44 (expression -> ID ( ) .)
    }               reduce using rule 44 (expression -> ID ( ) .)
    ;               reduce using rule 44 (expression -> ID ( ) .)
    then            reduce using rule 44 (expression -> ID ( ) .)
    ,               reduce using rule 44 (expression -> ID ( ) .)
    ]               reduce using rule 44 (expression -> ID ( ) .)
    lambda          reduce using rule 44 (expression -> ID ( ) .)
    do              reduce using rule 44 (expression -> ID ( ) .)
    )               reduce using rule 44 (expression -> ID ( ) .)
    in              reduce using rule 44 (expression -> ID ( ) .)
    else            reduce using rule 44 (expression -> ID ( ) .)


state 84

    (45) expression -> ID ( expression_list . )

    )               shift and go to state 106


state 85

    (51) dot_expression -> ID dots ID .

    (               reduce using rule 51 (dot_expression -> ID dots ID .)
    and             reduce using rule 51 (dot_expression -> ID dots ID .)
    eq              reduce using rule 51 (dot_expression -> ID dots ID .)
    =               reduce using rule 51 (dot_expression -> ID dots ID .)
    >               reduce using rule 51 (dot_expression -> ID dots ID .)
    <               reduce using rule 51 (dot_expression -> ID dots ID .)
    ge              reduce using rule 51 (dot_expression -> ID dots ID .)
    le              reduce using rule 51 (dot_expression -> ID dots ID .)
    neqs            reduce using rule 51 (dot_expression -> ID dots ID .)
    or              reduce using rule 51 (dot_expression -> ID dots ID .)
    nand            reduce using rule 51 (dot_expression -> ID dots ID .)
    +               reduce using rule 51 (dot_expression -> ID dots ID .)
    -               reduce using rule 51 (dot_expression -> ID dots ID .)
    *               reduce using rule 51 (dot_expression -> ID dots ID .)
    /               reduce using rule 51 (dot_expression -> ID dots ID .)
    $end            reduce using rule 51 (dot_expression -> ID dots ID .)
    }               reduce using rule 51 (dot_expression -> ID dots ID .)
    ;               reduce using rule 51 (dot_expression -> ID dots ID .)
    then            reduce using rule 51 (dot_expression -> ID dots ID .)
    ,               reduce using rule 51 (dot_expression -> ID dots ID .)
    ]               reduce using rule 51 (dot_expression -> ID dots ID .)
    lambda          reduce using rule 51 (dot_expression -> ID dots ID .)
    do              reduce using rule 51 (dot_expression -> ID dots ID .)
    )               reduce using rule 51 (dot_expression -> ID dots ID .)
    in              reduce using rule 51 (dot_expression -> ID dots ID .)
    else            reduce using rule 51 (dot_expression -> ID dots ID .)


state 86

    (4) expression -> import ID as . ID

    ID              shift and go to state 107


state 87

    (5) expression -> letrec ID assign . expression lambda expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 108
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 88

    (6) expression -> { sequence } .

    and             reduce using rule 6 (expression -> { sequence } .)
    eq              reduce using rule 6 (expression -> { sequence } .)
    =               reduce using rule 6 (expression -> { sequence } .)
    >               reduce using rule 6 (expression -> { sequence } .)
    <               reduce using rule 6 (expression -> { sequence } .)
    ge              reduce using rule 6 (expression -> { sequence } .)
    le              reduce using rule 6 (expression -> { sequence } .)
    neqs            reduce using rule 6 (expression -> { sequence } .)
    or              reduce using rule 6 (expression -> { sequence } .)
    nand            reduce using rule 6 (expression -> { sequence } .)
    +               reduce using rule 6 (expression -> { sequence } .)
    -               reduce using rule 6 (expression -> { sequence } .)
    *               reduce using rule 6 (expression -> { sequence } .)
    /               reduce using rule 6 (expression -> { sequence } .)
    $end            reduce using rule 6 (expression -> { sequence } .)
    }               reduce using rule 6 (expression -> { sequence } .)
    ;               reduce using rule 6 (expression -> { sequence } .)
    then            reduce using rule 6 (expression -> { sequence } .)
    ,               reduce using rule 6 (expression -> { sequence } .)
    ]               reduce using rule 6 (expression -> { sequence } .)
    lambda          reduce using rule 6 (expression -> { sequence } .)
    do              reduce using rule 6 (expression -> { sequence } .)
    )               reduce using rule 6 (expression -> { sequence } .)
    in              reduce using rule 6 (expression -> { sequence } .)
    else            reduce using rule 6 (expression -> { sequence } .)


state 89

    (25) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 109
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 90

    (24) expression -> if expression then . expression
    (33) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 110
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 91

    (32) expression -> [ expression_list ] .

    and             reduce using rule 32 (expression -> [ expression_list ] .)
    eq              reduce using rule 32 (expression -> [ expression_list ] .)
    =               reduce using rule 32 (expression -> [ expression_list ] .)
    >               reduce using rule 32 (expression -> [ expression_list ] .)
    <               reduce using rule 32 (expression -> [ expression_list ] .)
    ge              reduce using rule 32 (expression -> [ expression_list ] .)
    le              reduce using rule 32 (expression -> [ expression_list ] .)
    neqs            reduce using rule 32 (expression -> [ expression_list ] .)
    or              reduce using rule 32 (expression -> [ expression_list ] .)
    nand            reduce using rule 32 (expression -> [ expression_list ] .)
    +               reduce using rule 32 (expression -> [ expression_list ] .)
    -               reduce using rule 32 (expression -> [ expression_list ] .)
    *               reduce using rule 32 (expression -> [ expression_list ] .)
    /               reduce using rule 32 (expression -> [ expression_list ] .)
    $end            reduce using rule 32 (expression -> [ expression_list ] .)
    }               reduce using rule 32 (expression -> [ expression_list ] .)
    ;               reduce using rule 32 (expression -> [ expression_list ] .)
    then            reduce using rule 32 (expression -> [ expression_list ] .)
    ,               reduce using rule 32 (expression -> [ expression_list ] .)
    ]               reduce using rule 32 (expression -> [ expression_list ] .)
    lambda          reduce using rule 32 (expression -> [ expression_list ] .)
    do              reduce using rule 32 (expression -> [ expression_list ] .)
    )               reduce using rule 32 (expression -> [ expression_list ] .)
    in              reduce using rule 32 (expression -> [ expression_list ] .)
    else            reduce using rule 32 (expression -> [ expression_list ] .)


state 92

    (7) expression_list -> expression , . expression_list
    (7) expression_list -> . expression , expression_list
    (8) expression_list -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 53
    expression_list                shift and go to state 111
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 93

    (34) expression -> lambda_start lambda expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 34 (expression -> lambda_start lambda expression .)
    }               reduce using rule 34 (expression -> lambda_start lambda expression .)
    ;               reduce using rule 34 (expression -> lambda_start lambda expression .)
    then            reduce using rule 34 (expression -> lambda_start lambda expression .)
    ,               reduce using rule 34 (expression -> lambda_start lambda expression .)
    ]               reduce using rule 34 (expression -> lambda_start lambda expression .)
    lambda          reduce using rule 34 (expression -> lambda_start lambda expression .)
    do              reduce using rule 34 (expression -> lambda_start lambda expression .)
    )               reduce using rule 34 (expression -> lambda_start lambda expression .)
    in              reduce using rule 34 (expression -> lambda_start lambda expression .)
    else            reduce using rule 34 (expression -> lambda_start lambda expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! eq              [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! =               [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! >               [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! <               [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! ge              [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! le              [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! neqs            [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! or              [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! nand            [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! +               [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! -               [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! *               [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]
  ! /               [ reduce using rule 34 (expression -> lambda_start lambda expression .) ]


state 94

    (35) expression -> lambda_start expression_list lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 112
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 95

    (38) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 113
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 96

    (39) expression -> ( expression_list ) .

    and             reduce using rule 39 (expression -> ( expression_list ) .)
    eq              reduce using rule 39 (expression -> ( expression_list ) .)
    =               reduce using rule 39 (expression -> ( expression_list ) .)
    >               reduce using rule 39 (expression -> ( expression_list ) .)
    <               reduce using rule 39 (expression -> ( expression_list ) .)
    ge              reduce using rule 39 (expression -> ( expression_list ) .)
    le              reduce using rule 39 (expression -> ( expression_list ) .)
    neqs            reduce using rule 39 (expression -> ( expression_list ) .)
    or              reduce using rule 39 (expression -> ( expression_list ) .)
    nand            reduce using rule 39 (expression -> ( expression_list ) .)
    +               reduce using rule 39 (expression -> ( expression_list ) .)
    -               reduce using rule 39 (expression -> ( expression_list ) .)
    *               reduce using rule 39 (expression -> ( expression_list ) .)
    /               reduce using rule 39 (expression -> ( expression_list ) .)
    $end            reduce using rule 39 (expression -> ( expression_list ) .)
    }               reduce using rule 39 (expression -> ( expression_list ) .)
    ;               reduce using rule 39 (expression -> ( expression_list ) .)
    then            reduce using rule 39 (expression -> ( expression_list ) .)
    ,               reduce using rule 39 (expression -> ( expression_list ) .)
    ]               reduce using rule 39 (expression -> ( expression_list ) .)
    lambda          reduce using rule 39 (expression -> ( expression_list ) .)
    do              reduce using rule 39 (expression -> ( expression_list ) .)
    )               reduce using rule 39 (expression -> ( expression_list ) .)
    in              reduce using rule 39 (expression -> ( expression_list ) .)
    else            reduce using rule 39 (expression -> ( expression_list ) .)


state 97

    (42) expression -> ( expression ) .

    and             reduce using rule 42 (expression -> ( expression ) .)
    eq              reduce using rule 42 (expression -> ( expression ) .)
    =               reduce using rule 42 (expression -> ( expression ) .)
    >               reduce using rule 42 (expression -> ( expression ) .)
    <               reduce using rule 42 (expression -> ( expression ) .)
    ge              reduce using rule 42 (expression -> ( expression ) .)
    le              reduce using rule 42 (expression -> ( expression ) .)
    neqs            reduce using rule 42 (expression -> ( expression ) .)
    or              reduce using rule 42 (expression -> ( expression ) .)
    nand            reduce using rule 42 (expression -> ( expression ) .)
    +               reduce using rule 42 (expression -> ( expression ) .)
    -               reduce using rule 42 (expression -> ( expression ) .)
    *               reduce using rule 42 (expression -> ( expression ) .)
    /               reduce using rule 42 (expression -> ( expression ) .)
    $end            reduce using rule 42 (expression -> ( expression ) .)
    }               reduce using rule 42 (expression -> ( expression ) .)
    ;               reduce using rule 42 (expression -> ( expression ) .)
    then            reduce using rule 42 (expression -> ( expression ) .)
    ,               reduce using rule 42 (expression -> ( expression ) .)
    ]               reduce using rule 42 (expression -> ( expression ) .)
    lambda          reduce using rule 42 (expression -> ( expression ) .)
    do              reduce using rule 42 (expression -> ( expression ) .)
    )               reduce using rule 42 (expression -> ( expression ) .)
    in              reduce using rule 42 (expression -> ( expression ) .)
    else            reduce using rule 42 (expression -> ( expression ) .)


state 98

    (43) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 114
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 99

    (46) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 115
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 100

    (47) expression -> struct { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 116
    ;               shift and go to state 89


state 101

    (48) expression -> extend ID { . sequence }
    (25) sequence -> . sequence ; expression
    (26) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    sequence                       shift and go to state 117
    expression                     shift and go to state 48
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 102

    (53) expression -> dot_expression ( ) .

    and             reduce using rule 53 (expression -> dot_expression ( ) .)
    eq              reduce using rule 53 (expression -> dot_expression ( ) .)
    =               reduce using rule 53 (expression -> dot_expression ( ) .)
    >               reduce using rule 53 (expression -> dot_expression ( ) .)
    <               reduce using rule 53 (expression -> dot_expression ( ) .)
    ge              reduce using rule 53 (expression -> dot_expression ( ) .)
    le              reduce using rule 53 (expression -> dot_expression ( ) .)
    neqs            reduce using rule 53 (expression -> dot_expression ( ) .)
    or              reduce using rule 53 (expression -> dot_expression ( ) .)
    nand            reduce using rule 53 (expression -> dot_expression ( ) .)
    +               reduce using rule 53 (expression -> dot_expression ( ) .)
    -               reduce using rule 53 (expression -> dot_expression ( ) .)
    *               reduce using rule 53 (expression -> dot_expression ( ) .)
    /               reduce using rule 53 (expression -> dot_expression ( ) .)
    $end            reduce using rule 53 (expression -> dot_expression ( ) .)
    }               reduce using rule 53 (expression -> dot_expression ( ) .)
    ;               reduce using rule 53 (expression -> dot_expression ( ) .)
    then            reduce using rule 53 (expression -> dot_expression ( ) .)
    ,               reduce using rule 53 (expression -> dot_expression ( ) .)
    ]               reduce using rule 53 (expression -> dot_expression ( ) .)
    lambda          reduce using rule 53 (expression -> dot_expression ( ) .)
    do              reduce using rule 53 (expression -> dot_expression ( ) .)
    )               reduce using rule 53 (expression -> dot_expression ( ) .)
    in              reduce using rule 53 (expression -> dot_expression ( ) .)
    else            reduce using rule 53 (expression -> dot_expression ( ) .)


state 103

    (54) expression -> dot_expression ( expression_list . )

    )               shift and go to state 118


state 104

    (2) expression -> local ID assign expression . in expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    in              shift and go to state 119
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 105

    (36) expression -> ID [ NUMBER ] .

    and             reduce using rule 36 (expression -> ID [ NUMBER ] .)
    eq              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    =               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    >               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    <               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    ge              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    le              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    neqs            reduce using rule 36 (expression -> ID [ NUMBER ] .)
    or              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    nand            reduce using rule 36 (expression -> ID [ NUMBER ] .)
    +               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    -               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    *               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    /               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    $end            reduce using rule 36 (expression -> ID [ NUMBER ] .)
    }               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    ;               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    then            reduce using rule 36 (expression -> ID [ NUMBER ] .)
    ,               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    ]               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    lambda          reduce using rule 36 (expression -> ID [ NUMBER ] .)
    do              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    )               reduce using rule 36 (expression -> ID [ NUMBER ] .)
    in              reduce using rule 36 (expression -> ID [ NUMBER ] .)
    else            reduce using rule 36 (expression -> ID [ NUMBER ] .)


state 106

    (45) expression -> ID ( expression_list ) .

    and             reduce using rule 45 (expression -> ID ( expression_list ) .)
    eq              reduce using rule 45 (expression -> ID ( expression_list ) .)
    =               reduce using rule 45 (expression -> ID ( expression_list ) .)
    >               reduce using rule 45 (expression -> ID ( expression_list ) .)
    <               reduce using rule 45 (expression -> ID ( expression_list ) .)
    ge              reduce using rule 45 (expression -> ID ( expression_list ) .)
    le              reduce using rule 45 (expression -> ID ( expression_list ) .)
    neqs            reduce using rule 45 (expression -> ID ( expression_list ) .)
    or              reduce using rule 45 (expression -> ID ( expression_list ) .)
    nand            reduce using rule 45 (expression -> ID ( expression_list ) .)
    +               reduce using rule 45 (expression -> ID ( expression_list ) .)
    -               reduce using rule 45 (expression -> ID ( expression_list ) .)
    *               reduce using rule 45 (expression -> ID ( expression_list ) .)
    /               reduce using rule 45 (expression -> ID ( expression_list ) .)
    $end            reduce using rule 45 (expression -> ID ( expression_list ) .)
    }               reduce using rule 45 (expression -> ID ( expression_list ) .)
    ;               reduce using rule 45 (expression -> ID ( expression_list ) .)
    then            reduce using rule 45 (expression -> ID ( expression_list ) .)
    ,               reduce using rule 45 (expression -> ID ( expression_list ) .)
    ]               reduce using rule 45 (expression -> ID ( expression_list ) .)
    lambda          reduce using rule 45 (expression -> ID ( expression_list ) .)
    do              reduce using rule 45 (expression -> ID ( expression_list ) .)
    )               reduce using rule 45 (expression -> ID ( expression_list ) .)
    in              reduce using rule 45 (expression -> ID ( expression_list ) .)
    else            reduce using rule 45 (expression -> ID ( expression_list ) .)


state 107

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    ,               reduce using rule 4 (expression -> import ID as ID .)
    ]               reduce using rule 4 (expression -> import ID as ID .)
    lambda          reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 108

    (5) expression -> letrec ID assign expression . lambda expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    lambda          shift and go to state 120
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 109

    (25) sequence -> sequence ; expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    }               reduce using rule 25 (sequence -> sequence ; expression .)
    ;               reduce using rule 25 (sequence -> sequence ; expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 110

    (24) expression -> if expression then expression .
    (33) expression -> if expression then expression . else expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 24 (expression -> if expression then expression .)
    }               reduce using rule 24 (expression -> if expression then expression .)
    ;               reduce using rule 24 (expression -> if expression then expression .)
    then            reduce using rule 24 (expression -> if expression then expression .)
    ,               reduce using rule 24 (expression -> if expression then expression .)
    ]               reduce using rule 24 (expression -> if expression then expression .)
    lambda          reduce using rule 24 (expression -> if expression then expression .)
    do              reduce using rule 24 (expression -> if expression then expression .)
    )               reduce using rule 24 (expression -> if expression then expression .)
    in              reduce using rule 24 (expression -> if expression then expression .)
    else            shift and go to state 121
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 24 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 24 (expression -> if expression then expression .) ]


state 111

    (7) expression_list -> expression , expression_list .

    ]               reduce using rule 7 (expression_list -> expression , expression_list .)
    lambda          reduce using rule 7 (expression_list -> expression , expression_list .)
    )               reduce using rule 7 (expression_list -> expression , expression_list .)


state 112

    (35) expression -> lambda_start expression_list lambda expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    }               reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    ;               reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    then            reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    ,               reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    ]               reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    lambda          reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    do              reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    )               reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    in              reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    else            reduce using rule 35 (expression -> lambda_start expression_list lambda expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! eq              [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! =               [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! >               [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! <               [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! ge              [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! le              [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! neqs            [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! or              [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! nand            [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! +               [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! -               [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! *               [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]
  ! /               [ reduce using rule 35 (expression -> lambda_start expression_list lambda expression .) ]


state 113

    (38) expression -> loop expression do expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 38 (expression -> loop expression do expression .)
    }               reduce using rule 38 (expression -> loop expression do expression .)
    ;               reduce using rule 38 (expression -> loop expression do expression .)
    then            reduce using rule 38 (expression -> loop expression do expression .)
    ,               reduce using rule 38 (expression -> loop expression do expression .)
    ]               reduce using rule 38 (expression -> loop expression do expression .)
    lambda          reduce using rule 38 (expression -> loop expression do expression .)
    do              reduce using rule 38 (expression -> loop expression do expression .)
    )               reduce using rule 38 (expression -> loop expression do expression .)
    in              reduce using rule 38 (expression -> loop expression do expression .)
    else            reduce using rule 38 (expression -> loop expression do expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 38 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 38 (expression -> loop expression do expression .) ]


state 114

    (43) expression -> for expression ; expression . ; expression do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ;               shift and go to state 122
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 115

    (46) expression -> while expression do expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 46 (expression -> while expression do expression .)
    }               reduce using rule 46 (expression -> while expression do expression .)
    ;               reduce using rule 46 (expression -> while expression do expression .)
    then            reduce using rule 46 (expression -> while expression do expression .)
    ,               reduce using rule 46 (expression -> while expression do expression .)
    ]               reduce using rule 46 (expression -> while expression do expression .)
    lambda          reduce using rule 46 (expression -> while expression do expression .)
    do              reduce using rule 46 (expression -> while expression do expression .)
    )               reduce using rule 46 (expression -> while expression do expression .)
    in              reduce using rule 46 (expression -> while expression do expression .)
    else            reduce using rule 46 (expression -> while expression do expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 46 (expression -> while expression do expression .) ]


state 116

    (47) expression -> struct { sequence } .

    and             reduce using rule 47 (expression -> struct { sequence } .)
    eq              reduce using rule 47 (expression -> struct { sequence } .)
    =               reduce using rule 47 (expression -> struct { sequence } .)
    >               reduce using rule 47 (expression -> struct { sequence } .)
    <               reduce using rule 47 (expression -> struct { sequence } .)
    ge              reduce using rule 47 (expression -> struct { sequence } .)
    le              reduce using rule 47 (expression -> struct { sequence } .)
    neqs            reduce using rule 47 (expression -> struct { sequence } .)
    or              reduce using rule 47 (expression -> struct { sequence } .)
    nand            reduce using rule 47 (expression -> struct { sequence } .)
    +               reduce using rule 47 (expression -> struct { sequence } .)
    -               reduce using rule 47 (expression -> struct { sequence } .)
    *               reduce using rule 47 (expression -> struct { sequence } .)
    /               reduce using rule 47 (expression -> struct { sequence } .)
    $end            reduce using rule 47 (expression -> struct { sequence } .)
    }               reduce using rule 47 (expression -> struct { sequence } .)
    ;               reduce using rule 47 (expression -> struct { sequence } .)
    then            reduce using rule 47 (expression -> struct { sequence } .)
    ,               reduce using rule 47 (expression -> struct { sequence } .)
    ]               reduce using rule 47 (expression -> struct { sequence } .)
    lambda          reduce using rule 47 (expression -> struct { sequence } .)
    do              reduce using rule 47 (expression -> struct { sequence } .)
    )               reduce using rule 47 (expression -> struct { sequence } .)
    in              reduce using rule 47 (expression -> struct { sequence } .)
    else            reduce using rule 47 (expression -> struct { sequence } .)


state 117

    (48) expression -> extend ID { sequence . }
    (25) sequence -> sequence . ; expression

    }               shift and go to state 123
    ;               shift and go to state 89


state 118

    (54) expression -> dot_expression ( expression_list ) .

    and             reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    eq              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    =               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    >               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    <               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    ge              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    le              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    neqs            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    or              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    nand            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    +               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    -               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    *               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    /               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    $end            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    }               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    ;               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    then            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    ,               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    ]               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    lambda          reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    do              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    )               reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    in              reduce using rule 54 (expression -> dot_expression ( expression_list ) .)
    else            reduce using rule 54 (expression -> dot_expression ( expression_list ) .)


state 119

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 124
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 120

    (5) expression -> letrec ID assign expression lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 125
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 121

    (33) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 126
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 122

    (43) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 127
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 123

    (48) expression -> extend ID { sequence } .

    and             reduce using rule 48 (expression -> extend ID { sequence } .)
    eq              reduce using rule 48 (expression -> extend ID { sequence } .)
    =               reduce using rule 48 (expression -> extend ID { sequence } .)
    >               reduce using rule 48 (expression -> extend ID { sequence } .)
    <               reduce using rule 48 (expression -> extend ID { sequence } .)
    ge              reduce using rule 48 (expression -> extend ID { sequence } .)
    le              reduce using rule 48 (expression -> extend ID { sequence } .)
    neqs            reduce using rule 48 (expression -> extend ID { sequence } .)
    or              reduce using rule 48 (expression -> extend ID { sequence } .)
    nand            reduce using rule 48 (expression -> extend ID { sequence } .)
    +               reduce using rule 48 (expression -> extend ID { sequence } .)
    -               reduce using rule 48 (expression -> extend ID { sequence } .)
    *               reduce using rule 48 (expression -> extend ID { sequence } .)
    /               reduce using rule 48 (expression -> extend ID { sequence } .)
    $end            reduce using rule 48 (expression -> extend ID { sequence } .)
    }               reduce using rule 48 (expression -> extend ID { sequence } .)
    ;               reduce using rule 48 (expression -> extend ID { sequence } .)
    then            reduce using rule 48 (expression -> extend ID { sequence } .)
    ,               reduce using rule 48 (expression -> extend ID { sequence } .)
    ]               reduce using rule 48 (expression -> extend ID { sequence } .)
    lambda          reduce using rule 48 (expression -> extend ID { sequence } .)
    do              reduce using rule 48 (expression -> extend ID { sequence } .)
    )               reduce using rule 48 (expression -> extend ID { sequence } .)
    in              reduce using rule 48 (expression -> extend ID { sequence } .)
    else            reduce using rule 48 (expression -> extend ID { sequence } .)


state 124

    (2) expression -> local ID assign expression in expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    ,               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ]               reduce using rule 2 (expression -> local ID assign expression in expression .)
    lambda          reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 125

    (5) expression -> letrec ID assign expression lambda expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    }               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ;               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    then            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ,               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    ]               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    lambda          reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    do              reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    )               reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    in              reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    else            reduce using rule 5 (expression -> letrec ID assign expression lambda expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> letrec ID assign expression lambda expression .) ]


state 126

    (33) expression -> if expression then expression else expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 33 (expression -> if expression then expression else expression .)
    }               reduce using rule 33 (expression -> if expression then expression else expression .)
    ;               reduce using rule 33 (expression -> if expression then expression else expression .)
    then            reduce using rule 33 (expression -> if expression then expression else expression .)
    ,               reduce using rule 33 (expression -> if expression then expression else expression .)
    ]               reduce using rule 33 (expression -> if expression then expression else expression .)
    lambda          reduce using rule 33 (expression -> if expression then expression else expression .)
    do              reduce using rule 33 (expression -> if expression then expression else expression .)
    )               reduce using rule 33 (expression -> if expression then expression else expression .)
    in              reduce using rule 33 (expression -> if expression then expression else expression .)
    else            reduce using rule 33 (expression -> if expression then expression else expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]


state 127

    (43) expression -> for expression ; expression ; expression . do expression
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 128
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39


state 128

    (43) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . letrec ID assign expression lambda expression
    (6) expression -> . { sequence }
    (9) expression -> . expression and expression
    (10) expression -> . expression eq expression
    (11) expression -> . expression = expression
    (12) expression -> . expression > expression
    (13) expression -> . expression < expression
    (14) expression -> . expression ge expression
    (15) expression -> . expression le expression
    (16) expression -> . expression neqs expression
    (17) expression -> . expression or expression
    (18) expression -> . expression nand expression
    (19) expression -> . string
    (20) expression -> . dots ID
    (21) expression -> . import ID
    (22) expression -> . - expression
    (23) expression -> . char
    (24) expression -> . if expression then expression
    (27) expression -> . ID assign expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . lambda_start lambda expression
    (35) expression -> . lambda_start expression_list lambda expression
    (36) expression -> . ID [ NUMBER ]
    (37) expression -> . not expression
    (38) expression -> . loop expression do expression
    (39) expression -> . ( expression_list )
    (40) expression -> . NUMBER
    (41) expression -> . BOOL
    (42) expression -> . ( expression )
    (43) expression -> . for expression ; expression ; expression do expression
    (44) expression -> . ID ( )
    (45) expression -> . ID ( expression_list )
    (46) expression -> . while expression do expression
    (47) expression -> . struct { sequence }
    (48) expression -> . extend ID { sequence }
    (52) expression -> . dot_expression
    (53) expression -> . dot_expression ( )
    (54) expression -> . dot_expression ( expression_list )
    (49) dots -> . .
    (50) dots -> . . dots
    (51) dot_expression -> . ID dots ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    letrec          shift and go to state 6
    {               shift and go to state 7
    string          shift and go to state 8
    -               shift and go to state 10
    char            shift and go to state 11
    if              shift and go to state 12
    [               shift and go to state 13
    lambda_start    shift and go to state 14
    not             shift and go to state 16
    loop            shift and go to state 17
    (               shift and go to state 18
    NUMBER          shift and go to state 15
    BOOL            shift and go to state 19
    for             shift and go to state 20
    while           shift and go to state 21
    struct          shift and go to state 22
    extend          shift and go to state 23
    .               shift and go to state 25

    expression                     shift and go to state 129
    dots                           shift and go to state 9
    dot_expression                 shift and go to state 24

state 129

    (43) expression -> for expression ; expression ; expression do expression .
    (9) expression -> expression . and expression
    (10) expression -> expression . eq expression
    (11) expression -> expression . = expression
    (12) expression -> expression . > expression
    (13) expression -> expression . < expression
    (14) expression -> expression . ge expression
    (15) expression -> expression . le expression
    (16) expression -> expression . neqs expression
    (17) expression -> expression . or expression
    (18) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ,               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    ]               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    lambda          reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 43 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 26
    eq              shift and go to state 27
    =               shift and go to state 28
    >               shift and go to state 29
    <               shift and go to state 30
    ge              shift and go to state 31
    le              shift and go to state 32
    neqs            shift and go to state 33
    or              shift and go to state 34
    nand            shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39

  ! and             [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 43 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 59 resolved as shift
WARNING: shift/reduce conflict for and in state 124 resolved as shift
WARNING: shift/reduce conflict for eq in state 124 resolved as shift
WARNING: shift/reduce conflict for = in state 124 resolved as shift
WARNING: shift/reduce conflict for > in state 124 resolved as shift
WARNING: shift/reduce conflict for < in state 124 resolved as shift
WARNING: shift/reduce conflict for ge in state 124 resolved as shift
WARNING: shift/reduce conflict for le in state 124 resolved as shift
WARNING: shift/reduce conflict for neqs in state 124 resolved as shift
WARNING: shift/reduce conflict for or in state 124 resolved as shift
WARNING: shift/reduce conflict for nand in state 124 resolved as shift
WARNING: shift/reduce conflict for + in state 124 resolved as shift
WARNING: shift/reduce conflict for - in state 124 resolved as shift
WARNING: shift/reduce conflict for * in state 124 resolved as shift
WARNING: shift/reduce conflict for / in state 124 resolved as shift
