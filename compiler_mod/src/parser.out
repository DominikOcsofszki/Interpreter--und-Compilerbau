Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    while

Grammar

Rule 0     S' -> expression
Rule 1     expression -> ID
Rule 2     expression -> { sequence }
Rule 3     expression -> expression and expression
Rule 4     expression -> expression eq expression
Rule 5     expression -> expression = expression
Rule 6     expression -> expression > expression
Rule 7     expression -> expression < expression
Rule 8     expression -> expression ge expression
Rule 9     expression -> expression le expression
Rule 10    expression -> expression neqs expression
Rule 11    expression -> expression or expression
Rule 12    expression -> expression nand expression
Rule 13    expression -> ID assign expression
Rule 14    sequence -> sequence ; expression
Rule 15    sequence -> expression
Rule 16    expression -> if expression then expression
Rule 17    expression -> expression + expression
Rule 18    expression -> expression - expression
Rule 19    expression -> expression * expression
Rule 20    expression -> expression / expression
Rule 21    expression -> if expression then expression else expression
Rule 22    expression -> not expression
Rule 23    expression -> loop expression do expression
Rule 24    expression -> NUMBER
Rule 25    expression -> BOOL
Rule 26    expression -> ( expression )
Rule 27    expression -> for expression ; expression ; expression do expression
Rule 28    expression -> - expression

Terminals, with rules where they appear

(                    : 26
)                    : 26
*                    : 19
+                    : 17
-                    : 18 28
/                    : 20
;                    : 14 27 27
<                    : 7
=                    : 5
>                    : 6
BOOL                 : 25
ID                   : 1 13
NUMBER               : 24
and                  : 3
assign               : 13
do                   : 23 27
else                 : 21
eq                   : 4
error                : 
for                  : 27
ge                   : 8
if                   : 16 21
le                   : 9
loop                 : 23
nand                 : 12
neqs                 : 10
not                  : 22
or                   : 11
then                 : 16 21
while                : 
{                    : 2
}                    : 2

Nonterminals, with rules where they appear

expression           : 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 14 15 16 16 17 17 18 18 19 19 20 20 21 21 21 22 23 23 26 27 27 27 27 28 0
sequence             : 2 14

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 2

    (1) expression -> ID .
    (13) expression -> ID . assign expression

    and             reduce using rule 1 (expression -> ID .)
    eq              reduce using rule 1 (expression -> ID .)
    =               reduce using rule 1 (expression -> ID .)
    >               reduce using rule 1 (expression -> ID .)
    <               reduce using rule 1 (expression -> ID .)
    ge              reduce using rule 1 (expression -> ID .)
    le              reduce using rule 1 (expression -> ID .)
    neqs            reduce using rule 1 (expression -> ID .)
    or              reduce using rule 1 (expression -> ID .)
    nand            reduce using rule 1 (expression -> ID .)
    +               reduce using rule 1 (expression -> ID .)
    -               reduce using rule 1 (expression -> ID .)
    *               reduce using rule 1 (expression -> ID .)
    /               reduce using rule 1 (expression -> ID .)
    $end            reduce using rule 1 (expression -> ID .)
    }               reduce using rule 1 (expression -> ID .)
    ;               reduce using rule 1 (expression -> ID .)
    then            reduce using rule 1 (expression -> ID .)
    do              reduce using rule 1 (expression -> ID .)
    )               reduce using rule 1 (expression -> ID .)
    else            reduce using rule 1 (expression -> ID .)
    assign          shift and go to state 26


state 3

    (2) expression -> { . sequence }
    (14) sequence -> . sequence ; expression
    (15) sequence -> . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    sequence                       shift and go to state 27
    expression                     shift and go to state 28

state 4

    (16) expression -> if . expression then expression
    (21) expression -> if . expression then expression else expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 29

state 5

    (28) expression -> - . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 30

state 6

    (22) expression -> not . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 31

state 7

    (23) expression -> loop . expression do expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 32

state 8

    (24) expression -> NUMBER .

    and             reduce using rule 24 (expression -> NUMBER .)
    eq              reduce using rule 24 (expression -> NUMBER .)
    =               reduce using rule 24 (expression -> NUMBER .)
    >               reduce using rule 24 (expression -> NUMBER .)
    <               reduce using rule 24 (expression -> NUMBER .)
    ge              reduce using rule 24 (expression -> NUMBER .)
    le              reduce using rule 24 (expression -> NUMBER .)
    neqs            reduce using rule 24 (expression -> NUMBER .)
    or              reduce using rule 24 (expression -> NUMBER .)
    nand            reduce using rule 24 (expression -> NUMBER .)
    +               reduce using rule 24 (expression -> NUMBER .)
    -               reduce using rule 24 (expression -> NUMBER .)
    *               reduce using rule 24 (expression -> NUMBER .)
    /               reduce using rule 24 (expression -> NUMBER .)
    $end            reduce using rule 24 (expression -> NUMBER .)
    }               reduce using rule 24 (expression -> NUMBER .)
    ;               reduce using rule 24 (expression -> NUMBER .)
    then            reduce using rule 24 (expression -> NUMBER .)
    do              reduce using rule 24 (expression -> NUMBER .)
    )               reduce using rule 24 (expression -> NUMBER .)
    else            reduce using rule 24 (expression -> NUMBER .)


state 9

    (25) expression -> BOOL .

    and             reduce using rule 25 (expression -> BOOL .)
    eq              reduce using rule 25 (expression -> BOOL .)
    =               reduce using rule 25 (expression -> BOOL .)
    >               reduce using rule 25 (expression -> BOOL .)
    <               reduce using rule 25 (expression -> BOOL .)
    ge              reduce using rule 25 (expression -> BOOL .)
    le              reduce using rule 25 (expression -> BOOL .)
    neqs            reduce using rule 25 (expression -> BOOL .)
    or              reduce using rule 25 (expression -> BOOL .)
    nand            reduce using rule 25 (expression -> BOOL .)
    +               reduce using rule 25 (expression -> BOOL .)
    -               reduce using rule 25 (expression -> BOOL .)
    *               reduce using rule 25 (expression -> BOOL .)
    /               reduce using rule 25 (expression -> BOOL .)
    $end            reduce using rule 25 (expression -> BOOL .)
    }               reduce using rule 25 (expression -> BOOL .)
    ;               reduce using rule 25 (expression -> BOOL .)
    then            reduce using rule 25 (expression -> BOOL .)
    do              reduce using rule 25 (expression -> BOOL .)
    )               reduce using rule 25 (expression -> BOOL .)
    else            reduce using rule 25 (expression -> BOOL .)


state 10

    (26) expression -> ( . expression )
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 33

state 11

    (27) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 34

state 12

    (3) expression -> expression and . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 35

state 13

    (4) expression -> expression eq . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 36

state 14

    (5) expression -> expression = . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 37

state 15

    (6) expression -> expression > . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 38

state 16

    (7) expression -> expression < . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 39

state 17

    (8) expression -> expression ge . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 40

state 18

    (9) expression -> expression le . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 41

state 19

    (10) expression -> expression neqs . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 42

state 20

    (11) expression -> expression or . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 43

state 21

    (12) expression -> expression nand . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 44

state 22

    (17) expression -> expression + . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 45

state 23

    (18) expression -> expression - . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 46

state 24

    (19) expression -> expression * . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 47

state 25

    (20) expression -> expression / . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 48

state 26

    (13) expression -> ID assign . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 49

state 27

    (2) expression -> { sequence . }
    (14) sequence -> sequence . ; expression

    }               shift and go to state 50
    ;               shift and go to state 51


state 28

    (15) sequence -> expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    }               reduce using rule 15 (sequence -> expression .)
    ;               reduce using rule 15 (sequence -> expression .)
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 29

    (16) expression -> if expression . then expression
    (21) expression -> if expression . then expression else expression
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    then            shift and go to state 52
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 30

    (28) expression -> - expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 28 (expression -> - expression .)
    eq              reduce using rule 28 (expression -> - expression .)
    =               reduce using rule 28 (expression -> - expression .)
    >               reduce using rule 28 (expression -> - expression .)
    <               reduce using rule 28 (expression -> - expression .)
    ge              reduce using rule 28 (expression -> - expression .)
    le              reduce using rule 28 (expression -> - expression .)
    neqs            reduce using rule 28 (expression -> - expression .)
    or              reduce using rule 28 (expression -> - expression .)
    nand            reduce using rule 28 (expression -> - expression .)
    +               reduce using rule 28 (expression -> - expression .)
    -               reduce using rule 28 (expression -> - expression .)
    *               reduce using rule 28 (expression -> - expression .)
    /               reduce using rule 28 (expression -> - expression .)
    $end            reduce using rule 28 (expression -> - expression .)
    }               reduce using rule 28 (expression -> - expression .)
    ;               reduce using rule 28 (expression -> - expression .)
    then            reduce using rule 28 (expression -> - expression .)
    do              reduce using rule 28 (expression -> - expression .)
    )               reduce using rule 28 (expression -> - expression .)
    else            reduce using rule 28 (expression -> - expression .)

  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 31

    (22) expression -> not expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 22 (expression -> not expression .)
    eq              reduce using rule 22 (expression -> not expression .)
    =               reduce using rule 22 (expression -> not expression .)
    neqs            reduce using rule 22 (expression -> not expression .)
    or              reduce using rule 22 (expression -> not expression .)
    nand            reduce using rule 22 (expression -> not expression .)
    $end            reduce using rule 22 (expression -> not expression .)
    }               reduce using rule 22 (expression -> not expression .)
    ;               reduce using rule 22 (expression -> not expression .)
    then            reduce using rule 22 (expression -> not expression .)
    do              reduce using rule 22 (expression -> not expression .)
    )               reduce using rule 22 (expression -> not expression .)
    else            reduce using rule 22 (expression -> not expression .)
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! >               [ reduce using rule 22 (expression -> not expression .) ]
  ! <               [ reduce using rule 22 (expression -> not expression .) ]
  ! ge              [ reduce using rule 22 (expression -> not expression .) ]
  ! le              [ reduce using rule 22 (expression -> not expression .) ]
  ! +               [ reduce using rule 22 (expression -> not expression .) ]
  ! -               [ reduce using rule 22 (expression -> not expression .) ]
  ! *               [ reduce using rule 22 (expression -> not expression .) ]
  ! /               [ reduce using rule 22 (expression -> not expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 32

    (23) expression -> loop expression . do expression
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    do              shift and go to state 53
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 33

    (26) expression -> ( expression . )
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    )               shift and go to state 54
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 34

    (27) expression -> for expression . ; expression ; expression do expression
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    ;               shift and go to state 55
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 35

    (3) expression -> expression and expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 3 (expression -> expression and expression .)
    or              reduce using rule 3 (expression -> expression and expression .)
    nand            reduce using rule 3 (expression -> expression and expression .)
    $end            reduce using rule 3 (expression -> expression and expression .)
    }               reduce using rule 3 (expression -> expression and expression .)
    ;               reduce using rule 3 (expression -> expression and expression .)
    then            reduce using rule 3 (expression -> expression and expression .)
    do              reduce using rule 3 (expression -> expression and expression .)
    )               reduce using rule 3 (expression -> expression and expression .)
    else            reduce using rule 3 (expression -> expression and expression .)
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! eq              [ reduce using rule 3 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 3 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 3 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 3 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 3 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 3 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 3 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 3 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 3 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 3 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 12 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 36

    (4) expression -> expression eq expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 4 (expression -> expression eq expression .)
    eq              reduce using rule 4 (expression -> expression eq expression .)
    =               reduce using rule 4 (expression -> expression eq expression .)
    neqs            reduce using rule 4 (expression -> expression eq expression .)
    or              reduce using rule 4 (expression -> expression eq expression .)
    nand            reduce using rule 4 (expression -> expression eq expression .)
    $end            reduce using rule 4 (expression -> expression eq expression .)
    }               reduce using rule 4 (expression -> expression eq expression .)
    ;               reduce using rule 4 (expression -> expression eq expression .)
    then            reduce using rule 4 (expression -> expression eq expression .)
    do              reduce using rule 4 (expression -> expression eq expression .)
    )               reduce using rule 4 (expression -> expression eq expression .)
    else            reduce using rule 4 (expression -> expression eq expression .)
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! >               [ reduce using rule 4 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 4 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 4 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 4 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 4 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 4 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 4 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 37

    (5) expression -> expression = expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 5 (expression -> expression = expression .)
    eq              reduce using rule 5 (expression -> expression = expression .)
    =               reduce using rule 5 (expression -> expression = expression .)
    neqs            reduce using rule 5 (expression -> expression = expression .)
    or              reduce using rule 5 (expression -> expression = expression .)
    nand            reduce using rule 5 (expression -> expression = expression .)
    $end            reduce using rule 5 (expression -> expression = expression .)
    }               reduce using rule 5 (expression -> expression = expression .)
    ;               reduce using rule 5 (expression -> expression = expression .)
    then            reduce using rule 5 (expression -> expression = expression .)
    do              reduce using rule 5 (expression -> expression = expression .)
    )               reduce using rule 5 (expression -> expression = expression .)
    else            reduce using rule 5 (expression -> expression = expression .)
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! >               [ reduce using rule 5 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 5 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 5 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 5 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 5 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 5 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 5 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 5 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 38

    (6) expression -> expression > expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 6 (expression -> expression > expression .)
    eq              reduce using rule 6 (expression -> expression > expression .)
    =               reduce using rule 6 (expression -> expression > expression .)
    >               reduce using rule 6 (expression -> expression > expression .)
    <               reduce using rule 6 (expression -> expression > expression .)
    ge              reduce using rule 6 (expression -> expression > expression .)
    le              reduce using rule 6 (expression -> expression > expression .)
    neqs            reduce using rule 6 (expression -> expression > expression .)
    or              reduce using rule 6 (expression -> expression > expression .)
    nand            reduce using rule 6 (expression -> expression > expression .)
    $end            reduce using rule 6 (expression -> expression > expression .)
    }               reduce using rule 6 (expression -> expression > expression .)
    ;               reduce using rule 6 (expression -> expression > expression .)
    then            reduce using rule 6 (expression -> expression > expression .)
    do              reduce using rule 6 (expression -> expression > expression .)
    )               reduce using rule 6 (expression -> expression > expression .)
    else            reduce using rule 6 (expression -> expression > expression .)
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! +               [ reduce using rule 6 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 6 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 6 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 6 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 39

    (7) expression -> expression < expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 7 (expression -> expression < expression .)
    eq              reduce using rule 7 (expression -> expression < expression .)
    =               reduce using rule 7 (expression -> expression < expression .)
    >               reduce using rule 7 (expression -> expression < expression .)
    <               reduce using rule 7 (expression -> expression < expression .)
    ge              reduce using rule 7 (expression -> expression < expression .)
    le              reduce using rule 7 (expression -> expression < expression .)
    neqs            reduce using rule 7 (expression -> expression < expression .)
    or              reduce using rule 7 (expression -> expression < expression .)
    nand            reduce using rule 7 (expression -> expression < expression .)
    $end            reduce using rule 7 (expression -> expression < expression .)
    }               reduce using rule 7 (expression -> expression < expression .)
    ;               reduce using rule 7 (expression -> expression < expression .)
    then            reduce using rule 7 (expression -> expression < expression .)
    do              reduce using rule 7 (expression -> expression < expression .)
    )               reduce using rule 7 (expression -> expression < expression .)
    else            reduce using rule 7 (expression -> expression < expression .)
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! +               [ reduce using rule 7 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 7 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 7 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 40

    (8) expression -> expression ge expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 8 (expression -> expression ge expression .)
    eq              reduce using rule 8 (expression -> expression ge expression .)
    =               reduce using rule 8 (expression -> expression ge expression .)
    >               reduce using rule 8 (expression -> expression ge expression .)
    <               reduce using rule 8 (expression -> expression ge expression .)
    ge              reduce using rule 8 (expression -> expression ge expression .)
    le              reduce using rule 8 (expression -> expression ge expression .)
    neqs            reduce using rule 8 (expression -> expression ge expression .)
    or              reduce using rule 8 (expression -> expression ge expression .)
    nand            reduce using rule 8 (expression -> expression ge expression .)
    $end            reduce using rule 8 (expression -> expression ge expression .)
    }               reduce using rule 8 (expression -> expression ge expression .)
    ;               reduce using rule 8 (expression -> expression ge expression .)
    then            reduce using rule 8 (expression -> expression ge expression .)
    do              reduce using rule 8 (expression -> expression ge expression .)
    )               reduce using rule 8 (expression -> expression ge expression .)
    else            reduce using rule 8 (expression -> expression ge expression .)
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! +               [ reduce using rule 8 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 8 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 8 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 41

    (9) expression -> expression le expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression le expression .)
    eq              reduce using rule 9 (expression -> expression le expression .)
    =               reduce using rule 9 (expression -> expression le expression .)
    >               reduce using rule 9 (expression -> expression le expression .)
    <               reduce using rule 9 (expression -> expression le expression .)
    ge              reduce using rule 9 (expression -> expression le expression .)
    le              reduce using rule 9 (expression -> expression le expression .)
    neqs            reduce using rule 9 (expression -> expression le expression .)
    or              reduce using rule 9 (expression -> expression le expression .)
    nand            reduce using rule 9 (expression -> expression le expression .)
    $end            reduce using rule 9 (expression -> expression le expression .)
    }               reduce using rule 9 (expression -> expression le expression .)
    ;               reduce using rule 9 (expression -> expression le expression .)
    then            reduce using rule 9 (expression -> expression le expression .)
    do              reduce using rule 9 (expression -> expression le expression .)
    )               reduce using rule 9 (expression -> expression le expression .)
    else            reduce using rule 9 (expression -> expression le expression .)
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! +               [ reduce using rule 9 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 42

    (10) expression -> expression neqs expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression neqs expression .)
    eq              reduce using rule 10 (expression -> expression neqs expression .)
    =               reduce using rule 10 (expression -> expression neqs expression .)
    neqs            reduce using rule 10 (expression -> expression neqs expression .)
    or              reduce using rule 10 (expression -> expression neqs expression .)
    nand            reduce using rule 10 (expression -> expression neqs expression .)
    $end            reduce using rule 10 (expression -> expression neqs expression .)
    }               reduce using rule 10 (expression -> expression neqs expression .)
    ;               reduce using rule 10 (expression -> expression neqs expression .)
    then            reduce using rule 10 (expression -> expression neqs expression .)
    do              reduce using rule 10 (expression -> expression neqs expression .)
    )               reduce using rule 10 (expression -> expression neqs expression .)
    else            reduce using rule 10 (expression -> expression neqs expression .)
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! >               [ reduce using rule 10 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 10 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 10 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 10 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 10 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 43

    (11) expression -> expression or expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    or              reduce using rule 11 (expression -> expression or expression .)
    $end            reduce using rule 11 (expression -> expression or expression .)
    }               reduce using rule 11 (expression -> expression or expression .)
    ;               reduce using rule 11 (expression -> expression or expression .)
    then            reduce using rule 11 (expression -> expression or expression .)
    do              reduce using rule 11 (expression -> expression or expression .)
    )               reduce using rule 11 (expression -> expression or expression .)
    else            reduce using rule 11 (expression -> expression or expression .)
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! and             [ reduce using rule 11 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 11 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 11 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 11 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 11 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 11 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 11 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 11 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 11 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 11 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 20 ]


state 44

    (12) expression -> expression nand expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression nand expression .)
    or              reduce using rule 12 (expression -> expression nand expression .)
    nand            reduce using rule 12 (expression -> expression nand expression .)
    $end            reduce using rule 12 (expression -> expression nand expression .)
    }               reduce using rule 12 (expression -> expression nand expression .)
    ;               reduce using rule 12 (expression -> expression nand expression .)
    then            reduce using rule 12 (expression -> expression nand expression .)
    do              reduce using rule 12 (expression -> expression nand expression .)
    )               reduce using rule 12 (expression -> expression nand expression .)
    else            reduce using rule 12 (expression -> expression nand expression .)
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! eq              [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 12 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]


state 45

    (17) expression -> expression + expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 17 (expression -> expression + expression .)
    eq              reduce using rule 17 (expression -> expression + expression .)
    =               reduce using rule 17 (expression -> expression + expression .)
    >               reduce using rule 17 (expression -> expression + expression .)
    <               reduce using rule 17 (expression -> expression + expression .)
    ge              reduce using rule 17 (expression -> expression + expression .)
    le              reduce using rule 17 (expression -> expression + expression .)
    neqs            reduce using rule 17 (expression -> expression + expression .)
    or              reduce using rule 17 (expression -> expression + expression .)
    nand            reduce using rule 17 (expression -> expression + expression .)
    +               reduce using rule 17 (expression -> expression + expression .)
    -               reduce using rule 17 (expression -> expression + expression .)
    $end            reduce using rule 17 (expression -> expression + expression .)
    }               reduce using rule 17 (expression -> expression + expression .)
    ;               reduce using rule 17 (expression -> expression + expression .)
    then            reduce using rule 17 (expression -> expression + expression .)
    do              reduce using rule 17 (expression -> expression + expression .)
    )               reduce using rule 17 (expression -> expression + expression .)
    else            reduce using rule 17 (expression -> expression + expression .)
    *               shift and go to state 24
    /               shift and go to state 25

  ! *               [ reduce using rule 17 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]


state 46

    (18) expression -> expression - expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 18 (expression -> expression - expression .)
    eq              reduce using rule 18 (expression -> expression - expression .)
    =               reduce using rule 18 (expression -> expression - expression .)
    >               reduce using rule 18 (expression -> expression - expression .)
    <               reduce using rule 18 (expression -> expression - expression .)
    ge              reduce using rule 18 (expression -> expression - expression .)
    le              reduce using rule 18 (expression -> expression - expression .)
    neqs            reduce using rule 18 (expression -> expression - expression .)
    or              reduce using rule 18 (expression -> expression - expression .)
    nand            reduce using rule 18 (expression -> expression - expression .)
    +               reduce using rule 18 (expression -> expression - expression .)
    -               reduce using rule 18 (expression -> expression - expression .)
    $end            reduce using rule 18 (expression -> expression - expression .)
    }               reduce using rule 18 (expression -> expression - expression .)
    ;               reduce using rule 18 (expression -> expression - expression .)
    then            reduce using rule 18 (expression -> expression - expression .)
    do              reduce using rule 18 (expression -> expression - expression .)
    )               reduce using rule 18 (expression -> expression - expression .)
    else            reduce using rule 18 (expression -> expression - expression .)
    *               shift and go to state 24
    /               shift and go to state 25

  ! *               [ reduce using rule 18 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 18 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]


state 47

    (19) expression -> expression * expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 19 (expression -> expression * expression .)
    eq              reduce using rule 19 (expression -> expression * expression .)
    =               reduce using rule 19 (expression -> expression * expression .)
    >               reduce using rule 19 (expression -> expression * expression .)
    <               reduce using rule 19 (expression -> expression * expression .)
    ge              reduce using rule 19 (expression -> expression * expression .)
    le              reduce using rule 19 (expression -> expression * expression .)
    neqs            reduce using rule 19 (expression -> expression * expression .)
    or              reduce using rule 19 (expression -> expression * expression .)
    nand            reduce using rule 19 (expression -> expression * expression .)
    +               reduce using rule 19 (expression -> expression * expression .)
    -               reduce using rule 19 (expression -> expression * expression .)
    *               reduce using rule 19 (expression -> expression * expression .)
    /               reduce using rule 19 (expression -> expression * expression .)
    $end            reduce using rule 19 (expression -> expression * expression .)
    }               reduce using rule 19 (expression -> expression * expression .)
    ;               reduce using rule 19 (expression -> expression * expression .)
    then            reduce using rule 19 (expression -> expression * expression .)
    do              reduce using rule 19 (expression -> expression * expression .)
    )               reduce using rule 19 (expression -> expression * expression .)
    else            reduce using rule 19 (expression -> expression * expression .)

  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 48

    (20) expression -> expression / expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    and             reduce using rule 20 (expression -> expression / expression .)
    eq              reduce using rule 20 (expression -> expression / expression .)
    =               reduce using rule 20 (expression -> expression / expression .)
    >               reduce using rule 20 (expression -> expression / expression .)
    <               reduce using rule 20 (expression -> expression / expression .)
    ge              reduce using rule 20 (expression -> expression / expression .)
    le              reduce using rule 20 (expression -> expression / expression .)
    neqs            reduce using rule 20 (expression -> expression / expression .)
    or              reduce using rule 20 (expression -> expression / expression .)
    nand            reduce using rule 20 (expression -> expression / expression .)
    +               reduce using rule 20 (expression -> expression / expression .)
    -               reduce using rule 20 (expression -> expression / expression .)
    *               reduce using rule 20 (expression -> expression / expression .)
    /               reduce using rule 20 (expression -> expression / expression .)
    $end            reduce using rule 20 (expression -> expression / expression .)
    }               reduce using rule 20 (expression -> expression / expression .)
    ;               reduce using rule 20 (expression -> expression / expression .)
    then            reduce using rule 20 (expression -> expression / expression .)
    do              reduce using rule 20 (expression -> expression / expression .)
    )               reduce using rule 20 (expression -> expression / expression .)
    else            reduce using rule 20 (expression -> expression / expression .)

  ! and             [ shift and go to state 12 ]
  ! eq              [ shift and go to state 13 ]
  ! =               [ shift and go to state 14 ]
  ! >               [ shift and go to state 15 ]
  ! <               [ shift and go to state 16 ]
  ! ge              [ shift and go to state 17 ]
  ! le              [ shift and go to state 18 ]
  ! neqs            [ shift and go to state 19 ]
  ! or              [ shift and go to state 20 ]
  ! nand            [ shift and go to state 21 ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 49

    (13) expression -> ID assign expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    $end            reduce using rule 13 (expression -> ID assign expression .)
    }               reduce using rule 13 (expression -> ID assign expression .)
    ;               reduce using rule 13 (expression -> ID assign expression .)
    then            reduce using rule 13 (expression -> ID assign expression .)
    do              reduce using rule 13 (expression -> ID assign expression .)
    )               reduce using rule 13 (expression -> ID assign expression .)
    else            reduce using rule 13 (expression -> ID assign expression .)
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! and             [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 13 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 13 (expression -> ID assign expression .) ]


state 50

    (2) expression -> { sequence } .

    and             reduce using rule 2 (expression -> { sequence } .)
    eq              reduce using rule 2 (expression -> { sequence } .)
    =               reduce using rule 2 (expression -> { sequence } .)
    >               reduce using rule 2 (expression -> { sequence } .)
    <               reduce using rule 2 (expression -> { sequence } .)
    ge              reduce using rule 2 (expression -> { sequence } .)
    le              reduce using rule 2 (expression -> { sequence } .)
    neqs            reduce using rule 2 (expression -> { sequence } .)
    or              reduce using rule 2 (expression -> { sequence } .)
    nand            reduce using rule 2 (expression -> { sequence } .)
    +               reduce using rule 2 (expression -> { sequence } .)
    -               reduce using rule 2 (expression -> { sequence } .)
    *               reduce using rule 2 (expression -> { sequence } .)
    /               reduce using rule 2 (expression -> { sequence } .)
    $end            reduce using rule 2 (expression -> { sequence } .)
    }               reduce using rule 2 (expression -> { sequence } .)
    ;               reduce using rule 2 (expression -> { sequence } .)
    then            reduce using rule 2 (expression -> { sequence } .)
    do              reduce using rule 2 (expression -> { sequence } .)
    )               reduce using rule 2 (expression -> { sequence } .)
    else            reduce using rule 2 (expression -> { sequence } .)


state 51

    (14) sequence -> sequence ; . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 56

state 52

    (16) expression -> if expression then . expression
    (21) expression -> if expression then . expression else expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 57

state 53

    (23) expression -> loop expression do . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 58

state 54

    (26) expression -> ( expression ) .

    and             reduce using rule 26 (expression -> ( expression ) .)
    eq              reduce using rule 26 (expression -> ( expression ) .)
    =               reduce using rule 26 (expression -> ( expression ) .)
    >               reduce using rule 26 (expression -> ( expression ) .)
    <               reduce using rule 26 (expression -> ( expression ) .)
    ge              reduce using rule 26 (expression -> ( expression ) .)
    le              reduce using rule 26 (expression -> ( expression ) .)
    neqs            reduce using rule 26 (expression -> ( expression ) .)
    or              reduce using rule 26 (expression -> ( expression ) .)
    nand            reduce using rule 26 (expression -> ( expression ) .)
    +               reduce using rule 26 (expression -> ( expression ) .)
    -               reduce using rule 26 (expression -> ( expression ) .)
    *               reduce using rule 26 (expression -> ( expression ) .)
    /               reduce using rule 26 (expression -> ( expression ) .)
    $end            reduce using rule 26 (expression -> ( expression ) .)
    }               reduce using rule 26 (expression -> ( expression ) .)
    ;               reduce using rule 26 (expression -> ( expression ) .)
    then            reduce using rule 26 (expression -> ( expression ) .)
    do              reduce using rule 26 (expression -> ( expression ) .)
    )               reduce using rule 26 (expression -> ( expression ) .)
    else            reduce using rule 26 (expression -> ( expression ) .)


state 55

    (27) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 59

state 56

    (14) sequence -> sequence ; expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    }               reduce using rule 14 (sequence -> sequence ; expression .)
    ;               reduce using rule 14 (sequence -> sequence ; expression .)
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 57

    (16) expression -> if expression then expression .
    (21) expression -> if expression then expression . else expression
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    $end            reduce using rule 16 (expression -> if expression then expression .)
    }               reduce using rule 16 (expression -> if expression then expression .)
    ;               reduce using rule 16 (expression -> if expression then expression .)
    then            reduce using rule 16 (expression -> if expression then expression .)
    do              reduce using rule 16 (expression -> if expression then expression .)
    )               reduce using rule 16 (expression -> if expression then expression .)
    else            shift and go to state 60
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! and             [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 16 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 16 (expression -> if expression then expression .) ]


state 58

    (23) expression -> loop expression do expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    $end            reduce using rule 23 (expression -> loop expression do expression .)
    }               reduce using rule 23 (expression -> loop expression do expression .)
    ;               reduce using rule 23 (expression -> loop expression do expression .)
    then            reduce using rule 23 (expression -> loop expression do expression .)
    do              reduce using rule 23 (expression -> loop expression do expression .)
    )               reduce using rule 23 (expression -> loop expression do expression .)
    else            reduce using rule 23 (expression -> loop expression do expression .)
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! and             [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 23 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 23 (expression -> loop expression do expression .) ]


state 59

    (27) expression -> for expression ; expression . ; expression do expression
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    ;               shift and go to state 61
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 60

    (21) expression -> if expression then expression else . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 62

state 61

    (27) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 63

state 62

    (21) expression -> if expression then expression else expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    $end            reduce using rule 21 (expression -> if expression then expression else expression .)
    }               reduce using rule 21 (expression -> if expression then expression else expression .)
    ;               reduce using rule 21 (expression -> if expression then expression else expression .)
    then            reduce using rule 21 (expression -> if expression then expression else expression .)
    do              reduce using rule 21 (expression -> if expression then expression else expression .)
    )               reduce using rule 21 (expression -> if expression then expression else expression .)
    else            reduce using rule 21 (expression -> if expression then expression else expression .)
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! and             [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 21 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 21 (expression -> if expression then expression else expression .) ]


state 63

    (27) expression -> for expression ; expression ; expression . do expression
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    do              shift and go to state 64
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 64

    (27) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . ID
    (2) expression -> . { sequence }
    (3) expression -> . expression and expression
    (4) expression -> . expression eq expression
    (5) expression -> . expression = expression
    (6) expression -> . expression > expression
    (7) expression -> . expression < expression
    (8) expression -> . expression ge expression
    (9) expression -> . expression le expression
    (10) expression -> . expression neqs expression
    (11) expression -> . expression or expression
    (12) expression -> . expression nand expression
    (13) expression -> . ID assign expression
    (16) expression -> . if expression then expression
    (17) expression -> . expression + expression
    (18) expression -> . expression - expression
    (19) expression -> . expression * expression
    (20) expression -> . expression / expression
    (21) expression -> . if expression then expression else expression
    (22) expression -> . not expression
    (23) expression -> . loop expression do expression
    (24) expression -> . NUMBER
    (25) expression -> . BOOL
    (26) expression -> . ( expression )
    (27) expression -> . for expression ; expression ; expression do expression
    (28) expression -> . - expression

    ID              shift and go to state 2
    {               shift and go to state 3
    if              shift and go to state 4
    not             shift and go to state 6
    loop            shift and go to state 7
    NUMBER          shift and go to state 8
    BOOL            shift and go to state 9
    (               shift and go to state 10
    for             shift and go to state 11
    -               shift and go to state 5

    expression                     shift and go to state 65

state 65

    (27) expression -> for expression ; expression ; expression do expression .
    (3) expression -> expression . and expression
    (4) expression -> expression . eq expression
    (5) expression -> expression . = expression
    (6) expression -> expression . > expression
    (7) expression -> expression . < expression
    (8) expression -> expression . ge expression
    (9) expression -> expression . le expression
    (10) expression -> expression . neqs expression
    (11) expression -> expression . or expression
    (12) expression -> expression . nand expression
    (17) expression -> expression . + expression
    (18) expression -> expression . - expression
    (19) expression -> expression . * expression
    (20) expression -> expression . / expression

    $end            reduce using rule 27 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 27 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 27 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 27 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 27 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 27 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 27 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 12
    eq              shift and go to state 13
    =               shift and go to state 14
    >               shift and go to state 15
    <               shift and go to state 16
    ge              shift and go to state 17
    le              shift and go to state 18
    neqs            shift and go to state 19
    or              shift and go to state 20
    nand            shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25

  ! and             [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 27 (expression -> for expression ; expression ; expression do expression .) ]

