Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    array
    list

Grammar

Rule 0     S' -> expression
Rule 1     expression -> float
Rule 2     expression -> local ID assign expression in expression
Rule 3     expression -> ID
Rule 4     expression -> import ID as ID
Rule 5     expression -> ID lambda expression
Rule 6     expression -> { sequence }
Rule 7     expression -> expression and expression
Rule 8     expression -> expression eq expression
Rule 9     expression -> expression = expression
Rule 10    expression -> expression > expression
Rule 11    expression -> expression < expression
Rule 12    expression -> expression ge expression
Rule 13    expression -> expression le expression
Rule 14    expression -> expression neqs expression
Rule 15    expression -> expression or expression
Rule 16    expression -> expression nand expression
Rule 17    expression -> string
Rule 18    expression -> letrec ID assign expression in expression
Rule 19    expression -> ID assign expression
Rule 20    expression -> import ID
Rule 21    expression -> ID ( expression )
Rule 22    sequence -> sequence ; expression
Rule 23    sequence -> expression
Rule 24    expression -> char
Rule 25    expression -> if expression then expression
Rule 26    id_list -> ID , id_list
Rule 27    id_list -> ID
Rule 28    expression -> expression + expression
Rule 29    expression -> expression - expression
Rule 30    expression -> expression * expression
Rule 31    expression -> expression / expression
Rule 32    expression -> [ expression_list ]
Rule 33    expression -> if expression then expression else expression
Rule 34    expression -> ( expression_list )
Rule 35    expression -> not expression
Rule 36    expression -> loop expression do expression
Rule 37    expression_list -> expression
Rule 38    expression_list -> expression , expression_list
Rule 39    expression_list -> ID , expression_list
Rule 40    expression -> NUMBER
Rule 41    expression -> id_list lambda expression
Rule 42    expression -> BOOL
Rule 43    expression -> - expression
Rule 44    expression -> ( expression )
Rule 45    expression -> for expression ; expression ; expression do expression
Rule 46    expression -> while expression do expression

Terminals, with rules where they appear

(                    : 21 34 44
)                    : 21 34 44
*                    : 30
+                    : 28
,                    : 26 38 39
-                    : 29 43
/                    : 31
;                    : 22 45 45
<                    : 11
=                    : 9
>                    : 10
BOOL                 : 42
ID                   : 2 3 4 4 5 18 19 20 21 26 27 39
NUMBER               : 40
[                    : 32
]                    : 32
and                  : 7
array                : 
as                   : 4
assign               : 2 18 19
char                 : 24
do                   : 36 45 46
else                 : 33
eq                   : 8
error                : 
float                : 1
for                  : 45
ge                   : 12
if                   : 25 33
import               : 4 20
in                   : 2 18
lambda               : 5 41
le                   : 13
letrec               : 18
list                 : 
local                : 2
loop                 : 36
nand                 : 16
neqs                 : 14
not                  : 35
or                   : 15
string               : 17
then                 : 25 33
while                : 46
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

expression           : 2 2 5 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 18 18 19 21 22 23 25 25 28 28 29 29 30 30 31 31 33 33 33 35 36 36 37 38 41 43 44 45 45 45 45 46 46 0
expression_list      : 32 34 38 39
id_list              : 26 41
sequence             : 6 22

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 1
    id_list                        shift and go to state 17

state 1

    (0) S' -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 2

    (1) expression -> float .

    and             reduce using rule 1 (expression -> float .)
    eq              reduce using rule 1 (expression -> float .)
    =               reduce using rule 1 (expression -> float .)
    >               reduce using rule 1 (expression -> float .)
    <               reduce using rule 1 (expression -> float .)
    ge              reduce using rule 1 (expression -> float .)
    le              reduce using rule 1 (expression -> float .)
    neqs            reduce using rule 1 (expression -> float .)
    or              reduce using rule 1 (expression -> float .)
    nand            reduce using rule 1 (expression -> float .)
    +               reduce using rule 1 (expression -> float .)
    -               reduce using rule 1 (expression -> float .)
    *               reduce using rule 1 (expression -> float .)
    /               reduce using rule 1 (expression -> float .)
    $end            reduce using rule 1 (expression -> float .)
    }               reduce using rule 1 (expression -> float .)
    ;               reduce using rule 1 (expression -> float .)
    )               reduce using rule 1 (expression -> float .)
    ,               reduce using rule 1 (expression -> float .)
    then            reduce using rule 1 (expression -> float .)
    ]               reduce using rule 1 (expression -> float .)
    do              reduce using rule 1 (expression -> float .)
    in              reduce using rule 1 (expression -> float .)
    else            reduce using rule 1 (expression -> float .)


state 3

    (2) expression -> local . ID assign expression in expression

    ID              shift and go to state 35


state 4

    (3) expression -> ID .
    (5) expression -> ID . lambda expression
    (19) expression -> ID . assign expression
    (21) expression -> ID . ( expression )
    (26) id_list -> ID . , id_list
    (27) id_list -> ID .

  ! shift/reduce conflict for , resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    $end            reduce using rule 3 (expression -> ID .)
    }               reduce using rule 3 (expression -> ID .)
    ;               reduce using rule 3 (expression -> ID .)
    then            reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    do              reduce using rule 3 (expression -> ID .)
    in              reduce using rule 3 (expression -> ID .)
    else            reduce using rule 3 (expression -> ID .)
    lambda          shift and go to state 36
    assign          shift and go to state 37
    (               shift and go to state 38
    ,               shift and go to state 39

  ! ,               [ reduce using rule 3 (expression -> ID .) ]
  ! lambda          [ reduce using rule 27 (id_list -> ID .) ]


state 5

    (4) expression -> import . ID as ID
    (20) expression -> import . ID

    ID              shift and go to state 40


state 6

    (6) expression -> { . sequence }
    (22) sequence -> . sequence ; expression
    (23) sequence -> . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    sequence                       shift and go to state 41
    expression                     shift and go to state 42
    id_list                        shift and go to state 17

state 7

    (17) expression -> string .

    and             reduce using rule 17 (expression -> string .)
    eq              reduce using rule 17 (expression -> string .)
    =               reduce using rule 17 (expression -> string .)
    >               reduce using rule 17 (expression -> string .)
    <               reduce using rule 17 (expression -> string .)
    ge              reduce using rule 17 (expression -> string .)
    le              reduce using rule 17 (expression -> string .)
    neqs            reduce using rule 17 (expression -> string .)
    or              reduce using rule 17 (expression -> string .)
    nand            reduce using rule 17 (expression -> string .)
    +               reduce using rule 17 (expression -> string .)
    -               reduce using rule 17 (expression -> string .)
    *               reduce using rule 17 (expression -> string .)
    /               reduce using rule 17 (expression -> string .)
    $end            reduce using rule 17 (expression -> string .)
    }               reduce using rule 17 (expression -> string .)
    ;               reduce using rule 17 (expression -> string .)
    )               reduce using rule 17 (expression -> string .)
    ,               reduce using rule 17 (expression -> string .)
    then            reduce using rule 17 (expression -> string .)
    ]               reduce using rule 17 (expression -> string .)
    do              reduce using rule 17 (expression -> string .)
    in              reduce using rule 17 (expression -> string .)
    else            reduce using rule 17 (expression -> string .)


state 8

    (18) expression -> letrec . ID assign expression in expression

    ID              shift and go to state 43


state 9

    (34) expression -> ( . expression_list )
    (44) expression -> ( . expression )
    (37) expression_list -> . expression
    (38) expression_list -> . expression , expression_list
    (39) expression_list -> . ID , expression_list
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    ID              shift and go to state 46
    float           shift and go to state 2
    local           shift and go to state 3
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression_list                shift and go to state 44
    expression                     shift and go to state 45
    id_list                        shift and go to state 17

state 10

    (24) expression -> char .

    and             reduce using rule 24 (expression -> char .)
    eq              reduce using rule 24 (expression -> char .)
    =               reduce using rule 24 (expression -> char .)
    >               reduce using rule 24 (expression -> char .)
    <               reduce using rule 24 (expression -> char .)
    ge              reduce using rule 24 (expression -> char .)
    le              reduce using rule 24 (expression -> char .)
    neqs            reduce using rule 24 (expression -> char .)
    or              reduce using rule 24 (expression -> char .)
    nand            reduce using rule 24 (expression -> char .)
    +               reduce using rule 24 (expression -> char .)
    -               reduce using rule 24 (expression -> char .)
    *               reduce using rule 24 (expression -> char .)
    /               reduce using rule 24 (expression -> char .)
    $end            reduce using rule 24 (expression -> char .)
    }               reduce using rule 24 (expression -> char .)
    ;               reduce using rule 24 (expression -> char .)
    )               reduce using rule 24 (expression -> char .)
    ,               reduce using rule 24 (expression -> char .)
    then            reduce using rule 24 (expression -> char .)
    ]               reduce using rule 24 (expression -> char .)
    do              reduce using rule 24 (expression -> char .)
    in              reduce using rule 24 (expression -> char .)
    else            reduce using rule 24 (expression -> char .)


state 11

    (25) expression -> if . expression then expression
    (33) expression -> if . expression then expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 47
    id_list                        shift and go to state 17

state 12

    (43) expression -> - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 48
    id_list                        shift and go to state 17

state 13

    (32) expression -> [ . expression_list ]
    (37) expression_list -> . expression
    (38) expression_list -> . expression , expression_list
    (39) expression_list -> . ID , expression_list
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    ID              shift and go to state 46
    float           shift and go to state 2
    local           shift and go to state 3
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression_list                shift and go to state 49
    expression                     shift and go to state 50
    id_list                        shift and go to state 17

state 14

    (35) expression -> not . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 51
    id_list                        shift and go to state 17

state 15

    (36) expression -> loop . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 52
    id_list                        shift and go to state 17

state 16

    (40) expression -> NUMBER .

    and             reduce using rule 40 (expression -> NUMBER .)
    eq              reduce using rule 40 (expression -> NUMBER .)
    =               reduce using rule 40 (expression -> NUMBER .)
    >               reduce using rule 40 (expression -> NUMBER .)
    <               reduce using rule 40 (expression -> NUMBER .)
    ge              reduce using rule 40 (expression -> NUMBER .)
    le              reduce using rule 40 (expression -> NUMBER .)
    neqs            reduce using rule 40 (expression -> NUMBER .)
    or              reduce using rule 40 (expression -> NUMBER .)
    nand            reduce using rule 40 (expression -> NUMBER .)
    +               reduce using rule 40 (expression -> NUMBER .)
    -               reduce using rule 40 (expression -> NUMBER .)
    *               reduce using rule 40 (expression -> NUMBER .)
    /               reduce using rule 40 (expression -> NUMBER .)
    $end            reduce using rule 40 (expression -> NUMBER .)
    }               reduce using rule 40 (expression -> NUMBER .)
    ;               reduce using rule 40 (expression -> NUMBER .)
    )               reduce using rule 40 (expression -> NUMBER .)
    ,               reduce using rule 40 (expression -> NUMBER .)
    then            reduce using rule 40 (expression -> NUMBER .)
    ]               reduce using rule 40 (expression -> NUMBER .)
    do              reduce using rule 40 (expression -> NUMBER .)
    in              reduce using rule 40 (expression -> NUMBER .)
    else            reduce using rule 40 (expression -> NUMBER .)


state 17

    (41) expression -> id_list . lambda expression

    lambda          shift and go to state 53


state 18

    (42) expression -> BOOL .

    and             reduce using rule 42 (expression -> BOOL .)
    eq              reduce using rule 42 (expression -> BOOL .)
    =               reduce using rule 42 (expression -> BOOL .)
    >               reduce using rule 42 (expression -> BOOL .)
    <               reduce using rule 42 (expression -> BOOL .)
    ge              reduce using rule 42 (expression -> BOOL .)
    le              reduce using rule 42 (expression -> BOOL .)
    neqs            reduce using rule 42 (expression -> BOOL .)
    or              reduce using rule 42 (expression -> BOOL .)
    nand            reduce using rule 42 (expression -> BOOL .)
    +               reduce using rule 42 (expression -> BOOL .)
    -               reduce using rule 42 (expression -> BOOL .)
    *               reduce using rule 42 (expression -> BOOL .)
    /               reduce using rule 42 (expression -> BOOL .)
    $end            reduce using rule 42 (expression -> BOOL .)
    }               reduce using rule 42 (expression -> BOOL .)
    ;               reduce using rule 42 (expression -> BOOL .)
    )               reduce using rule 42 (expression -> BOOL .)
    ,               reduce using rule 42 (expression -> BOOL .)
    then            reduce using rule 42 (expression -> BOOL .)
    ]               reduce using rule 42 (expression -> BOOL .)
    do              reduce using rule 42 (expression -> BOOL .)
    in              reduce using rule 42 (expression -> BOOL .)
    else            reduce using rule 42 (expression -> BOOL .)


state 19

    (45) expression -> for . expression ; expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 54
    id_list                        shift and go to state 17

state 20

    (46) expression -> while . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 55
    id_list                        shift and go to state 17

state 21

    (7) expression -> expression and . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 56
    id_list                        shift and go to state 17

state 22

    (8) expression -> expression eq . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 57
    id_list                        shift and go to state 17

state 23

    (9) expression -> expression = . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 58
    id_list                        shift and go to state 17

state 24

    (10) expression -> expression > . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 59
    id_list                        shift and go to state 17

state 25

    (11) expression -> expression < . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 60
    id_list                        shift and go to state 17

state 26

    (12) expression -> expression ge . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 61
    id_list                        shift and go to state 17

state 27

    (13) expression -> expression le . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 62
    id_list                        shift and go to state 17

state 28

    (14) expression -> expression neqs . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 63
    id_list                        shift and go to state 17

state 29

    (15) expression -> expression or . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 64
    id_list                        shift and go to state 17

state 30

    (16) expression -> expression nand . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 65
    id_list                        shift and go to state 17

state 31

    (28) expression -> expression + . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 66
    id_list                        shift and go to state 17

state 32

    (29) expression -> expression - . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 67
    id_list                        shift and go to state 17

state 33

    (30) expression -> expression * . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 68
    id_list                        shift and go to state 17

state 34

    (31) expression -> expression / . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 69
    id_list                        shift and go to state 17

state 35

    (2) expression -> local ID . assign expression in expression

    assign          shift and go to state 70


state 36

    (5) expression -> ID lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 71
    id_list                        shift and go to state 17

state 37

    (19) expression -> ID assign . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 72
    id_list                        shift and go to state 17

state 38

    (21) expression -> ID ( . expression )
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 73
    id_list                        shift and go to state 17

state 39

    (26) id_list -> ID , . id_list
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    ID              shift and go to state 74

    id_list                        shift and go to state 75

state 40

    (4) expression -> import ID . as ID
    (20) expression -> import ID .

    as              shift and go to state 76
    and             reduce using rule 20 (expression -> import ID .)
    eq              reduce using rule 20 (expression -> import ID .)
    =               reduce using rule 20 (expression -> import ID .)
    >               reduce using rule 20 (expression -> import ID .)
    <               reduce using rule 20 (expression -> import ID .)
    ge              reduce using rule 20 (expression -> import ID .)
    le              reduce using rule 20 (expression -> import ID .)
    neqs            reduce using rule 20 (expression -> import ID .)
    or              reduce using rule 20 (expression -> import ID .)
    nand            reduce using rule 20 (expression -> import ID .)
    +               reduce using rule 20 (expression -> import ID .)
    -               reduce using rule 20 (expression -> import ID .)
    *               reduce using rule 20 (expression -> import ID .)
    /               reduce using rule 20 (expression -> import ID .)
    $end            reduce using rule 20 (expression -> import ID .)
    }               reduce using rule 20 (expression -> import ID .)
    ;               reduce using rule 20 (expression -> import ID .)
    )               reduce using rule 20 (expression -> import ID .)
    ,               reduce using rule 20 (expression -> import ID .)
    then            reduce using rule 20 (expression -> import ID .)
    ]               reduce using rule 20 (expression -> import ID .)
    do              reduce using rule 20 (expression -> import ID .)
    in              reduce using rule 20 (expression -> import ID .)
    else            reduce using rule 20 (expression -> import ID .)


state 41

    (6) expression -> { sequence . }
    (22) sequence -> sequence . ; expression

    }               shift and go to state 77
    ;               shift and go to state 78


state 42

    (23) sequence -> expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    }               reduce using rule 23 (sequence -> expression .)
    ;               reduce using rule 23 (sequence -> expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 43

    (18) expression -> letrec ID . assign expression in expression

    assign          shift and go to state 79


state 44

    (34) expression -> ( expression_list . )

    )               shift and go to state 80


state 45

    (44) expression -> ( expression . )
    (37) expression_list -> expression .
    (38) expression_list -> expression . , expression_list
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 81
    ,               shift and go to state 82
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! )               [ reduce using rule 37 (expression_list -> expression .) ]


state 46

    (39) expression_list -> ID . , expression_list
    (3) expression -> ID .
    (5) expression -> ID . lambda expression
    (19) expression -> ID . assign expression
    (21) expression -> ID . ( expression )
    (26) id_list -> ID . , id_list
    (27) id_list -> ID .

  ! shift/reduce conflict for , resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    ,               shift and go to state 83
    )               reduce using rule 3 (expression -> ID .)
    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    lambda          shift and go to state 36
    assign          shift and go to state 37
    (               shift and go to state 38

  ! ,               [ reduce using rule 3 (expression -> ID .) ]
  ! lambda          [ reduce using rule 27 (id_list -> ID .) ]


state 47

    (25) expression -> if expression . then expression
    (33) expression -> if expression . then expression else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    then            shift and go to state 84
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 48

    (43) expression -> - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 43 (expression -> - expression .)
    eq              reduce using rule 43 (expression -> - expression .)
    =               reduce using rule 43 (expression -> - expression .)
    >               reduce using rule 43 (expression -> - expression .)
    <               reduce using rule 43 (expression -> - expression .)
    ge              reduce using rule 43 (expression -> - expression .)
    le              reduce using rule 43 (expression -> - expression .)
    neqs            reduce using rule 43 (expression -> - expression .)
    or              reduce using rule 43 (expression -> - expression .)
    nand            reduce using rule 43 (expression -> - expression .)
    +               reduce using rule 43 (expression -> - expression .)
    -               reduce using rule 43 (expression -> - expression .)
    *               reduce using rule 43 (expression -> - expression .)
    /               reduce using rule 43 (expression -> - expression .)
    $end            reduce using rule 43 (expression -> - expression .)
    }               reduce using rule 43 (expression -> - expression .)
    ;               reduce using rule 43 (expression -> - expression .)
    )               reduce using rule 43 (expression -> - expression .)
    ,               reduce using rule 43 (expression -> - expression .)
    then            reduce using rule 43 (expression -> - expression .)
    ]               reduce using rule 43 (expression -> - expression .)
    do              reduce using rule 43 (expression -> - expression .)
    in              reduce using rule 43 (expression -> - expression .)
    else            reduce using rule 43 (expression -> - expression .)

  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]


state 49

    (32) expression -> [ expression_list . ]

    ]               shift and go to state 85


state 50

    (37) expression_list -> expression .
    (38) expression_list -> expression . , expression_list
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ]               reduce using rule 37 (expression_list -> expression .)
    )               reduce using rule 37 (expression_list -> expression .)
    ,               shift and go to state 82
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 51

    (35) expression -> not expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 35 (expression -> not expression .)
    eq              reduce using rule 35 (expression -> not expression .)
    =               reduce using rule 35 (expression -> not expression .)
    neqs            reduce using rule 35 (expression -> not expression .)
    or              reduce using rule 35 (expression -> not expression .)
    nand            reduce using rule 35 (expression -> not expression .)
    $end            reduce using rule 35 (expression -> not expression .)
    }               reduce using rule 35 (expression -> not expression .)
    ;               reduce using rule 35 (expression -> not expression .)
    )               reduce using rule 35 (expression -> not expression .)
    ,               reduce using rule 35 (expression -> not expression .)
    then            reduce using rule 35 (expression -> not expression .)
    ]               reduce using rule 35 (expression -> not expression .)
    do              reduce using rule 35 (expression -> not expression .)
    in              reduce using rule 35 (expression -> not expression .)
    else            reduce using rule 35 (expression -> not expression .)
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! >               [ reduce using rule 35 (expression -> not expression .) ]
  ! <               [ reduce using rule 35 (expression -> not expression .) ]
  ! ge              [ reduce using rule 35 (expression -> not expression .) ]
  ! le              [ reduce using rule 35 (expression -> not expression .) ]
  ! +               [ reduce using rule 35 (expression -> not expression .) ]
  ! -               [ reduce using rule 35 (expression -> not expression .) ]
  ! *               [ reduce using rule 35 (expression -> not expression .) ]
  ! /               [ reduce using rule 35 (expression -> not expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 52

    (36) expression -> loop expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 86
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 53

    (41) expression -> id_list lambda . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    id_list                        shift and go to state 17
    expression                     shift and go to state 87

state 54

    (45) expression -> for expression . ; expression ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ;               shift and go to state 88
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 55

    (46) expression -> while expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 89
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 56

    (7) expression -> expression and expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 7 (expression -> expression and expression .)
    or              reduce using rule 7 (expression -> expression and expression .)
    nand            reduce using rule 7 (expression -> expression and expression .)
    $end            reduce using rule 7 (expression -> expression and expression .)
    }               reduce using rule 7 (expression -> expression and expression .)
    ;               reduce using rule 7 (expression -> expression and expression .)
    )               reduce using rule 7 (expression -> expression and expression .)
    ,               reduce using rule 7 (expression -> expression and expression .)
    then            reduce using rule 7 (expression -> expression and expression .)
    ]               reduce using rule 7 (expression -> expression and expression .)
    do              reduce using rule 7 (expression -> expression and expression .)
    in              reduce using rule 7 (expression -> expression and expression .)
    else            reduce using rule 7 (expression -> expression and expression .)
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! eq              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! =               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! >               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! <               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! ge              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! le              [ reduce using rule 7 (expression -> expression and expression .) ]
  ! neqs            [ reduce using rule 7 (expression -> expression and expression .) ]
  ! +               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! -               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! *               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression and expression .) ]
  ! and             [ shift and go to state 21 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 57

    (8) expression -> expression eq expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 8 (expression -> expression eq expression .)
    eq              reduce using rule 8 (expression -> expression eq expression .)
    =               reduce using rule 8 (expression -> expression eq expression .)
    neqs            reduce using rule 8 (expression -> expression eq expression .)
    or              reduce using rule 8 (expression -> expression eq expression .)
    nand            reduce using rule 8 (expression -> expression eq expression .)
    $end            reduce using rule 8 (expression -> expression eq expression .)
    }               reduce using rule 8 (expression -> expression eq expression .)
    ;               reduce using rule 8 (expression -> expression eq expression .)
    )               reduce using rule 8 (expression -> expression eq expression .)
    ,               reduce using rule 8 (expression -> expression eq expression .)
    then            reduce using rule 8 (expression -> expression eq expression .)
    ]               reduce using rule 8 (expression -> expression eq expression .)
    do              reduce using rule 8 (expression -> expression eq expression .)
    in              reduce using rule 8 (expression -> expression eq expression .)
    else            reduce using rule 8 (expression -> expression eq expression .)
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! >               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! <               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! ge              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! le              [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! +               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! -               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! *               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression eq expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 58

    (9) expression -> expression = expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 9 (expression -> expression = expression .)
    eq              reduce using rule 9 (expression -> expression = expression .)
    =               reduce using rule 9 (expression -> expression = expression .)
    neqs            reduce using rule 9 (expression -> expression = expression .)
    or              reduce using rule 9 (expression -> expression = expression .)
    nand            reduce using rule 9 (expression -> expression = expression .)
    $end            reduce using rule 9 (expression -> expression = expression .)
    }               reduce using rule 9 (expression -> expression = expression .)
    ;               reduce using rule 9 (expression -> expression = expression .)
    )               reduce using rule 9 (expression -> expression = expression .)
    ,               reduce using rule 9 (expression -> expression = expression .)
    then            reduce using rule 9 (expression -> expression = expression .)
    ]               reduce using rule 9 (expression -> expression = expression .)
    do              reduce using rule 9 (expression -> expression = expression .)
    in              reduce using rule 9 (expression -> expression = expression .)
    else            reduce using rule 9 (expression -> expression = expression .)
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! >               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! ge              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! le              [ reduce using rule 9 (expression -> expression = expression .) ]
  ! +               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! -               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! *               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression = expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 59

    (10) expression -> expression > expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 10 (expression -> expression > expression .)
    eq              reduce using rule 10 (expression -> expression > expression .)
    =               reduce using rule 10 (expression -> expression > expression .)
    >               reduce using rule 10 (expression -> expression > expression .)
    <               reduce using rule 10 (expression -> expression > expression .)
    ge              reduce using rule 10 (expression -> expression > expression .)
    le              reduce using rule 10 (expression -> expression > expression .)
    neqs            reduce using rule 10 (expression -> expression > expression .)
    or              reduce using rule 10 (expression -> expression > expression .)
    nand            reduce using rule 10 (expression -> expression > expression .)
    $end            reduce using rule 10 (expression -> expression > expression .)
    }               reduce using rule 10 (expression -> expression > expression .)
    ;               reduce using rule 10 (expression -> expression > expression .)
    )               reduce using rule 10 (expression -> expression > expression .)
    ,               reduce using rule 10 (expression -> expression > expression .)
    then            reduce using rule 10 (expression -> expression > expression .)
    ]               reduce using rule 10 (expression -> expression > expression .)
    do              reduce using rule 10 (expression -> expression > expression .)
    in              reduce using rule 10 (expression -> expression > expression .)
    else            reduce using rule 10 (expression -> expression > expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! +               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 60

    (11) expression -> expression < expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 11 (expression -> expression < expression .)
    eq              reduce using rule 11 (expression -> expression < expression .)
    =               reduce using rule 11 (expression -> expression < expression .)
    >               reduce using rule 11 (expression -> expression < expression .)
    <               reduce using rule 11 (expression -> expression < expression .)
    ge              reduce using rule 11 (expression -> expression < expression .)
    le              reduce using rule 11 (expression -> expression < expression .)
    neqs            reduce using rule 11 (expression -> expression < expression .)
    or              reduce using rule 11 (expression -> expression < expression .)
    nand            reduce using rule 11 (expression -> expression < expression .)
    $end            reduce using rule 11 (expression -> expression < expression .)
    }               reduce using rule 11 (expression -> expression < expression .)
    ;               reduce using rule 11 (expression -> expression < expression .)
    )               reduce using rule 11 (expression -> expression < expression .)
    ,               reduce using rule 11 (expression -> expression < expression .)
    then            reduce using rule 11 (expression -> expression < expression .)
    ]               reduce using rule 11 (expression -> expression < expression .)
    do              reduce using rule 11 (expression -> expression < expression .)
    in              reduce using rule 11 (expression -> expression < expression .)
    else            reduce using rule 11 (expression -> expression < expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! +               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 61

    (12) expression -> expression ge expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 12 (expression -> expression ge expression .)
    eq              reduce using rule 12 (expression -> expression ge expression .)
    =               reduce using rule 12 (expression -> expression ge expression .)
    >               reduce using rule 12 (expression -> expression ge expression .)
    <               reduce using rule 12 (expression -> expression ge expression .)
    ge              reduce using rule 12 (expression -> expression ge expression .)
    le              reduce using rule 12 (expression -> expression ge expression .)
    neqs            reduce using rule 12 (expression -> expression ge expression .)
    or              reduce using rule 12 (expression -> expression ge expression .)
    nand            reduce using rule 12 (expression -> expression ge expression .)
    $end            reduce using rule 12 (expression -> expression ge expression .)
    }               reduce using rule 12 (expression -> expression ge expression .)
    ;               reduce using rule 12 (expression -> expression ge expression .)
    )               reduce using rule 12 (expression -> expression ge expression .)
    ,               reduce using rule 12 (expression -> expression ge expression .)
    then            reduce using rule 12 (expression -> expression ge expression .)
    ]               reduce using rule 12 (expression -> expression ge expression .)
    do              reduce using rule 12 (expression -> expression ge expression .)
    in              reduce using rule 12 (expression -> expression ge expression .)
    else            reduce using rule 12 (expression -> expression ge expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! +               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression ge expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 62

    (13) expression -> expression le expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 13 (expression -> expression le expression .)
    eq              reduce using rule 13 (expression -> expression le expression .)
    =               reduce using rule 13 (expression -> expression le expression .)
    >               reduce using rule 13 (expression -> expression le expression .)
    <               reduce using rule 13 (expression -> expression le expression .)
    ge              reduce using rule 13 (expression -> expression le expression .)
    le              reduce using rule 13 (expression -> expression le expression .)
    neqs            reduce using rule 13 (expression -> expression le expression .)
    or              reduce using rule 13 (expression -> expression le expression .)
    nand            reduce using rule 13 (expression -> expression le expression .)
    $end            reduce using rule 13 (expression -> expression le expression .)
    }               reduce using rule 13 (expression -> expression le expression .)
    ;               reduce using rule 13 (expression -> expression le expression .)
    )               reduce using rule 13 (expression -> expression le expression .)
    ,               reduce using rule 13 (expression -> expression le expression .)
    then            reduce using rule 13 (expression -> expression le expression .)
    ]               reduce using rule 13 (expression -> expression le expression .)
    do              reduce using rule 13 (expression -> expression le expression .)
    in              reduce using rule 13 (expression -> expression le expression .)
    else            reduce using rule 13 (expression -> expression le expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! +               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression le expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 63

    (14) expression -> expression neqs expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 14 (expression -> expression neqs expression .)
    eq              reduce using rule 14 (expression -> expression neqs expression .)
    =               reduce using rule 14 (expression -> expression neqs expression .)
    neqs            reduce using rule 14 (expression -> expression neqs expression .)
    or              reduce using rule 14 (expression -> expression neqs expression .)
    nand            reduce using rule 14 (expression -> expression neqs expression .)
    $end            reduce using rule 14 (expression -> expression neqs expression .)
    }               reduce using rule 14 (expression -> expression neqs expression .)
    ;               reduce using rule 14 (expression -> expression neqs expression .)
    )               reduce using rule 14 (expression -> expression neqs expression .)
    ,               reduce using rule 14 (expression -> expression neqs expression .)
    then            reduce using rule 14 (expression -> expression neqs expression .)
    ]               reduce using rule 14 (expression -> expression neqs expression .)
    do              reduce using rule 14 (expression -> expression neqs expression .)
    in              reduce using rule 14 (expression -> expression neqs expression .)
    else            reduce using rule 14 (expression -> expression neqs expression .)
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! >               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! <               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! ge              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! le              [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! +               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression neqs expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 64

    (15) expression -> expression or expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    or              reduce using rule 15 (expression -> expression or expression .)
    $end            reduce using rule 15 (expression -> expression or expression .)
    }               reduce using rule 15 (expression -> expression or expression .)
    ;               reduce using rule 15 (expression -> expression or expression .)
    )               reduce using rule 15 (expression -> expression or expression .)
    ,               reduce using rule 15 (expression -> expression or expression .)
    then            reduce using rule 15 (expression -> expression or expression .)
    ]               reduce using rule 15 (expression -> expression or expression .)
    do              reduce using rule 15 (expression -> expression or expression .)
    in              reduce using rule 15 (expression -> expression or expression .)
    else            reduce using rule 15 (expression -> expression or expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 15 (expression -> expression or expression .) ]
  ! eq              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! =               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! >               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! <               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! ge              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! le              [ reduce using rule 15 (expression -> expression or expression .) ]
  ! neqs            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! nand            [ reduce using rule 15 (expression -> expression or expression .) ]
  ! +               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! -               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! *               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression or expression .) ]
  ! or              [ shift and go to state 29 ]


state 65

    (16) expression -> expression nand expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 16 (expression -> expression nand expression .)
    or              reduce using rule 16 (expression -> expression nand expression .)
    nand            reduce using rule 16 (expression -> expression nand expression .)
    $end            reduce using rule 16 (expression -> expression nand expression .)
    }               reduce using rule 16 (expression -> expression nand expression .)
    ;               reduce using rule 16 (expression -> expression nand expression .)
    )               reduce using rule 16 (expression -> expression nand expression .)
    ,               reduce using rule 16 (expression -> expression nand expression .)
    then            reduce using rule 16 (expression -> expression nand expression .)
    ]               reduce using rule 16 (expression -> expression nand expression .)
    do              reduce using rule 16 (expression -> expression nand expression .)
    in              reduce using rule 16 (expression -> expression nand expression .)
    else            reduce using rule 16 (expression -> expression nand expression .)
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! eq              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! =               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! >               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! <               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! ge              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! le              [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! neqs            [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! +               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! -               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! *               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression nand expression .) ]
  ! and             [ shift and go to state 21 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]


state 66

    (28) expression -> expression + expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 28 (expression -> expression + expression .)
    eq              reduce using rule 28 (expression -> expression + expression .)
    =               reduce using rule 28 (expression -> expression + expression .)
    >               reduce using rule 28 (expression -> expression + expression .)
    <               reduce using rule 28 (expression -> expression + expression .)
    ge              reduce using rule 28 (expression -> expression + expression .)
    le              reduce using rule 28 (expression -> expression + expression .)
    neqs            reduce using rule 28 (expression -> expression + expression .)
    or              reduce using rule 28 (expression -> expression + expression .)
    nand            reduce using rule 28 (expression -> expression + expression .)
    +               reduce using rule 28 (expression -> expression + expression .)
    -               reduce using rule 28 (expression -> expression + expression .)
    $end            reduce using rule 28 (expression -> expression + expression .)
    }               reduce using rule 28 (expression -> expression + expression .)
    ;               reduce using rule 28 (expression -> expression + expression .)
    )               reduce using rule 28 (expression -> expression + expression .)
    ,               reduce using rule 28 (expression -> expression + expression .)
    then            reduce using rule 28 (expression -> expression + expression .)
    ]               reduce using rule 28 (expression -> expression + expression .)
    do              reduce using rule 28 (expression -> expression + expression .)
    in              reduce using rule 28 (expression -> expression + expression .)
    else            reduce using rule 28 (expression -> expression + expression .)
    *               shift and go to state 33
    /               shift and go to state 34

  ! *               [ reduce using rule 28 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression + expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]


state 67

    (29) expression -> expression - expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 29 (expression -> expression - expression .)
    eq              reduce using rule 29 (expression -> expression - expression .)
    =               reduce using rule 29 (expression -> expression - expression .)
    >               reduce using rule 29 (expression -> expression - expression .)
    <               reduce using rule 29 (expression -> expression - expression .)
    ge              reduce using rule 29 (expression -> expression - expression .)
    le              reduce using rule 29 (expression -> expression - expression .)
    neqs            reduce using rule 29 (expression -> expression - expression .)
    or              reduce using rule 29 (expression -> expression - expression .)
    nand            reduce using rule 29 (expression -> expression - expression .)
    +               reduce using rule 29 (expression -> expression - expression .)
    -               reduce using rule 29 (expression -> expression - expression .)
    $end            reduce using rule 29 (expression -> expression - expression .)
    }               reduce using rule 29 (expression -> expression - expression .)
    ;               reduce using rule 29 (expression -> expression - expression .)
    )               reduce using rule 29 (expression -> expression - expression .)
    ,               reduce using rule 29 (expression -> expression - expression .)
    then            reduce using rule 29 (expression -> expression - expression .)
    ]               reduce using rule 29 (expression -> expression - expression .)
    do              reduce using rule 29 (expression -> expression - expression .)
    in              reduce using rule 29 (expression -> expression - expression .)
    else            reduce using rule 29 (expression -> expression - expression .)
    *               shift and go to state 33
    /               shift and go to state 34

  ! *               [ reduce using rule 29 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression - expression .) ]
  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]


state 68

    (30) expression -> expression * expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 30 (expression -> expression * expression .)
    eq              reduce using rule 30 (expression -> expression * expression .)
    =               reduce using rule 30 (expression -> expression * expression .)
    >               reduce using rule 30 (expression -> expression * expression .)
    <               reduce using rule 30 (expression -> expression * expression .)
    ge              reduce using rule 30 (expression -> expression * expression .)
    le              reduce using rule 30 (expression -> expression * expression .)
    neqs            reduce using rule 30 (expression -> expression * expression .)
    or              reduce using rule 30 (expression -> expression * expression .)
    nand            reduce using rule 30 (expression -> expression * expression .)
    +               reduce using rule 30 (expression -> expression * expression .)
    -               reduce using rule 30 (expression -> expression * expression .)
    *               reduce using rule 30 (expression -> expression * expression .)
    /               reduce using rule 30 (expression -> expression * expression .)
    $end            reduce using rule 30 (expression -> expression * expression .)
    }               reduce using rule 30 (expression -> expression * expression .)
    ;               reduce using rule 30 (expression -> expression * expression .)
    )               reduce using rule 30 (expression -> expression * expression .)
    ,               reduce using rule 30 (expression -> expression * expression .)
    then            reduce using rule 30 (expression -> expression * expression .)
    ]               reduce using rule 30 (expression -> expression * expression .)
    do              reduce using rule 30 (expression -> expression * expression .)
    in              reduce using rule 30 (expression -> expression * expression .)
    else            reduce using rule 30 (expression -> expression * expression .)

  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]


state 69

    (31) expression -> expression / expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    and             reduce using rule 31 (expression -> expression / expression .)
    eq              reduce using rule 31 (expression -> expression / expression .)
    =               reduce using rule 31 (expression -> expression / expression .)
    >               reduce using rule 31 (expression -> expression / expression .)
    <               reduce using rule 31 (expression -> expression / expression .)
    ge              reduce using rule 31 (expression -> expression / expression .)
    le              reduce using rule 31 (expression -> expression / expression .)
    neqs            reduce using rule 31 (expression -> expression / expression .)
    or              reduce using rule 31 (expression -> expression / expression .)
    nand            reduce using rule 31 (expression -> expression / expression .)
    +               reduce using rule 31 (expression -> expression / expression .)
    -               reduce using rule 31 (expression -> expression / expression .)
    *               reduce using rule 31 (expression -> expression / expression .)
    /               reduce using rule 31 (expression -> expression / expression .)
    $end            reduce using rule 31 (expression -> expression / expression .)
    }               reduce using rule 31 (expression -> expression / expression .)
    ;               reduce using rule 31 (expression -> expression / expression .)
    )               reduce using rule 31 (expression -> expression / expression .)
    ,               reduce using rule 31 (expression -> expression / expression .)
    then            reduce using rule 31 (expression -> expression / expression .)
    ]               reduce using rule 31 (expression -> expression / expression .)
    do              reduce using rule 31 (expression -> expression / expression .)
    in              reduce using rule 31 (expression -> expression / expression .)
    else            reduce using rule 31 (expression -> expression / expression .)

  ! and             [ shift and go to state 21 ]
  ! eq              [ shift and go to state 22 ]
  ! =               [ shift and go to state 23 ]
  ! >               [ shift and go to state 24 ]
  ! <               [ shift and go to state 25 ]
  ! ge              [ shift and go to state 26 ]
  ! le              [ shift and go to state 27 ]
  ! neqs            [ shift and go to state 28 ]
  ! or              [ shift and go to state 29 ]
  ! nand            [ shift and go to state 30 ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]


state 70

    (2) expression -> local ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 90
    id_list                        shift and go to state 17

state 71

    (5) expression -> ID lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> ID lambda expression .)
    }               reduce using rule 5 (expression -> ID lambda expression .)
    ;               reduce using rule 5 (expression -> ID lambda expression .)
    )               reduce using rule 5 (expression -> ID lambda expression .)
    ,               reduce using rule 5 (expression -> ID lambda expression .)
    then            reduce using rule 5 (expression -> ID lambda expression .)
    ]               reduce using rule 5 (expression -> ID lambda expression .)
    do              reduce using rule 5 (expression -> ID lambda expression .)
    in              reduce using rule 5 (expression -> ID lambda expression .)
    else            reduce using rule 5 (expression -> ID lambda expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! eq              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! =               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! >               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! <               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! ge              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! le              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! neqs            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! or              [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! nand            [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! +               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! -               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! *               [ reduce using rule 5 (expression -> ID lambda expression .) ]
  ! /               [ reduce using rule 5 (expression -> ID lambda expression .) ]


state 72

    (19) expression -> ID assign expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 19 (expression -> ID assign expression .)
    }               reduce using rule 19 (expression -> ID assign expression .)
    ;               reduce using rule 19 (expression -> ID assign expression .)
    )               reduce using rule 19 (expression -> ID assign expression .)
    ,               reduce using rule 19 (expression -> ID assign expression .)
    then            reduce using rule 19 (expression -> ID assign expression .)
    ]               reduce using rule 19 (expression -> ID assign expression .)
    do              reduce using rule 19 (expression -> ID assign expression .)
    in              reduce using rule 19 (expression -> ID assign expression .)
    else            reduce using rule 19 (expression -> ID assign expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! eq              [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! =               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! >               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! <               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! ge              [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! le              [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! neqs            [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! or              [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! nand            [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! +               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! -               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! *               [ reduce using rule 19 (expression -> ID assign expression .) ]
  ! /               [ reduce using rule 19 (expression -> ID assign expression .) ]


state 73

    (21) expression -> ID ( expression . )
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    )               shift and go to state 91
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 74

    (26) id_list -> ID . , id_list
    (27) id_list -> ID .

    ,               shift and go to state 39
    lambda          reduce using rule 27 (id_list -> ID .)


state 75

    (26) id_list -> ID , id_list .

    lambda          reduce using rule 26 (id_list -> ID , id_list .)


state 76

    (4) expression -> import ID as . ID

    ID              shift and go to state 92


state 77

    (6) expression -> { sequence } .

    and             reduce using rule 6 (expression -> { sequence } .)
    eq              reduce using rule 6 (expression -> { sequence } .)
    =               reduce using rule 6 (expression -> { sequence } .)
    >               reduce using rule 6 (expression -> { sequence } .)
    <               reduce using rule 6 (expression -> { sequence } .)
    ge              reduce using rule 6 (expression -> { sequence } .)
    le              reduce using rule 6 (expression -> { sequence } .)
    neqs            reduce using rule 6 (expression -> { sequence } .)
    or              reduce using rule 6 (expression -> { sequence } .)
    nand            reduce using rule 6 (expression -> { sequence } .)
    +               reduce using rule 6 (expression -> { sequence } .)
    -               reduce using rule 6 (expression -> { sequence } .)
    *               reduce using rule 6 (expression -> { sequence } .)
    /               reduce using rule 6 (expression -> { sequence } .)
    $end            reduce using rule 6 (expression -> { sequence } .)
    }               reduce using rule 6 (expression -> { sequence } .)
    ;               reduce using rule 6 (expression -> { sequence } .)
    )               reduce using rule 6 (expression -> { sequence } .)
    ,               reduce using rule 6 (expression -> { sequence } .)
    then            reduce using rule 6 (expression -> { sequence } .)
    ]               reduce using rule 6 (expression -> { sequence } .)
    do              reduce using rule 6 (expression -> { sequence } .)
    in              reduce using rule 6 (expression -> { sequence } .)
    else            reduce using rule 6 (expression -> { sequence } .)


state 78

    (22) sequence -> sequence ; . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 93
    id_list                        shift and go to state 17

state 79

    (18) expression -> letrec ID assign . expression in expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 94
    id_list                        shift and go to state 17

state 80

    (34) expression -> ( expression_list ) .

    and             reduce using rule 34 (expression -> ( expression_list ) .)
    eq              reduce using rule 34 (expression -> ( expression_list ) .)
    =               reduce using rule 34 (expression -> ( expression_list ) .)
    >               reduce using rule 34 (expression -> ( expression_list ) .)
    <               reduce using rule 34 (expression -> ( expression_list ) .)
    ge              reduce using rule 34 (expression -> ( expression_list ) .)
    le              reduce using rule 34 (expression -> ( expression_list ) .)
    neqs            reduce using rule 34 (expression -> ( expression_list ) .)
    or              reduce using rule 34 (expression -> ( expression_list ) .)
    nand            reduce using rule 34 (expression -> ( expression_list ) .)
    +               reduce using rule 34 (expression -> ( expression_list ) .)
    -               reduce using rule 34 (expression -> ( expression_list ) .)
    *               reduce using rule 34 (expression -> ( expression_list ) .)
    /               reduce using rule 34 (expression -> ( expression_list ) .)
    $end            reduce using rule 34 (expression -> ( expression_list ) .)
    }               reduce using rule 34 (expression -> ( expression_list ) .)
    ;               reduce using rule 34 (expression -> ( expression_list ) .)
    )               reduce using rule 34 (expression -> ( expression_list ) .)
    ,               reduce using rule 34 (expression -> ( expression_list ) .)
    then            reduce using rule 34 (expression -> ( expression_list ) .)
    ]               reduce using rule 34 (expression -> ( expression_list ) .)
    do              reduce using rule 34 (expression -> ( expression_list ) .)
    in              reduce using rule 34 (expression -> ( expression_list ) .)
    else            reduce using rule 34 (expression -> ( expression_list ) .)


state 81

    (44) expression -> ( expression ) .

    and             reduce using rule 44 (expression -> ( expression ) .)
    eq              reduce using rule 44 (expression -> ( expression ) .)
    =               reduce using rule 44 (expression -> ( expression ) .)
    >               reduce using rule 44 (expression -> ( expression ) .)
    <               reduce using rule 44 (expression -> ( expression ) .)
    ge              reduce using rule 44 (expression -> ( expression ) .)
    le              reduce using rule 44 (expression -> ( expression ) .)
    neqs            reduce using rule 44 (expression -> ( expression ) .)
    or              reduce using rule 44 (expression -> ( expression ) .)
    nand            reduce using rule 44 (expression -> ( expression ) .)
    +               reduce using rule 44 (expression -> ( expression ) .)
    -               reduce using rule 44 (expression -> ( expression ) .)
    *               reduce using rule 44 (expression -> ( expression ) .)
    /               reduce using rule 44 (expression -> ( expression ) .)
    $end            reduce using rule 44 (expression -> ( expression ) .)
    }               reduce using rule 44 (expression -> ( expression ) .)
    ;               reduce using rule 44 (expression -> ( expression ) .)
    )               reduce using rule 44 (expression -> ( expression ) .)
    ,               reduce using rule 44 (expression -> ( expression ) .)
    then            reduce using rule 44 (expression -> ( expression ) .)
    ]               reduce using rule 44 (expression -> ( expression ) .)
    do              reduce using rule 44 (expression -> ( expression ) .)
    in              reduce using rule 44 (expression -> ( expression ) .)
    else            reduce using rule 44 (expression -> ( expression ) .)


state 82

    (38) expression_list -> expression , . expression_list
    (37) expression_list -> . expression
    (38) expression_list -> . expression , expression_list
    (39) expression_list -> . ID , expression_list
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    ID              shift and go to state 46
    float           shift and go to state 2
    local           shift and go to state 3
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 50
    expression_list                shift and go to state 95
    id_list                        shift and go to state 17

state 83

    (39) expression_list -> ID , . expression_list
    (26) id_list -> ID , . id_list
    (37) expression_list -> . expression
    (38) expression_list -> . expression , expression_list
    (39) expression_list -> . ID , expression_list
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression

    ID              shift and go to state 96
    float           shift and go to state 2
    local           shift and go to state 3
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression_list                shift and go to state 97
    id_list                        shift and go to state 98
    expression                     shift and go to state 50

state 84

    (25) expression -> if expression then . expression
    (33) expression -> if expression then . expression else expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 99
    id_list                        shift and go to state 17

state 85

    (32) expression -> [ expression_list ] .

    and             reduce using rule 32 (expression -> [ expression_list ] .)
    eq              reduce using rule 32 (expression -> [ expression_list ] .)
    =               reduce using rule 32 (expression -> [ expression_list ] .)
    >               reduce using rule 32 (expression -> [ expression_list ] .)
    <               reduce using rule 32 (expression -> [ expression_list ] .)
    ge              reduce using rule 32 (expression -> [ expression_list ] .)
    le              reduce using rule 32 (expression -> [ expression_list ] .)
    neqs            reduce using rule 32 (expression -> [ expression_list ] .)
    or              reduce using rule 32 (expression -> [ expression_list ] .)
    nand            reduce using rule 32 (expression -> [ expression_list ] .)
    +               reduce using rule 32 (expression -> [ expression_list ] .)
    -               reduce using rule 32 (expression -> [ expression_list ] .)
    *               reduce using rule 32 (expression -> [ expression_list ] .)
    /               reduce using rule 32 (expression -> [ expression_list ] .)
    $end            reduce using rule 32 (expression -> [ expression_list ] .)
    }               reduce using rule 32 (expression -> [ expression_list ] .)
    ;               reduce using rule 32 (expression -> [ expression_list ] .)
    )               reduce using rule 32 (expression -> [ expression_list ] .)
    ,               reduce using rule 32 (expression -> [ expression_list ] .)
    then            reduce using rule 32 (expression -> [ expression_list ] .)
    ]               reduce using rule 32 (expression -> [ expression_list ] .)
    do              reduce using rule 32 (expression -> [ expression_list ] .)
    in              reduce using rule 32 (expression -> [ expression_list ] .)
    else            reduce using rule 32 (expression -> [ expression_list ] .)


state 86

    (36) expression -> loop expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 100
    id_list                        shift and go to state 17

state 87

    (41) expression -> id_list lambda expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 41 (expression -> id_list lambda expression .)
    }               reduce using rule 41 (expression -> id_list lambda expression .)
    ;               reduce using rule 41 (expression -> id_list lambda expression .)
    )               reduce using rule 41 (expression -> id_list lambda expression .)
    ,               reduce using rule 41 (expression -> id_list lambda expression .)
    then            reduce using rule 41 (expression -> id_list lambda expression .)
    ]               reduce using rule 41 (expression -> id_list lambda expression .)
    do              reduce using rule 41 (expression -> id_list lambda expression .)
    in              reduce using rule 41 (expression -> id_list lambda expression .)
    else            reduce using rule 41 (expression -> id_list lambda expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! eq              [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! =               [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! >               [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! <               [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! ge              [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! le              [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! neqs            [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! or              [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! nand            [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! +               [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! -               [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! *               [ reduce using rule 41 (expression -> id_list lambda expression .) ]
  ! /               [ reduce using rule 41 (expression -> id_list lambda expression .) ]


state 88

    (45) expression -> for expression ; . expression ; expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 101
    id_list                        shift and go to state 17

state 89

    (46) expression -> while expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 102
    id_list                        shift and go to state 17

state 90

    (2) expression -> local ID assign expression . in expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    in              shift and go to state 103
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 91

    (21) expression -> ID ( expression ) .

    and             reduce using rule 21 (expression -> ID ( expression ) .)
    eq              reduce using rule 21 (expression -> ID ( expression ) .)
    =               reduce using rule 21 (expression -> ID ( expression ) .)
    >               reduce using rule 21 (expression -> ID ( expression ) .)
    <               reduce using rule 21 (expression -> ID ( expression ) .)
    ge              reduce using rule 21 (expression -> ID ( expression ) .)
    le              reduce using rule 21 (expression -> ID ( expression ) .)
    neqs            reduce using rule 21 (expression -> ID ( expression ) .)
    or              reduce using rule 21 (expression -> ID ( expression ) .)
    nand            reduce using rule 21 (expression -> ID ( expression ) .)
    +               reduce using rule 21 (expression -> ID ( expression ) .)
    -               reduce using rule 21 (expression -> ID ( expression ) .)
    *               reduce using rule 21 (expression -> ID ( expression ) .)
    /               reduce using rule 21 (expression -> ID ( expression ) .)
    $end            reduce using rule 21 (expression -> ID ( expression ) .)
    }               reduce using rule 21 (expression -> ID ( expression ) .)
    ;               reduce using rule 21 (expression -> ID ( expression ) .)
    )               reduce using rule 21 (expression -> ID ( expression ) .)
    ,               reduce using rule 21 (expression -> ID ( expression ) .)
    then            reduce using rule 21 (expression -> ID ( expression ) .)
    ]               reduce using rule 21 (expression -> ID ( expression ) .)
    do              reduce using rule 21 (expression -> ID ( expression ) .)
    in              reduce using rule 21 (expression -> ID ( expression ) .)
    else            reduce using rule 21 (expression -> ID ( expression ) .)


state 92

    (4) expression -> import ID as ID .

    and             reduce using rule 4 (expression -> import ID as ID .)
    eq              reduce using rule 4 (expression -> import ID as ID .)
    =               reduce using rule 4 (expression -> import ID as ID .)
    >               reduce using rule 4 (expression -> import ID as ID .)
    <               reduce using rule 4 (expression -> import ID as ID .)
    ge              reduce using rule 4 (expression -> import ID as ID .)
    le              reduce using rule 4 (expression -> import ID as ID .)
    neqs            reduce using rule 4 (expression -> import ID as ID .)
    or              reduce using rule 4 (expression -> import ID as ID .)
    nand            reduce using rule 4 (expression -> import ID as ID .)
    +               reduce using rule 4 (expression -> import ID as ID .)
    -               reduce using rule 4 (expression -> import ID as ID .)
    *               reduce using rule 4 (expression -> import ID as ID .)
    /               reduce using rule 4 (expression -> import ID as ID .)
    $end            reduce using rule 4 (expression -> import ID as ID .)
    }               reduce using rule 4 (expression -> import ID as ID .)
    ;               reduce using rule 4 (expression -> import ID as ID .)
    )               reduce using rule 4 (expression -> import ID as ID .)
    ,               reduce using rule 4 (expression -> import ID as ID .)
    then            reduce using rule 4 (expression -> import ID as ID .)
    ]               reduce using rule 4 (expression -> import ID as ID .)
    do              reduce using rule 4 (expression -> import ID as ID .)
    in              reduce using rule 4 (expression -> import ID as ID .)
    else            reduce using rule 4 (expression -> import ID as ID .)


state 93

    (22) sequence -> sequence ; expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    }               reduce using rule 22 (sequence -> sequence ; expression .)
    ;               reduce using rule 22 (sequence -> sequence ; expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 94

    (18) expression -> letrec ID assign expression . in expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    in              shift and go to state 104
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 95

    (38) expression_list -> expression , expression_list .

    )               reduce using rule 38 (expression_list -> expression , expression_list .)
    ]               reduce using rule 38 (expression_list -> expression , expression_list .)


state 96

    (39) expression_list -> ID . , expression_list
    (26) id_list -> ID . , id_list
    (27) id_list -> ID .
    (3) expression -> ID .
    (5) expression -> ID . lambda expression
    (19) expression -> ID . assign expression
    (21) expression -> ID . ( expression )

  ! shift/reduce conflict for , resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    ,               shift and go to state 83
    and             reduce using rule 3 (expression -> ID .)
    eq              reduce using rule 3 (expression -> ID .)
    =               reduce using rule 3 (expression -> ID .)
    >               reduce using rule 3 (expression -> ID .)
    <               reduce using rule 3 (expression -> ID .)
    ge              reduce using rule 3 (expression -> ID .)
    le              reduce using rule 3 (expression -> ID .)
    neqs            reduce using rule 3 (expression -> ID .)
    or              reduce using rule 3 (expression -> ID .)
    nand            reduce using rule 3 (expression -> ID .)
    +               reduce using rule 3 (expression -> ID .)
    -               reduce using rule 3 (expression -> ID .)
    *               reduce using rule 3 (expression -> ID .)
    /               reduce using rule 3 (expression -> ID .)
    )               reduce using rule 3 (expression -> ID .)
    ]               reduce using rule 3 (expression -> ID .)
    lambda          shift and go to state 36
    assign          shift and go to state 37
    (               shift and go to state 38

  ! lambda          [ reduce using rule 27 (id_list -> ID .) ]
  ! ,               [ reduce using rule 3 (expression -> ID .) ]


state 97

    (39) expression_list -> ID , expression_list .

    )               reduce using rule 39 (expression_list -> ID , expression_list .)
    ]               reduce using rule 39 (expression_list -> ID , expression_list .)


state 98

    (26) id_list -> ID , id_list .
    (41) expression -> id_list . lambda expression

    lambda          reduce using rule 26 (id_list -> ID , id_list .)

  ! lambda          [ shift and go to state 53 ]


state 99

    (25) expression -> if expression then expression .
    (33) expression -> if expression then expression . else expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 25 (expression -> if expression then expression .)
    }               reduce using rule 25 (expression -> if expression then expression .)
    ;               reduce using rule 25 (expression -> if expression then expression .)
    )               reduce using rule 25 (expression -> if expression then expression .)
    ,               reduce using rule 25 (expression -> if expression then expression .)
    then            reduce using rule 25 (expression -> if expression then expression .)
    ]               reduce using rule 25 (expression -> if expression then expression .)
    do              reduce using rule 25 (expression -> if expression then expression .)
    in              reduce using rule 25 (expression -> if expression then expression .)
    else            shift and go to state 105
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! eq              [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! =               [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! >               [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! <               [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! ge              [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! le              [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! neqs            [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! or              [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! nand            [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! +               [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! -               [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! *               [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! /               [ reduce using rule 25 (expression -> if expression then expression .) ]
  ! else            [ reduce using rule 25 (expression -> if expression then expression .) ]


state 100

    (36) expression -> loop expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 36 (expression -> loop expression do expression .)
    }               reduce using rule 36 (expression -> loop expression do expression .)
    ;               reduce using rule 36 (expression -> loop expression do expression .)
    )               reduce using rule 36 (expression -> loop expression do expression .)
    ,               reduce using rule 36 (expression -> loop expression do expression .)
    then            reduce using rule 36 (expression -> loop expression do expression .)
    ]               reduce using rule 36 (expression -> loop expression do expression .)
    do              reduce using rule 36 (expression -> loop expression do expression .)
    in              reduce using rule 36 (expression -> loop expression do expression .)
    else            reduce using rule 36 (expression -> loop expression do expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! eq              [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! =               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! >               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! <               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! ge              [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! le              [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! neqs            [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! or              [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! nand            [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! +               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! -               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! *               [ reduce using rule 36 (expression -> loop expression do expression .) ]
  ! /               [ reduce using rule 36 (expression -> loop expression do expression .) ]


state 101

    (45) expression -> for expression ; expression . ; expression do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    ;               shift and go to state 106
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 102

    (46) expression -> while expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 46 (expression -> while expression do expression .)
    }               reduce using rule 46 (expression -> while expression do expression .)
    ;               reduce using rule 46 (expression -> while expression do expression .)
    )               reduce using rule 46 (expression -> while expression do expression .)
    ,               reduce using rule 46 (expression -> while expression do expression .)
    then            reduce using rule 46 (expression -> while expression do expression .)
    ]               reduce using rule 46 (expression -> while expression do expression .)
    do              reduce using rule 46 (expression -> while expression do expression .)
    in              reduce using rule 46 (expression -> while expression do expression .)
    else            reduce using rule 46 (expression -> while expression do expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! eq              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! =               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! >               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! <               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! ge              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! le              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! neqs            [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! or              [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! nand            [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! +               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! -               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! *               [ reduce using rule 46 (expression -> while expression do expression .) ]
  ! /               [ reduce using rule 46 (expression -> while expression do expression .) ]


state 103

    (2) expression -> local ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 107
    id_list                        shift and go to state 17

state 104

    (18) expression -> letrec ID assign expression in . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 108
    id_list                        shift and go to state 17

state 105

    (33) expression -> if expression then expression else . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 109
    id_list                        shift and go to state 17

state 106

    (45) expression -> for expression ; expression ; . expression do expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 110
    id_list                        shift and go to state 17

state 107

    (2) expression -> local ID assign expression in expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 2 (expression -> local ID assign expression in expression .)
    }               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ;               reduce using rule 2 (expression -> local ID assign expression in expression .)
    )               reduce using rule 2 (expression -> local ID assign expression in expression .)
    ,               reduce using rule 2 (expression -> local ID assign expression in expression .)
    then            reduce using rule 2 (expression -> local ID assign expression in expression .)
    ]               reduce using rule 2 (expression -> local ID assign expression in expression .)
    do              reduce using rule 2 (expression -> local ID assign expression in expression .)
    in              reduce using rule 2 (expression -> local ID assign expression in expression .)
    else            reduce using rule 2 (expression -> local ID assign expression in expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! eq              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! =               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! >               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! <               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! ge              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! le              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! or              [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! nand            [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! +               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! -               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! *               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]
  ! /               [ reduce using rule 2 (expression -> local ID assign expression in expression .) ]


state 108

    (18) expression -> letrec ID assign expression in expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for eq resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for ge resolved as shift
  ! shift/reduce conflict for le resolved as shift
  ! shift/reduce conflict for neqs resolved as shift
  ! shift/reduce conflict for or resolved as shift
  ! shift/reduce conflict for nand resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    $end            reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    }               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    ;               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    )               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    ,               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    then            reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    ]               reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    do              reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    in              reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    else            reduce using rule 18 (expression -> letrec ID assign expression in expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! eq              [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! =               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! >               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! <               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! ge              [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! le              [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! neqs            [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! or              [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! nand            [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! +               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! -               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! *               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]
  ! /               [ reduce using rule 18 (expression -> letrec ID assign expression in expression .) ]


state 109

    (33) expression -> if expression then expression else expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 33 (expression -> if expression then expression else expression .)
    }               reduce using rule 33 (expression -> if expression then expression else expression .)
    ;               reduce using rule 33 (expression -> if expression then expression else expression .)
    )               reduce using rule 33 (expression -> if expression then expression else expression .)
    ,               reduce using rule 33 (expression -> if expression then expression else expression .)
    then            reduce using rule 33 (expression -> if expression then expression else expression .)
    ]               reduce using rule 33 (expression -> if expression then expression else expression .)
    do              reduce using rule 33 (expression -> if expression then expression else expression .)
    in              reduce using rule 33 (expression -> if expression then expression else expression .)
    else            reduce using rule 33 (expression -> if expression then expression else expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! eq              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! =               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! >               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! <               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! ge              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! le              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! neqs            [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! or              [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! nand            [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! +               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! -               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! *               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]
  ! /               [ reduce using rule 33 (expression -> if expression then expression else expression .) ]


state 110

    (45) expression -> for expression ; expression ; expression . do expression
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    do              shift and go to state 111
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34


state 111

    (45) expression -> for expression ; expression ; expression do . expression
    (1) expression -> . float
    (2) expression -> . local ID assign expression in expression
    (3) expression -> . ID
    (4) expression -> . import ID as ID
    (5) expression -> . ID lambda expression
    (6) expression -> . { sequence }
    (7) expression -> . expression and expression
    (8) expression -> . expression eq expression
    (9) expression -> . expression = expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . expression ge expression
    (13) expression -> . expression le expression
    (14) expression -> . expression neqs expression
    (15) expression -> . expression or expression
    (16) expression -> . expression nand expression
    (17) expression -> . string
    (18) expression -> . letrec ID assign expression in expression
    (19) expression -> . ID assign expression
    (20) expression -> . import ID
    (21) expression -> . ID ( expression )
    (24) expression -> . char
    (25) expression -> . if expression then expression
    (28) expression -> . expression + expression
    (29) expression -> . expression - expression
    (30) expression -> . expression * expression
    (31) expression -> . expression / expression
    (32) expression -> . [ expression_list ]
    (33) expression -> . if expression then expression else expression
    (34) expression -> . ( expression_list )
    (35) expression -> . not expression
    (36) expression -> . loop expression do expression
    (40) expression -> . NUMBER
    (41) expression -> . id_list lambda expression
    (42) expression -> . BOOL
    (43) expression -> . - expression
    (44) expression -> . ( expression )
    (45) expression -> . for expression ; expression ; expression do expression
    (46) expression -> . while expression do expression
    (26) id_list -> . ID , id_list
    (27) id_list -> . ID

    float           shift and go to state 2
    local           shift and go to state 3
    ID              shift and go to state 4
    import          shift and go to state 5
    {               shift and go to state 6
    string          shift and go to state 7
    letrec          shift and go to state 8
    char            shift and go to state 10
    if              shift and go to state 11
    [               shift and go to state 13
    (               shift and go to state 9
    not             shift and go to state 14
    loop            shift and go to state 15
    NUMBER          shift and go to state 16
    BOOL            shift and go to state 18
    -               shift and go to state 12
    for             shift and go to state 19
    while           shift and go to state 20

    expression                     shift and go to state 112
    id_list                        shift and go to state 17

state 112

    (45) expression -> for expression ; expression ; expression do expression .
    (7) expression -> expression . and expression
    (8) expression -> expression . eq expression
    (9) expression -> expression . = expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression
    (12) expression -> expression . ge expression
    (13) expression -> expression . le expression
    (14) expression -> expression . neqs expression
    (15) expression -> expression . or expression
    (16) expression -> expression . nand expression
    (28) expression -> expression . + expression
    (29) expression -> expression . - expression
    (30) expression -> expression . * expression
    (31) expression -> expression . / expression

    $end            reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    }               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    ;               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    )               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    ,               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    then            reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    ]               reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    do              reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    in              reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    else            reduce using rule 45 (expression -> for expression ; expression ; expression do expression .)
    and             shift and go to state 21
    eq              shift and go to state 22
    =               shift and go to state 23
    >               shift and go to state 24
    <               shift and go to state 25
    ge              shift and go to state 26
    le              shift and go to state 27
    neqs            shift and go to state 28
    or              shift and go to state 29
    nand            shift and go to state 30
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34

  ! and             [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! eq              [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! =               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! >               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! <               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! ge              [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! le              [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! neqs            [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! or              [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! nand            [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! +               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! -               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! *               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]
  ! /               [ reduce using rule 45 (expression -> for expression ; expression ; expression do expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for , in state 4 resolved as shift
WARNING: shift/reduce conflict for lambda in state 4 resolved as shift
WARNING: shift/reduce conflict for ) in state 45 resolved as shift
WARNING: shift/reduce conflict for , in state 46 resolved as shift
WARNING: shift/reduce conflict for lambda in state 46 resolved as shift
WARNING: shift/reduce conflict for , in state 96 resolved as shift
WARNING: shift/reduce conflict for lambda in state 96 resolved as shift
WARNING: shift/reduce conflict for and in state 107 resolved as shift
WARNING: shift/reduce conflict for eq in state 107 resolved as shift
WARNING: shift/reduce conflict for = in state 107 resolved as shift
WARNING: shift/reduce conflict for > in state 107 resolved as shift
WARNING: shift/reduce conflict for < in state 107 resolved as shift
WARNING: shift/reduce conflict for ge in state 107 resolved as shift
WARNING: shift/reduce conflict for le in state 107 resolved as shift
WARNING: shift/reduce conflict for neqs in state 107 resolved as shift
WARNING: shift/reduce conflict for or in state 107 resolved as shift
WARNING: shift/reduce conflict for nand in state 107 resolved as shift
WARNING: shift/reduce conflict for + in state 107 resolved as shift
WARNING: shift/reduce conflict for - in state 107 resolved as shift
WARNING: shift/reduce conflict for * in state 107 resolved as shift
WARNING: shift/reduce conflict for / in state 107 resolved as shift
WARNING: shift/reduce conflict for and in state 108 resolved as shift
WARNING: shift/reduce conflict for eq in state 108 resolved as shift
WARNING: shift/reduce conflict for = in state 108 resolved as shift
WARNING: shift/reduce conflict for > in state 108 resolved as shift
WARNING: shift/reduce conflict for < in state 108 resolved as shift
WARNING: shift/reduce conflict for ge in state 108 resolved as shift
WARNING: shift/reduce conflict for le in state 108 resolved as shift
WARNING: shift/reduce conflict for neqs in state 108 resolved as shift
WARNING: shift/reduce conflict for or in state 108 resolved as shift
WARNING: shift/reduce conflict for nand in state 108 resolved as shift
WARNING: shift/reduce conflict for + in state 108 resolved as shift
WARNING: shift/reduce conflict for - in state 108 resolved as shift
WARNING: shift/reduce conflict for * in state 108 resolved as shift
WARNING: shift/reduce conflict for / in state 108 resolved as shift
