# local assignment in expr

from environment import Env
from pack.ast.Expression import InterpretedExpression, getAllClasses, ic
from pack.ast.local_ast import LocalExpression

class LambdaExpression(InterpretedExpression):
    # class LocalExpression(InterpretedExpression):
    # def __init__(self, x, body):
    #     self.x=x
    #     self.body=body
    #

    def __init__(self, id, body_lambda):
        self.id=id
        self.body_lambda=body_lambda

    def eval(self,env):

        id, env_tmp = self.id.eval(env)

        def lmbd(val):
            # locExp = LocalExpression(self.id, val, self.body_lambda)
            new_env = Env()
            new_env[self.id] = val
            # ic(new_env.parent)
            # new_env.parent = env
            res, env_tmp = self.body_lambda.eval(new_env)
            # env_tmp =Env({self.id:val})
            # ic(">>>>>",env_tmp)
            # return locExp.eval(env)
            return res
        return lmbd, env

    # def eval(self,env):
    #     def lmbd(self,value):
    #         env = Env()
    #         # local_value, old_val = self.value.eval(env)
    #         # local_value, old_val = value.eval(env)
    #         old_val = env[self.x]
    #         env[self.x] = value
    #         res, env = self.body.eval(env)
    #         if old_val:
    #             env[self.x] = old_val
    #         ic(res)
    #         return res
    #     return lmbd, env

class CallExpression(InterpretedExpression):
    def __init__(self,fn,x):
        self.x=x
        self.fn=fn

    def eval(self,env):
        fn, env = self.fn.eval(env)
        x, env = self.x.eval(env)
        return fn(self.x), env

used_procedures_and_classes = getAllClasses()

# asd -> {
# asd + 11;
# }
