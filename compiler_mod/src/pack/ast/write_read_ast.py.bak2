# from pack.ast.Expression import InterpretedExpression, getAllClasses,ic
#
#
# class WriteIdExpression(InterpretedExpression):
#     def __init__(self, id, value):
#         ic(self, id, value)
#         self.id=id
#         self.value=value
#
#     def eval(self,env):
#         # found_env = _findParentWrite(self.id,env)
#         found_env = env
#         found_env[self.id] = self.value
#         return self.value, env
#
# def _findParentWrite(id,env):
#     parent_env = env
#     ic("searching for",id)
#     ic(parent_env)
#     item = parent_env[id]
#     ic(item)
#     if item :
#         return env
#         ic("ASDASDASD")
#     last_parent = parent_env
#     while parent_env and not item:
#         last_parent = parent_env
#         ic(last_parent)
#         item = parent_env[id]
#         ic(item)
#         if item:
#             ic("found item")
#             return last_parent
#         parent_env = parent_env.parent
#         ic(parent_env)
#     ic("value in ENV not found")
#     return env
#
#
# class ReadIdExpression(InterpretedExpression):
#     def __init__(self, id):
#         self.id=id
#
#     def eval(self,env):
#         return env[self.id], env
#
#
# class ReadParentIdExpression(InterpretedExpression):
#     def __init__(self, id,dots):
#         self.id=id
#         self.n_parents=dots-1
#
#     def eval(self,env):
#         if self.n_parents == 0:
#             return env[self.id], env
#         else:
#             for _ in range(self.n_parents):
#                 parent_struct =env["parent_in_struct"]
#                 parent = env["parent"]
#                 if parent_struct:
#                     return parent_struct(ReadIdExpression(self.id)), env
#                     return parent.env[self.id], env
#         return None, env
#
#
#
#
# used_procedures_and_classes = getAllClasses()
#
from pack.ast.Expression import InterpretedExpression, getAllClasses,ic
from top_configs import EVAL_EXPR_BEFORE_SAVE_TO_TMP


class WriteIdExpression(InterpretedExpression):
    def __init__(self, id_always_as_string, value):
        ic(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",self, id_always_as_string, value)
        self.id_as_string=id_always_as_string
        self.value=value

    def eval(self,env):
        found_env = env
        ic("==============start===============")
        ic("ENV",env)
        if found_env[self.id_as_string]:
            ic("----------found:",found_env[self.id_as_string])
            ic(found_env)
            ic(env[self.id_as_string])
            ic("FOUND IN Starting/Current ENV")
        else:
            ic("NOTNOTTTOTOOTOTOTOTTOTO")
            found_env = findEnvWithIdWrite(self.id_as_string,env)
        # value_evaluaded, env = self.value.eval(env)
        ic("=============================")
        ic("=============================")
        ic("=============================")
        # value_evaluaded, env = self.value.eval(found_env)
        # ic(value_evaluaded,found_env)
        if EVAL_EXPR_BEFORE_SAVE_TO_TMP:
            value_evaluaded, env = self.value.eval(found_env)
            found_env[self.id_as_string] = value_evaluaded
        else:
            found_env[self.id_as_string] = self.value
        ic(env[self.id_as_string])
        ic(found_env[self.id_as_string])
        ic("==============end===============")
        

        # ic(value_evaluaded,found_env)
        ic(found_env)
        
        ic("=============================")
        ic("=============================")
        ic("=============================")
        # return self.value, env
        return value_evaluaded, env
        return value_evaluaded, env

def findEnvWithIdWrite(id,env):
    parent_env = env
    item = parent_env[id]
    last_parent = parent_env
    ic(item)
    while parent_env and not item:
        last_parent = parent_env
        item = parent_env[id]
        ic("---->>>search: ",id)
        ic(parent_env)
        ic(">>>",item)
        if item:
            ic(">>>>ITEM FOUND:",item)
            return last_parent
        parent_env = parent_env.parent
    return env


class ReadIdExpression(InterpretedExpression):
    def __init__(self, id):
        self.id=id

    def eval(self,env):
        return env[self.id], env


class ReadParentIdExpression(InterpretedExpression):
    def __init__(self, id,dots):
        self.id=id
        self.n_parents=dots-1

    def eval(self,env):
        if self.n_parents == 0:
            return env[self.id], env
        else:
            for _ in range(self.n_parents):
                parent_struct =env["parent_in_struct"]
                parent = env["parent"]
                if parent_struct:
                    return parent_struct(ReadIdExpression(self.id)), env
                    return parent.env[self.id], env
        return None, env




used_procedures_and_classes = getAllClasses()


