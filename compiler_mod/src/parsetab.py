
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightassignrightlambdanonassocthennonassocelsedoleftorleftandnandleft=neqseqnotleft<>legeleft+-left*/rightnotUMINUSBOOL ID NUMBER and array as assign char do else eq float for ge if import in lambda le list local loop nand neqs not or string then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : ID lambda expressionexpression : "{" sequence "}"expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : ID assign expressionexpression : import IDexpression :  ID "(" expression ")"sequence :   sequence ";" expression\n                |   expression\n    expression : if expression then expression\n    expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : if expression then expression else expression\n    expression : not expression\n    expression : loop expression do expression\n    expression : "-" expression %prec UMINUSexpression : NUMBER expression : BOOLexpression : "(" expression ")"expression : for expression ";" expression ";" expression do expression\n    expression : while expression do expression\n    '
    
_lr_action_items = {'float':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,62,64,66,67,68,69,78,79,80,84,],[4,30,34,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,72,4,4,4,4,4,4,4,4,4,]),'import':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'{':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'not':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'loop':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'-':([0,1,2,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,],[9,27,-1,-3,9,9,9,9,9,9,-31,-32,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-18,27,27,27,-30,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-23,-24,-25,-26,9,27,27,27,-6,9,-33,9,9,9,9,27,-19,-4,27,27,27,27,27,9,9,9,27,27,27,9,27,]),'NUMBER':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'BOOL':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'(':([0,4,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[7,33,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'for':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'while':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'$end':([1,2,4,12,13,34,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,63,65,71,72,74,75,77,81,82,85,],[0,-1,-3,-31,-32,-18,-30,-28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,-5,-17,-6,-33,-19,-4,-22,-29,-35,-2,-27,-34,]),'and':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[16,-1,-3,-31,-32,-18,16,16,16,-30,-28,16,16,16,-7,-8,-9,-10,-11,-12,-13,-14,16,-16,-23,-24,-25,-26,16,16,16,-6,-33,16,-19,-4,16,16,16,16,16,16,16,16,16,]),'eq':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[17,-1,-3,-31,-32,-18,17,17,17,-30,-28,17,17,17,17,-8,-9,-10,-11,-12,-13,-14,17,17,-23,-24,-25,-26,17,17,17,-6,-33,17,-19,-4,17,17,17,17,17,17,17,17,17,]),'=':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[18,-1,-3,-31,-32,-18,18,18,18,-30,-28,18,18,18,18,-8,-9,-10,-11,-12,-13,-14,18,18,-23,-24,-25,-26,18,18,18,-6,-33,18,-19,-4,18,18,18,18,18,18,18,18,18,]),'>':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[19,-1,-3,-31,-32,-18,19,19,19,-30,19,19,19,19,19,19,19,-10,-11,-12,-13,19,19,19,-23,-24,-25,-26,19,19,19,-6,-33,19,-19,-4,19,19,19,19,19,19,19,19,19,]),'<':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[20,-1,-3,-31,-32,-18,20,20,20,-30,20,20,20,20,20,20,20,-10,-11,-12,-13,20,20,20,-23,-24,-25,-26,20,20,20,-6,-33,20,-19,-4,20,20,20,20,20,20,20,20,20,]),'ge':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[21,-1,-3,-31,-32,-18,21,21,21,-30,21,21,21,21,21,21,21,-10,-11,-12,-13,21,21,21,-23,-24,-25,-26,21,21,21,-6,-33,21,-19,-4,21,21,21,21,21,21,21,21,21,]),'le':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[22,-1,-3,-31,-32,-18,22,22,22,-30,22,22,22,22,22,22,22,-10,-11,-12,-13,22,22,22,-23,-24,-25,-26,22,22,22,-6,-33,22,-19,-4,22,22,22,22,22,22,22,22,22,]),'neqs':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[23,-1,-3,-31,-32,-18,23,23,23,-30,-28,23,23,23,23,-8,-9,-10,-11,-12,-13,-14,23,23,-23,-24,-25,-26,23,23,23,-6,-33,23,-19,-4,23,23,23,23,23,23,23,23,23,]),'or':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[24,-1,-3,-31,-32,-18,24,24,24,-30,-28,24,24,24,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,24,24,24,-6,-33,24,-19,-4,24,24,24,24,24,24,24,24,24,]),'nand':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[25,-1,-3,-31,-32,-18,25,25,25,-30,-28,25,25,25,-7,-8,-9,-10,-11,-12,-13,-14,25,-16,-23,-24,-25,-26,25,25,25,-6,-33,25,-19,-4,25,25,25,25,25,25,25,25,25,]),'+':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[26,-1,-3,-31,-32,-18,26,26,26,-30,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-23,-24,-25,-26,26,26,26,-6,-33,26,-19,-4,26,26,26,26,26,26,26,26,26,]),'*':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[28,-1,-3,-31,-32,-18,28,28,28,-30,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-25,-26,28,28,28,-6,-33,28,-19,-4,28,28,28,28,28,28,28,28,28,]),'/':([1,2,4,12,13,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,70,71,72,73,74,75,76,77,81,82,83,85,],[29,-1,-3,-31,-32,-18,29,29,29,-30,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-25,-26,29,29,29,-6,-33,29,-19,-4,29,29,29,29,29,29,29,29,29,]),'}':([2,4,12,13,34,35,36,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,63,65,71,72,73,74,75,77,81,82,85,],[-1,-3,-31,-32,-18,63,-21,-30,-28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,-5,-17,-6,-33,-19,-4,-20,-22,-29,-35,-2,-27,-34,]),';':([2,4,12,13,34,35,36,39,40,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,63,65,71,72,73,74,75,76,77,81,82,85,],[-1,-3,-31,-32,-18,64,-21,-30,-28,68,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,-5,-17,-6,-33,-19,-4,-20,-22,-29,80,-35,-2,-27,-34,]),')':([2,4,12,13,34,37,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,63,65,71,72,74,75,77,81,82,85,],[-1,-3,-31,-32,-18,65,-30,-28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,-5,-17,71,-6,-33,-19,-4,-22,-29,-35,-2,-27,-34,]),'then':([2,4,12,13,34,38,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,63,65,71,72,74,75,77,81,82,85,],[-1,-3,-31,-32,-18,66,-30,-28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,-5,-17,-6,-33,-19,-4,-22,-29,-35,-2,-27,-34,]),'do':([2,4,12,13,34,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,63,65,71,72,74,75,77,81,82,83,85,],[-1,-3,-31,-32,-18,-30,-28,67,69,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,-5,-17,-6,-33,-19,-4,-22,-29,-35,-2,-27,84,-34,]),'in':([2,4,12,13,34,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,63,65,70,71,72,74,75,77,81,82,85,],[-1,-3,-31,-32,-18,-30,-28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,-5,-17,-6,-33,78,-19,-4,-22,-29,-35,-2,-27,-34,]),'else':([2,4,12,13,34,39,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,63,65,71,72,74,75,77,81,82,85,],[-1,-3,-31,-32,-18,-30,-28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-23,-24,-25,-26,-5,-17,-6,-33,-19,-4,79,-29,-35,-2,-27,-34,]),'lambda':([4,],[31,]),'assign':([4,30,],[32,58,]),'as':([34,],[62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,58,64,66,67,68,69,78,79,80,84,],[1,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,70,73,74,75,76,77,81,82,83,85,]),'sequence':([6,],[35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> ID lambda expression','expression',3,'p_expression_lambda','lambda_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> ID ( expression )','expression',4,'p_expression_call','lambda_parser.py',18),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',47),
]
