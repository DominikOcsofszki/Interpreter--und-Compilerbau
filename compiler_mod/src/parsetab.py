
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightassignrightlambdarightletrecrightlocalnonassocthendononassocelseleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotUMINUSBOOL ID NUMBER and as assign char do else eq extend float for ge if import in lambda le letrec local loop nand neqs not or string struct then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : letrec ID assign expression lambda expressionexpression : "{" sequence "}" expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : string expression : ID assign expressionexpression : import IDexpression : struct "{" sequence "}" expression : "-" expression %prec UMINUSexpression : char expression : if expression then expression\n    sequence :   sequence ";" expression \n                |   expression expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : "[" id_list "]"expression : if expression then expression else expression\n    id_list : expression "," id_list\n        |        expression\n    expression : ID "[" NUMBER "]"expression : not expression\n    expression : loop expression do expression\n    expression : "(" id_list ")"expression : NUMBER expression : BOOLexpression : "(" expression ")"expression : extend ID "{" sequence "}" expression : for expression ";" expression ";" expression do expression\n    expression :     lambda expression\n            |           ID lambda expression\n            |           "(" id_list ")" lambda expression\n    dot_expression : ID "." ID\n                | ID "." "." ID \n                | ID "." "." "." ID \n                | ID "." "." "." "." ID \n                | ID "." "." "." "." "." ID \n                | ID "." "." "." "." "." "." ID \n    expression : while expression do expression\n    expression : dot_expression\n                |   dot_expression "(" ")"\n                |   dot_expression "(" id_list ")"\n\n    expression :  ID "(" ")"expression :  ID "(" id_list ")"'
    
_lr_action_items = {'float':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,7,8,11,13,14,16,17,18,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,43,49,61,76,83,84,85,87,89,91,92,95,96,97,104,112,117,119,120,121,124,127,132,133,],[4,38,44,45,4,4,4,4,4,4,4,4,58,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,82,4,4,4,103,105,4,4,4,4,4,4,4,4,118,4,4,126,4,4,4,131,134,4,]),'import':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'letrec':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'{':([0,7,8,10,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,58,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[8,8,8,49,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,95,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'string':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'struct':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'-':([0,1,2,4,7,8,9,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,44,46,48,49,50,51,53,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,85,86,87,89,90,91,92,93,94,95,96,97,98,100,101,102,103,105,106,107,108,109,111,112,114,115,116,117,118,120,121,122,123,124,125,126,128,129,130,131,133,134,135,],[11,35,-1,-3,11,11,-17,11,-22,11,11,-38,11,11,11,-39,11,11,-53,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-19,35,35,11,-21,35,35,-35,35,35,35,35,11,35,35,35,35,35,35,35,35,35,35,-26,-27,-28,-29,11,35,35,-56,-46,11,-6,11,11,-30,11,11,-37,-40,11,11,11,-54,35,-34,-57,-47,-4,35,35,-20,35,35,11,35,35,-55,11,-48,11,11,35,-41,11,35,-49,35,35,35,-50,11,-51,35,]),'char':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'if':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'[':([0,4,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[14,40,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'not':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'loop':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'(':([0,4,7,8,11,13,14,16,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,82,85,87,89,91,92,95,96,97,103,112,117,118,120,121,124,126,131,133,134,],[18,42,18,18,18,18,18,18,18,18,18,18,61,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-46,18,18,18,18,18,18,18,18,-47,18,18,-48,18,18,18,-49,-50,18,-51,]),'NUMBER':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,78,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'BOOL':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'extend':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'for':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'lambda':([0,2,4,7,8,9,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,44,46,49,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,85,86,87,89,90,91,92,93,94,95,96,97,98,101,102,103,105,106,108,109,111,112,115,116,117,118,120,121,122,123,124,125,126,128,129,131,133,134,135,],[7,-1,41,7,7,-17,7,-22,7,7,-38,7,7,7,-39,7,7,-53,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-19,-43,7,-21,-35,7,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,7,-18,-44,-56,-46,7,-6,7,7,-30,7,7,112,-40,7,7,7,-54,-34,-57,-47,-4,120,-20,-23,-36,7,-52,-55,7,-48,7,7,-45,-41,7,-2,-49,-5,-31,-50,7,-51,-42,]),'while':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'$end':([1,2,4,9,12,15,19,23,44,46,50,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,101,102,103,105,108,109,111,115,116,118,122,123,125,126,128,129,131,134,135,],[0,-1,-3,-17,-22,-38,-39,-53,-19,-43,-21,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,-46,-6,-30,-37,-40,-54,-34,-57,-47,-4,-20,-23,-36,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),'and':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[24,-1,-3,-17,-22,-38,-39,-53,-19,24,24,-21,24,24,-35,24,24,24,24,-7,-8,-9,-10,-11,-12,-13,-14,24,-16,-26,-27,-28,-29,24,24,-56,-46,-6,-30,-37,-40,-54,24,-34,-57,-47,-4,24,24,-20,24,24,24,24,-55,-48,24,-41,24,-49,24,24,24,-50,-51,24,]),'eq':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[25,-1,-3,-17,-22,-38,-39,-53,-19,25,25,-21,25,25,-35,25,25,25,25,25,-8,-9,-10,-11,-12,-13,-14,25,25,-26,-27,-28,-29,25,25,-56,-46,-6,-30,-37,-40,-54,25,-34,-57,-47,-4,25,25,-20,25,25,25,25,-55,-48,25,-41,25,-49,25,25,25,-50,-51,25,]),'=':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[26,-1,-3,-17,-22,-38,-39,-53,-19,26,26,-21,26,26,-35,26,26,26,26,26,-8,-9,-10,-11,-12,-13,-14,26,26,-26,-27,-28,-29,26,26,-56,-46,-6,-30,-37,-40,-54,26,-34,-57,-47,-4,26,26,-20,26,26,26,26,-55,-48,26,-41,26,-49,26,26,26,-50,-51,26,]),'>':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[27,-1,-3,-17,-22,-38,-39,-53,-19,27,27,-21,27,27,-35,27,27,27,27,27,27,27,-10,-11,-12,-13,27,27,27,-26,-27,-28,-29,27,27,-56,-46,-6,-30,-37,-40,-54,27,-34,-57,-47,-4,27,27,-20,27,27,27,27,-55,-48,27,-41,27,-49,27,27,27,-50,-51,27,]),'<':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[28,-1,-3,-17,-22,-38,-39,-53,-19,28,28,-21,28,28,-35,28,28,28,28,28,28,28,-10,-11,-12,-13,28,28,28,-26,-27,-28,-29,28,28,-56,-46,-6,-30,-37,-40,-54,28,-34,-57,-47,-4,28,28,-20,28,28,28,28,-55,-48,28,-41,28,-49,28,28,28,-50,-51,28,]),'ge':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[29,-1,-3,-17,-22,-38,-39,-53,-19,29,29,-21,29,29,-35,29,29,29,29,29,29,29,-10,-11,-12,-13,29,29,29,-26,-27,-28,-29,29,29,-56,-46,-6,-30,-37,-40,-54,29,-34,-57,-47,-4,29,29,-20,29,29,29,29,-55,-48,29,-41,29,-49,29,29,29,-50,-51,29,]),'le':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[30,-1,-3,-17,-22,-38,-39,-53,-19,30,30,-21,30,30,-35,30,30,30,30,30,30,30,-10,-11,-12,-13,30,30,30,-26,-27,-28,-29,30,30,-56,-46,-6,-30,-37,-40,-54,30,-34,-57,-47,-4,30,30,-20,30,30,30,30,-55,-48,30,-41,30,-49,30,30,30,-50,-51,30,]),'neqs':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[31,-1,-3,-17,-22,-38,-39,-53,-19,31,31,-21,31,31,-35,31,31,31,31,31,-8,-9,-10,-11,-12,-13,-14,31,31,-26,-27,-28,-29,31,31,-56,-46,-6,-30,-37,-40,-54,31,-34,-57,-47,-4,31,31,-20,31,31,31,31,-55,-48,31,-41,31,-49,31,31,31,-50,-51,31,]),'or':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[32,-1,-3,-17,-22,-38,-39,-53,-19,32,32,-21,32,32,-35,32,32,32,32,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,32,32,-56,-46,-6,-30,-37,-40,-54,32,-34,-57,-47,-4,32,32,-20,32,32,32,32,-55,-48,32,-41,32,-49,32,32,32,-50,-51,32,]),'nand':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[33,-1,-3,-17,-22,-38,-39,-53,-19,33,33,-21,33,33,-35,33,33,33,33,-7,-8,-9,-10,-11,-12,-13,-14,33,-16,-26,-27,-28,-29,33,33,-56,-46,-6,-30,-37,-40,-54,33,-34,-57,-47,-4,33,33,-20,33,33,33,33,-55,-48,33,-41,33,-49,33,33,33,-50,-51,33,]),'+':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[34,-1,-3,-17,-22,-38,-39,-53,-19,34,34,-21,34,34,-35,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-26,-27,-28,-29,34,34,-56,-46,-6,-30,-37,-40,-54,34,-34,-57,-47,-4,34,34,-20,34,34,34,34,-55,-48,34,-41,34,-49,34,34,34,-50,-51,34,]),'*':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[36,-1,-3,-17,-22,-38,-39,-53,-19,36,36,-21,36,36,-35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-28,-29,36,36,-56,-46,-6,-30,-37,-40,-54,36,-34,-57,-47,-4,36,36,-20,36,36,36,36,-55,-48,36,-41,36,-49,36,36,36,-50,-51,36,]),'/':([1,2,4,9,12,15,19,23,44,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,106,107,108,109,111,114,115,116,118,122,123,125,126,128,129,130,131,134,135,],[37,-1,-3,-17,-22,-38,-39,-53,-19,37,37,-21,37,37,-35,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-28,-29,37,37,-56,-46,-6,-30,-37,-40,-54,37,-34,-57,-47,-4,37,37,-20,37,37,37,37,-55,-48,37,-41,37,-49,37,37,37,-50,-51,37,]),'}':([2,4,9,12,15,19,23,44,46,47,48,50,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,88,90,93,94,98,101,102,103,105,107,108,109,111,113,115,116,118,122,123,125,126,128,129,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,-19,-43,86,-25,-21,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,-46,-6,108,-30,-37,-40,-54,-34,-57,-47,-4,-24,-20,-23,-36,123,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),';':([2,4,9,12,15,19,23,44,46,47,48,50,54,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,88,90,93,94,98,101,102,103,105,107,108,109,111,113,114,115,116,118,122,123,125,126,128,129,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,-19,-43,87,-25,-21,-35,96,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,-46,-6,87,-30,-37,-40,-54,-34,-57,-47,-4,-24,-20,-23,-36,87,124,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),'then':([2,4,9,12,15,19,23,44,46,50,51,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,101,102,103,105,108,109,111,115,116,118,122,123,125,126,128,129,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,-19,-43,-21,89,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,-46,-6,-30,-37,-40,-54,-34,-57,-47,-4,-20,-23,-36,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),',':([2,4,9,12,15,19,23,44,46,50,53,54,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,101,102,103,105,108,109,111,115,116,118,122,123,125,126,128,129,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,-19,-43,-21,91,-35,91,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,-46,-6,-30,-37,-40,-54,-34,-57,-47,-4,-20,-23,-36,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),']':([2,4,9,12,15,19,23,44,46,50,52,53,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,82,86,90,93,94,98,101,102,103,105,108,109,110,111,115,116,118,122,123,125,126,128,129,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,-19,-43,-21,90,-33,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,101,-44,-56,-46,-6,-30,-37,-40,-54,-34,-57,-47,-4,-20,-23,-32,-36,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),'do':([2,4,9,12,15,19,23,44,46,50,54,55,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,101,102,103,105,108,109,111,115,116,118,122,123,125,126,128,129,130,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,-19,-43,-21,-35,92,97,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,-46,-6,-30,-37,-40,-54,-34,-57,-47,-4,-20,-23,-36,-52,-55,-48,-45,-41,-2,-49,-5,-31,133,-50,-51,-42,]),')':([2,4,9,12,15,19,23,42,44,46,50,53,54,56,57,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,81,82,86,90,93,94,98,99,101,102,103,105,108,109,110,111,115,116,118,122,123,125,126,128,129,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,80,-19,-43,-21,-33,-35,93,94,98,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,102,-46,-6,-30,-37,-40,-54,116,-34,-57,-47,-4,-20,-23,-32,-36,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),'in':([2,4,9,12,15,19,23,44,46,50,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,100,101,102,103,105,108,109,111,115,116,118,122,123,125,126,128,129,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,-19,-43,-21,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,-46,-6,-30,-37,-40,-54,117,-34,-57,-47,-4,-20,-23,-36,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),'else':([2,4,9,12,15,19,23,44,46,50,54,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,80,82,86,90,93,94,98,101,102,103,105,108,109,111,115,116,118,122,123,125,126,128,129,131,134,135,],[-1,-3,-17,-22,-38,-39,-53,-19,-43,-21,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-44,-56,-46,-6,-30,-37,-40,-54,-34,-57,-47,-4,-20,121,-36,-52,-55,-48,-45,-41,-2,-49,-5,-31,-50,-51,-42,]),'assign':([4,38,45,],[39,76,85,]),'.':([4,43,83,104,119,127,],[43,83,104,119,127,132,]),'as':([44,],[84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[1,46,48,50,51,53,54,55,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,79,53,48,53,100,106,107,109,53,111,48,114,115,122,125,128,129,130,135,]),'dot_expression':([0,7,8,11,13,14,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,49,61,76,85,87,89,91,92,95,96,97,112,117,120,121,124,133,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'sequence':([8,49,95,],[47,88,113,]),'id_list':([14,18,42,61,91,],[52,56,81,99,110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> letrec ID assign expression lambda expression','expression',6,'p_expression_letrec','letrec_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> string','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> struct { sequence }','expression',4,'p_expression_struct','struct_parser.py',19),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',19),
  ('expression -> char','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',23),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',24),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> [ id_list ]','expression',3,'p_expression_types_array','types_parser.py',24),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('id_list -> expression , id_list','id_list',3,'p_expression_expr_ids2','lambda_parser.py',26),
  ('id_list -> expression','id_list',1,'p_expression_expr_ids2','lambda_parser.py',27),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','types_parser.py',28),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression -> ( id_list )','expression',3,'p_expression_types_list','types_parser.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> extend ID { sequence }','expression',5,'p_expression_struct_extend','struct_parser.py',41),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> lambda expression','expression',2,'p_expression_lambda_args','lambda_parser.py',44),
  ('expression -> ID lambda expression','expression',3,'p_expression_lambda_args','lambda_parser.py',45),
  ('expression -> ( id_list ) lambda expression','expression',5,'p_expression_lambda_args','lambda_parser.py',46),
  ('dot_expression -> ID . ID','dot_expression',3,'p_expression_dot_struct','struct_parser.py',45),
  ('dot_expression -> ID . . ID','dot_expression',4,'p_expression_dot_struct','struct_parser.py',46),
  ('dot_expression -> ID . . . ID','dot_expression',5,'p_expression_dot_struct','struct_parser.py',47),
  ('dot_expression -> ID . . . . ID','dot_expression',6,'p_expression_dot_struct','struct_parser.py',48),
  ('dot_expression -> ID . . . . . ID','dot_expression',7,'p_expression_dot_struct','struct_parser.py',49),
  ('dot_expression -> ID . . . . . . ID','dot_expression',8,'p_expression_dot_struct','struct_parser.py',50),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',47),
  ('expression -> dot_expression','expression',1,'p_expression_struct_use_parent_WORKING','struct_parser.py',56),
  ('expression -> dot_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',57),
  ('expression -> dot_expression ( id_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',58),
  ('expression -> ID ( )','expression',3,'p_expression_call_no_vars','lambda_parser.py',62),
  ('expression -> ID ( id_list )','expression',4,'p_expression_call_args','lambda_parser.py',66),
]
