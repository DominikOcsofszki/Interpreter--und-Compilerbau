
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionnonassoclambdanonassocthennonassocelsedorightassignleftorleftandnandleft=neqseqnotleft<>legeleft+-left*/rightnotUMINUSBOOL ID NUMBER and array as assign char do else eq float for ge if import in lambda le list local loop nand neqs not or string then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression :  ID lambda expressionexpression : "{" sequence "}"expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : ID assign expressionexpression : import IDsequence :   sequence ";" expression\n                |   expression\n    expression : if expression then expression\n    expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : if expression then expression else expression\n    expression : not expression\n    expression : loop expression do expression\n    expression : "-" expression %prec UMINUSexpression : NUMBER expression : BOOLexpression : "(" expression ")"expression : for expression ";" expression ";" expression do expression\n    expression : while expression do expression\n    '
    
_lr_action_items = {'float':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,60,62,63,64,66,67,75,76,77,81,],[4,30,33,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,69,4,4,4,4,4,4,4,4,4,]),'import':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'{':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'not':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'loop':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'-':([0,1,2,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[8,27,-1,-3,8,8,8,8,8,-30,-31,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-18,27,27,-29,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-22,-23,-24,-25,8,27,27,-6,8,8,8,-32,8,8,27,-4,27,27,27,27,27,8,8,8,27,27,27,8,27,]),'NUMBER':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'BOOL':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'(':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'for':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'while':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'$end':([1,2,4,11,12,33,37,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,69,71,72,74,78,79,82,],[0,-1,-3,-30,-31,-18,-29,-27,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,-5,-17,-6,-32,-4,-21,-28,-34,-2,-26,-33,]),'and':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[16,-1,-3,-30,-31,-18,16,16,-29,-27,16,16,16,16,-7,-8,-9,-10,-11,-12,-13,-14,16,-16,-22,-23,-24,-25,16,16,-6,-32,16,-4,16,16,16,16,16,16,16,16,16,]),'eq':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[17,-1,-3,-30,-31,-18,17,17,-29,-27,17,17,17,17,17,-8,-9,-10,-11,-12,-13,-14,17,17,-22,-23,-24,-25,17,17,-6,-32,17,-4,17,17,17,17,17,17,17,17,17,]),'=':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[18,-1,-3,-30,-31,-18,18,18,-29,-27,18,18,18,18,18,-8,-9,-10,-11,-12,-13,-14,18,18,-22,-23,-24,-25,18,18,-6,-32,18,-4,18,18,18,18,18,18,18,18,18,]),'>':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[19,-1,-3,-30,-31,-18,19,19,-29,19,19,19,19,19,19,19,19,-10,-11,-12,-13,19,19,19,-22,-23,-24,-25,19,19,-6,-32,19,-4,19,19,19,19,19,19,19,19,19,]),'<':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[20,-1,-3,-30,-31,-18,20,20,-29,20,20,20,20,20,20,20,20,-10,-11,-12,-13,20,20,20,-22,-23,-24,-25,20,20,-6,-32,20,-4,20,20,20,20,20,20,20,20,20,]),'ge':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[21,-1,-3,-30,-31,-18,21,21,-29,21,21,21,21,21,21,21,21,-10,-11,-12,-13,21,21,21,-22,-23,-24,-25,21,21,-6,-32,21,-4,21,21,21,21,21,21,21,21,21,]),'le':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[22,-1,-3,-30,-31,-18,22,22,-29,22,22,22,22,22,22,22,22,-10,-11,-12,-13,22,22,22,-22,-23,-24,-25,22,22,-6,-32,22,-4,22,22,22,22,22,22,22,22,22,]),'neqs':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[23,-1,-3,-30,-31,-18,23,23,-29,-27,23,23,23,23,23,-8,-9,-10,-11,-12,-13,-14,23,23,-22,-23,-24,-25,23,23,-6,-32,23,-4,23,23,23,23,23,23,23,23,23,]),'or':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[24,-1,-3,-30,-31,-18,24,24,-29,-27,24,24,24,24,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,24,24,-6,-32,24,-4,24,24,24,24,24,24,24,24,24,]),'nand':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[25,-1,-3,-30,-31,-18,25,25,-29,-27,25,25,25,25,-7,-8,-9,-10,-11,-12,-13,-14,25,-16,-22,-23,-24,-25,25,25,-6,-32,25,-4,25,25,25,25,25,25,25,25,25,]),'+':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[26,-1,-3,-30,-31,-18,26,26,-29,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-22,-23,-24,-25,26,26,-6,-32,26,-4,26,26,26,26,26,26,26,26,26,]),'*':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[28,-1,-3,-30,-31,-18,28,28,-29,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-24,-25,28,28,-6,-32,28,-4,28,28,28,28,28,28,28,28,28,]),'/':([1,2,4,11,12,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,70,71,72,73,74,78,79,80,82,],[29,-1,-3,-30,-31,-18,29,29,-29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-24,-25,29,29,-6,-32,29,-4,29,29,29,29,29,29,29,29,29,]),'}':([2,4,11,12,33,34,35,37,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,69,70,71,72,74,78,79,82,],[-1,-3,-30,-31,-18,61,-20,-29,-27,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,-5,-17,-6,-32,-4,-19,-21,-28,-34,-2,-26,-33,]),';':([2,4,11,12,33,34,35,37,38,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,69,70,71,72,73,74,78,79,82,],[-1,-3,-30,-31,-18,62,-20,-29,-27,66,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,-5,-17,-6,-32,-4,-19,-21,-28,77,-34,-2,-26,-33,]),'then':([2,4,11,12,33,36,37,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,69,71,72,74,78,79,82,],[-1,-3,-30,-31,-18,63,-29,-27,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,-5,-17,-6,-32,-4,-21,-28,-34,-2,-26,-33,]),'do':([2,4,11,12,33,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,69,71,72,74,78,79,80,82,],[-1,-3,-30,-31,-18,-29,-27,64,67,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,-5,-17,-6,-32,-4,-21,-28,-34,-2,-26,81,-33,]),')':([2,4,11,12,33,37,38,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,69,71,72,74,78,79,82,],[-1,-3,-30,-31,-18,-29,-27,65,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,-5,-17,-6,-32,-4,-21,-28,-34,-2,-26,-33,]),'in':([2,4,11,12,33,37,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,68,69,71,72,74,78,79,82,],[-1,-3,-30,-31,-18,-29,-27,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,-5,-17,-6,-32,75,-4,-21,-28,-34,-2,-26,-33,]),'else':([2,4,11,12,33,37,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,61,65,69,71,72,74,78,79,82,],[-1,-3,-30,-31,-18,-29,-27,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-22,-23,-24,-25,-5,-17,-6,-32,-4,76,-28,-34,-2,-26,-33,]),'lambda':([4,],[31,]),'assign':([4,30,],[32,57,]),'as':([33,],[60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,57,62,63,64,66,67,75,76,77,81,],[1,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,68,70,71,72,73,74,78,79,80,82,]),'sequence':([6,],[34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> ID lambda expression','expression',3,'p_expression_lambda','lambda_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',31),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',47),
]
