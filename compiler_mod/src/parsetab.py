
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightASSIGNrightLAMBDArightLOCALnonassocTHENDOnonassocELSEleftORleftANDNANDleft=NEQSEQleft<>LEGEleft+-left*/rightNOTUMINUSAND AS ASSIGN BOOL CHAR DO ELSE EQ EXTEND FLOAT FOR GE ID IF IMPORT IN LAMBDA LAMBDA_START LE LOCAL LOOP NAND NEQS NOT NUMBER OR STRING STRUCT THEN WHILEexpression : LOCAL ID ASSIGN expression IN expressionexpression : FLOATexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression_list : expression "," expression_list\n        |        expression\n    expression : IDexpression : IF expression THEN expression\n    expression : IMPORT ID AS IDexpression : "{" sequence "}" sequence_struct :   sequence_struct ";" "." ID ASSIGN expression \n                        |  "." ID ASSIGN expression \n                        expression : STRING expression :  dots IDexpression : IF expression THEN expression ELSE expression\n    expression : IMPORT IDsequence :   sequence ";" expression \n                |   expression expression :   expression AND expression\n                    | expression EQ expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression GE expression\n                    | expression LE expression\n                    | expression NEQS expression\n                    | expression OR expression\n                    | expression NAND expression\n    expression :     LAMBDA_START LAMBDA expression\n            |           LAMBDA_START expression_list  LAMBDA expression\n    expression : CHAR expression : "-" expression %prec UMINUSexpression : STRUCT "{" sequence_struct "}" expression : ID ASSIGN expressionexpression : LOOP expression DO expression\n    expression : "[" expression_list "]"expression : NUMBERexpression : EXTEND ID "{" sequence_struct "}" expression : dots ID ASSIGN expressionexpression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : ID "[" NUMBER "]"expression : FOR expression ";" expression ";" expression DO expression\n    dots :    "."\n        |       "." dots\n    expression : "(" expression_list ")"expression : WHILE expression DO expression\n    dot_expression : ID dots ID\n                    |   dots ID\n    expression : dot_expression\n                |   dot_expression "(" ")"\n                |   dot_expression "(" expression_list ")"\n\n    expression : NOT expression\n     expression : BOOL'
    
_lr_action_items = {'LOCAL':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'FLOAT':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'ID':([0,2,5,6,7,8,10,11,14,15,17,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,43,50,60,62,77,83,84,86,87,89,90,92,93,97,98,118,119,120,121,123,129,130,],[3,39,3,3,46,3,49,3,3,3,56,3,3,3,3,-46,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,82,3,3,-47,3,3,105,3,3,3,3,112,3,3,3,3,3,126,3,3,3,3,]),'IF':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'IMPORT':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'{':([0,5,6,8,11,13,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,56,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[8,8,8,8,8,53,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,95,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'STRING':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'LAMBDA_START':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'CHAR':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'-':([0,1,3,4,5,6,8,9,11,12,14,15,16,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,44,45,46,48,49,50,51,54,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,82,83,85,86,87,88,89,90,93,94,96,97,98,99,101,102,103,104,105,106,107,109,110,113,115,116,117,118,119,121,122,123,124,125,127,128,129,130,131,132,],[5,26,-9,-2,5,5,5,-15,5,-33,5,5,-39,5,5,5,-52,5,-56,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-34,26,-18,26,-16,5,26,26,26,26,5,-55,-3,-4,-5,-6,26,26,26,26,26,26,26,26,26,26,5,26,-42,-50,5,-12,5,5,26,5,5,5,-38,-48,5,5,-53,26,-43,-44,26,-11,26,26,26,-35,26,26,26,-54,5,5,5,-40,5,26,26,26,26,5,5,26,26,]),'STRUCT':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LOOP':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'[':([0,3,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[15,42,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'NUMBER':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'EXTEND':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'FOR':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'(':([0,3,5,6,8,11,14,15,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,49,50,60,77,82,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[18,41,18,18,18,18,18,18,18,18,18,60,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-51,18,18,18,-50,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WHILE':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'NOT':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'BOOL':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'.':([0,3,5,6,8,11,14,15,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,53,60,77,83,86,87,89,90,93,95,97,98,111,118,119,121,123,129,130,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,92,24,24,24,24,24,24,24,24,92,24,24,120,24,24,24,24,24,24,]),'$end':([1,3,4,9,12,16,21,23,44,46,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,102,103,104,105,107,109,110,113,116,117,122,124,125,132,],[0,-9,-2,-15,-33,-39,-52,-56,-34,-18,-16,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,-38,-48,-53,-43,-44,-10,-11,-41,-32,-35,-37,-49,-54,-40,-1,-17,-45,]),'+':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[25,-9,-2,-15,-33,-39,-52,-56,-34,25,-18,25,-16,25,25,25,25,-55,-3,-4,-5,-6,25,25,25,25,25,25,25,25,25,25,25,-42,-50,-12,25,-38,-48,-53,25,-43,-44,25,-11,25,25,25,-35,25,25,25,-54,-40,25,25,25,25,25,25,]),'*':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[27,-9,-2,-15,-33,-39,-52,-56,-34,27,-18,27,-16,27,27,27,27,-55,27,27,-5,-6,27,27,27,27,27,27,27,27,27,27,27,-42,-50,-12,27,-38,-48,-53,27,-43,-44,27,-11,27,27,27,-35,27,27,27,-54,-40,27,27,27,27,27,27,]),'/':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[28,-9,-2,-15,-33,-39,-52,-56,-34,28,-18,28,-16,28,28,28,28,-55,28,28,-5,-6,28,28,28,28,28,28,28,28,28,28,28,-42,-50,-12,28,-38,-48,-53,28,-43,-44,28,-11,28,28,28,-35,28,28,28,-54,-40,28,28,28,28,28,28,]),'AND':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[29,-9,-2,-15,-33,-39,-52,-56,-34,29,-18,29,-16,29,29,29,29,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,29,-30,29,-42,-50,-12,29,-38,-48,-53,29,-43,-44,29,-11,29,29,29,-35,29,29,29,-54,-40,29,29,29,29,29,29,]),'EQ':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[30,-9,-2,-15,-33,-39,-52,-56,-34,30,-18,30,-16,30,30,30,30,-55,-3,-4,-5,-6,30,-22,-23,-24,-25,-26,-27,-28,30,30,30,-42,-50,-12,30,-38,-48,-53,30,-43,-44,30,-11,30,30,30,-35,30,30,30,-54,-40,30,30,30,30,30,30,]),'=':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[31,-9,-2,-15,-33,-39,-52,-56,-34,31,-18,31,-16,31,31,31,31,-55,-3,-4,-5,-6,31,-22,-23,-24,-25,-26,-27,-28,31,31,31,-42,-50,-12,31,-38,-48,-53,31,-43,-44,31,-11,31,31,31,-35,31,31,31,-54,-40,31,31,31,31,31,31,]),'>':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[32,-9,-2,-15,-33,-39,-52,-56,-34,32,-18,32,-16,32,32,32,32,-55,-3,-4,-5,-6,32,32,32,-24,-25,-26,-27,32,32,32,32,-42,-50,-12,32,-38,-48,-53,32,-43,-44,32,-11,32,32,32,-35,32,32,32,-54,-40,32,32,32,32,32,32,]),'<':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[33,-9,-2,-15,-33,-39,-52,-56,-34,33,-18,33,-16,33,33,33,33,-55,-3,-4,-5,-6,33,33,33,-24,-25,-26,-27,33,33,33,33,-42,-50,-12,33,-38,-48,-53,33,-43,-44,33,-11,33,33,33,-35,33,33,33,-54,-40,33,33,33,33,33,33,]),'GE':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[34,-9,-2,-15,-33,-39,-52,-56,-34,34,-18,34,-16,34,34,34,34,-55,-3,-4,-5,-6,34,34,34,-24,-25,-26,-27,34,34,34,34,-42,-50,-12,34,-38,-48,-53,34,-43,-44,34,-11,34,34,34,-35,34,34,34,-54,-40,34,34,34,34,34,34,]),'LE':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[35,-9,-2,-15,-33,-39,-52,-56,-34,35,-18,35,-16,35,35,35,35,-55,-3,-4,-5,-6,35,35,35,-24,-25,-26,-27,35,35,35,35,-42,-50,-12,35,-38,-48,-53,35,-43,-44,35,-11,35,35,35,-35,35,35,35,-54,-40,35,35,35,35,35,35,]),'NEQS':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[36,-9,-2,-15,-33,-39,-52,-56,-34,36,-18,36,-16,36,36,36,36,-55,-3,-4,-5,-6,36,-22,-23,-24,-25,-26,-27,-28,36,36,36,-42,-50,-12,36,-38,-48,-53,36,-43,-44,36,-11,36,36,36,-35,36,36,36,-54,-40,36,36,36,36,36,36,]),'OR':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[37,-9,-2,-15,-33,-39,-52,-56,-34,37,-18,37,-16,37,37,37,37,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,37,-42,-50,-12,37,-38,-48,-53,37,-43,-44,37,-11,37,37,37,-35,37,37,37,-54,-40,37,37,37,37,37,37,]),'NAND':([1,3,4,9,12,16,21,23,44,45,46,48,49,51,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,106,107,109,110,113,115,116,117,122,124,125,127,128,131,132,],[38,-9,-2,-15,-33,-39,-52,-56,-34,38,-18,38,-16,38,38,38,38,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,38,-30,38,-42,-50,-12,38,-38,-48,-53,38,-43,-44,38,-11,38,38,38,-35,38,38,38,-54,-40,38,38,38,38,38,38,]),'THEN':([3,4,9,12,16,21,23,44,45,46,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,102,103,104,105,107,109,110,113,116,117,122,124,125,132,],[-9,-2,-15,-33,-39,-52,-56,-34,83,-18,-16,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,-38,-48,-53,-43,-44,-10,-11,-41,-32,-35,-37,-49,-54,-40,-1,-17,-45,]),'}':([3,4,9,12,16,21,23,44,46,47,48,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,91,94,96,99,102,103,104,105,106,107,109,110,113,114,116,117,122,124,125,127,131,132,],[-9,-2,-15,-33,-39,-52,-56,-34,-18,85,-20,-16,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,110,-38,-48,-53,-43,-44,-10,-11,-19,-41,-32,-35,-37,122,-49,-54,-40,-1,-17,-14,-13,-45,]),';':([3,4,9,12,16,21,23,44,46,47,48,49,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,91,94,96,99,102,103,104,105,106,107,109,110,113,114,115,116,117,122,124,125,127,131,132,],[-9,-2,-15,-33,-39,-52,-56,-34,-18,86,-20,-16,97,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,111,-38,-48,-53,-43,-44,-10,-11,-19,-41,-32,-35,-37,111,123,-49,-54,-40,-1,-17,-14,-13,-45,]),',':([3,4,9,12,16,21,23,44,46,49,51,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,102,103,104,105,107,109,110,113,116,117,122,124,125,132,],[-9,-2,-15,-33,-39,-52,-56,-34,-18,-16,89,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,-38,-48,-53,-43,-44,-10,-11,-41,-32,-35,-37,-49,-54,-40,-1,-17,-45,]),'LAMBDA':([3,4,9,11,12,16,21,23,44,46,49,51,52,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,102,103,104,105,107,108,109,110,113,116,117,122,124,125,132,],[-9,-2,-15,50,-33,-39,-52,-56,-34,-18,-16,-8,90,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,-38,-48,-53,-43,-44,-10,-11,-41,-7,-32,-35,-37,-49,-54,-40,-1,-17,-45,]),'DO':([3,4,9,12,16,21,23,44,46,49,54,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,102,103,104,105,107,109,110,113,116,117,122,124,125,128,132,],[-9,-2,-15,-33,-39,-52,-56,-34,-18,-16,93,98,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,-38,-48,-53,-43,-44,-10,-11,-41,-32,-35,-37,-49,-54,-40,-1,-17,130,-45,]),']':([3,4,9,12,16,21,23,44,46,49,51,55,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,81,82,85,88,94,96,99,102,103,104,105,107,108,109,110,113,116,117,122,124,125,132,],[-9,-2,-15,-33,-39,-52,-56,-34,-18,-16,-8,94,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,103,-50,-12,-31,-38,-48,-53,-43,-44,-10,-11,-41,-7,-32,-35,-37,-49,-54,-40,-1,-17,-45,]),')':([3,4,9,12,16,21,23,41,44,46,49,51,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,85,88,94,96,99,100,102,103,104,105,107,108,109,110,113,116,117,122,124,125,132,],[-9,-2,-15,-33,-39,-52,-56,79,-34,-18,-16,-8,96,99,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,102,-50,-12,-31,-38,-48,-53,117,-43,-44,-10,-11,-41,-7,-32,-35,-37,-49,-54,-40,-1,-17,-45,]),'IN':([3,4,9,12,16,21,23,44,46,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,101,102,103,104,105,107,109,110,113,116,117,122,124,125,132,],[-9,-2,-15,-33,-39,-52,-56,-34,-18,-16,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,-38,-48,-53,118,-43,-44,-10,-11,-41,-32,-35,-37,-49,-54,-40,-1,-17,-45,]),'ELSE':([3,4,9,12,16,21,23,44,46,49,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,85,88,94,96,99,102,103,104,105,107,109,110,113,116,117,122,124,125,132,],[-9,-2,-15,-33,-39,-52,-56,-34,-18,-16,-55,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-50,-12,-31,-38,-48,-53,-43,-44,119,-11,-41,-32,-35,-37,-49,-54,-40,-1,-17,-45,]),'ASSIGN':([3,39,49,112,126,],[40,77,87,121,129,]),'AS':([46,],[84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[1,44,45,48,51,54,51,51,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,51,88,51,101,104,106,107,51,109,113,115,116,124,125,127,128,131,132,]),'dots':([0,3,5,6,8,11,14,15,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[10,43,10,10,10,10,10,10,10,10,10,10,62,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'dot_expression':([0,5,6,8,11,14,15,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,60,77,83,86,87,89,90,93,97,98,118,119,121,123,129,130,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'sequence':([8,],[47,]),'expression_list':([11,15,18,41,60,89,],[52,55,57,80,100,108,]),'sequence_struct':([53,95,],[91,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> LOCAL ID ASSIGN expression IN expression','expression',6,'p_expression_local','local_parser.py',12),
  ('expression -> FLOAT','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',13),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',14),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',15),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',16),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',13),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',14),
  ('expression -> ID','expression',1,'p_expression_read_id','write_read_parser.py',13),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','control_parser.py',14),
  ('expression -> IMPORT ID AS ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('sequence_struct -> sequence_struct ; . ID ASSIGN expression','sequence_struct',6,'p_expression_expressions_struct','struct_parser.py',15),
  ('sequence_struct -> . ID ASSIGN expression','sequence_struct',4,'p_expression_expressions_struct','struct_parser.py',16),
  ('expression -> STRING','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> dots ID','expression',2,'p_expression_read_parent_id','write_read_parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','control_parser.py',18),
  ('expression -> IMPORT ID','expression',2,'p_expression_import','import_parser.py',18),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> expression NEQS expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',26),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',27),
  ('expression -> expression NAND expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',28),
  ('expression -> LAMBDA_START LAMBDA expression','expression',3,'p_expression_lambda_args_WORKING','lambda_parser.py',19),
  ('expression -> LAMBDA_START expression_list LAMBDA expression','expression',4,'p_expression_lambda_args_WORKING','lambda_parser.py',20),
  ('expression -> CHAR','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> - expression','expression',2,'p_expr_uminus','arith_parser.py',21),
  ('expression -> STRUCT { sequence_struct }','expression',4,'p_expression__new_struct','struct_parser.py',22),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_write_id','write_read_parser.py',22),
  ('expression -> LOOP expression DO expression','expression',4,'p_expression_loop_do_expr','control_parser.py',24),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','types_parser.py',24),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',25),
  ('expression -> EXTEND ID { sequence_struct }','expression',5,'p_expression_struct_extend','struct_parser.py',26),
  ('expression -> dots ID ASSIGN expression','expression',4,'p_expression_write_id_dots','write_read_parser.py',26),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',28),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',29),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','types_parser.py',28),
  ('expression -> FOR expression ; expression ; expression DO expression','expression',8,'p_expression_for_do_expr','control_parser.py',29),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',30),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',31),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','types_parser.py',32),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while_do_expr','control_parser.py',34),
  ('dot_expression -> ID dots ID','dot_expression',3,'p_expression_dot_struct','struct_parser.py',36),
  ('dot_expression -> dots ID','dot_expression',2,'p_expression_dot_struct','struct_parser.py',37),
  ('expression -> dot_expression','expression',1,'p_expression_struct_use_parent_WORKING','struct_parser.py',42),
  ('expression -> dot_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',43),
  ('expression -> dot_expression ( expression_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',44),
  ('expression -> NOT expression','expression',2,'p_expression_unary_operators_not','bool_parser.py',44),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',49),
]
