
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightASSIGNrightLAMBDArightLOCALnonassocTHENDOnonassocELSEleftORleftANDNANDleft=NEQSEQleft<>LEGEleft+-left*/rightNOTUMINUSAND AS ASSIGN BOOL CHAR DO ELSE EQ EXTEND FLOAT FOR GE ID IF IMPORT IN LAMBDA LAMBDA_START LE LOCAL LOOP NAND NEQS NOT NUMBER OR STRING STRUCT THEN WHILEexpression : "-" expression %prec UMINUSexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : STRUCT "{" sequence_struct "}" expression_list :    expression "," expression_list\n                    |       expression\n    expression : NUMBERexpression : "{" sequence "}" expression : EXTEND ID "{" sequence_struct "}" expression : LOCAL ID ASSIGN expression IN expression expression : BOOLexpression : IF expression THEN expression\n    expression : IMPORT ID AS IDsequence_struct :    struct_assign \n                      |     sequence_struct ";"  struct_assign \n                      sequence :   expression \n                |   sequence ";" expression expression : FLOATexpression : IF expression THEN expression ELSE expression\n    expression : IMPORT IDexpression :   expression AND expression\n                    | expression EQ expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression GE expression\n                    | expression LE expression\n                    | expression NEQS expression\n                    | expression OR expression\n                    | expression NAND expression\n    expression : STRING struct_assign :    "."  ID ASSIGN expression\n                    |     "."  ID ASSIGN lambda_expression\n                    |     "."  ID ASSIGN lambda_expression_struct\n    expression : LOOP expression DO expression\n    expression : CHAR expression : FOR expression ";" expression ";" expression DO expression\n    expression : IDlambda_expression_struct :   LAMBDA_START LAMBDA dots expression\n                        |           LAMBDA_START expression_list  LAMBDA dots expression\n    expression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : WHILE expression DO expression\n    assign_expression :  ID ASSIGN expression\n                       |    ID ASSIGN lambda_expression\n       expression : assign_expression\n    expression : "[" expression_list "]"dots :   "."\n            |   "." dots\n    expression : ID "[" NUMBER "]"expression : "(" expression_list ")"expression : ID dots IDexpression : ID dots ID "(" ")"\n                |   ID dots ID "(" expression_list ")"\n    expression : NOT expression \n    lambda_expression :      LAMBDA_START LAMBDA expression\n                    |           LAMBDA_START expression_list  LAMBDA expression\n        expression : lambda_expression\n    '
    
_lr_action_items = {'-':([0,1,2,4,5,7,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,41,43,46,47,49,50,51,52,54,55,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,78,80,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,101,103,104,105,106,107,108,109,110,112,113,115,116,117,119,120,121,122,123,125,126,127,128,129,130,132,133,134,135,136,137,138,],[2,25,2,2,-9,-40,-13,2,-20,-33,2,-38,2,2,2,-48,2,2,-60,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-1,25,2,2,-50,25,-22,25,25,25,25,-57,2,-2,-3,-4,-5,25,25,25,25,25,25,25,25,25,25,-10,2,-43,-54,25,-47,-51,2,2,2,2,-53,2,2,-49,25,2,-6,25,-44,-52,2,25,25,-15,25,25,25,25,2,-11,-55,2,2,2,25,-60,2,-56,25,25,25,2,2,2,2,25,25,2,25,]),'STRUCT':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,-50,3,3,-51,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'NUMBER':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,44,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,82,5,-50,5,5,-51,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'{':([0,2,3,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,42,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,79,4,4,-50,4,4,-51,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'EXTEND':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-50,6,6,-51,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'LOCAL':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-50,8,8,-51,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'BOOL':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-50,9,9,-51,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'IF':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-50,10,10,-51,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'IMPORT':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-50,11,11,-51,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FLOAT':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-50,12,12,-51,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'STRING':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-50,13,13,-51,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LOOP':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-50,14,14,-51,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'CHAR':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-50,15,15,-51,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'FOR':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-50,16,16,-51,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'ID':([0,2,4,6,8,10,11,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,45,46,47,58,76,78,86,87,88,89,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[7,7,7,42,48,7,50,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,83,7,-50,7,100,7,-51,7,7,108,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'WHILE':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-50,18,18,-51,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'[':([0,2,4,7,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[20,20,20,44,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-50,20,20,-51,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'(':([0,2,4,7,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,83,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[17,17,17,43,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-50,17,17,105,-51,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'NOT':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-50,21,21,-51,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'LAMBDA_START':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,47,58,78,86,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-50,23,23,-51,23,23,23,23,23,23,23,23,125,23,23,23,23,23,23,23,23,23,]),'$end':([1,5,7,9,12,13,15,19,22,38,50,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,103,104,107,108,109,112,113,116,117,126,127,128,135,],[0,-9,-40,-13,-20,-33,-38,-48,-60,-1,-22,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,-54,-46,-47,-53,-49,-58,-6,-44,-52,-14,-15,-37,-45,-59,-11,-55,-56,-12,-21,-39,]),'+':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[24,-9,-40,-13,-20,-33,-38,-48,-60,-1,24,24,-22,24,24,24,24,-57,-2,-3,-4,-5,24,24,24,24,24,24,24,24,24,24,-10,-43,-54,24,-47,-53,-49,24,-6,24,-44,-52,24,24,-15,24,24,24,24,-11,-55,24,-60,-56,24,24,24,24,24,24,]),'*':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[26,-9,-40,-13,-20,-33,-38,-48,-60,-1,26,26,-22,26,26,26,26,-57,26,26,-4,-5,26,26,26,26,26,26,26,26,26,26,-10,-43,-54,26,-47,-53,-49,26,-6,26,-44,-52,26,26,-15,26,26,26,26,-11,-55,26,-60,-56,26,26,26,26,26,26,]),'/':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[27,-9,-40,-13,-20,-33,-38,-48,-60,-1,27,27,-22,27,27,27,27,-57,27,27,-4,-5,27,27,27,27,27,27,27,27,27,27,-10,-43,-54,27,-47,-53,-49,27,-6,27,-44,-52,27,27,-15,27,27,27,27,-11,-55,27,-60,-56,27,27,27,27,27,27,]),'AND':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[28,-9,-40,-13,-20,-33,-38,-48,-60,-1,28,28,-22,28,28,28,28,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,28,-32,-10,-43,-54,28,-47,-53,-49,28,-6,28,-44,-52,28,28,-15,28,28,28,28,-11,-55,28,-60,-56,28,28,28,28,28,28,]),'EQ':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[29,-9,-40,-13,-20,-33,-38,-48,-60,-1,29,29,-22,29,29,29,29,-57,-2,-3,-4,-5,29,-24,-25,-26,-27,-28,-29,-30,29,29,-10,-43,-54,29,-47,-53,-49,29,-6,29,-44,-52,29,29,-15,29,29,29,29,-11,-55,29,-60,-56,29,29,29,29,29,29,]),'=':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[30,-9,-40,-13,-20,-33,-38,-48,-60,-1,30,30,-22,30,30,30,30,-57,-2,-3,-4,-5,30,-24,-25,-26,-27,-28,-29,-30,30,30,-10,-43,-54,30,-47,-53,-49,30,-6,30,-44,-52,30,30,-15,30,30,30,30,-11,-55,30,-60,-56,30,30,30,30,30,30,]),'>':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[31,-9,-40,-13,-20,-33,-38,-48,-60,-1,31,31,-22,31,31,31,31,-57,-2,-3,-4,-5,31,31,31,-26,-27,-28,-29,31,31,31,-10,-43,-54,31,-47,-53,-49,31,-6,31,-44,-52,31,31,-15,31,31,31,31,-11,-55,31,-60,-56,31,31,31,31,31,31,]),'<':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[32,-9,-40,-13,-20,-33,-38,-48,-60,-1,32,32,-22,32,32,32,32,-57,-2,-3,-4,-5,32,32,32,-26,-27,-28,-29,32,32,32,-10,-43,-54,32,-47,-53,-49,32,-6,32,-44,-52,32,32,-15,32,32,32,32,-11,-55,32,-60,-56,32,32,32,32,32,32,]),'GE':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[33,-9,-40,-13,-20,-33,-38,-48,-60,-1,33,33,-22,33,33,33,33,-57,-2,-3,-4,-5,33,33,33,-26,-27,-28,-29,33,33,33,-10,-43,-54,33,-47,-53,-49,33,-6,33,-44,-52,33,33,-15,33,33,33,33,-11,-55,33,-60,-56,33,33,33,33,33,33,]),'LE':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[34,-9,-40,-13,-20,-33,-38,-48,-60,-1,34,34,-22,34,34,34,34,-57,-2,-3,-4,-5,34,34,34,-26,-27,-28,-29,34,34,34,-10,-43,-54,34,-47,-53,-49,34,-6,34,-44,-52,34,34,-15,34,34,34,34,-11,-55,34,-60,-56,34,34,34,34,34,34,]),'NEQS':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[35,-9,-40,-13,-20,-33,-38,-48,-60,-1,35,35,-22,35,35,35,35,-57,-2,-3,-4,-5,35,-24,-25,-26,-27,-28,-29,-30,35,35,-10,-43,-54,35,-47,-53,-49,35,-6,35,-44,-52,35,35,-15,35,35,35,35,-11,-55,35,-60,-56,35,35,35,35,35,35,]),'OR':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[36,-9,-40,-13,-20,-33,-38,-48,-60,-1,36,36,-22,36,36,36,36,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,-54,36,-47,-53,-49,36,-6,36,-44,-52,36,36,-15,36,36,36,36,-11,-55,36,-60,-56,36,36,36,36,36,36,]),'NAND':([1,5,7,9,12,13,15,19,22,38,41,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,101,103,104,106,107,108,109,110,112,113,116,117,122,123,126,127,128,129,135,136,138,],[37,-9,-40,-13,-20,-33,-38,-48,-60,-1,37,37,-22,37,37,37,37,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,37,-32,-10,-43,-54,37,-47,-53,-49,37,-6,37,-44,-52,37,37,-15,37,37,37,37,-11,-55,37,-60,-56,37,37,37,37,37,37,]),'}':([5,7,9,12,13,15,19,22,38,40,41,50,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,83,84,85,92,95,96,98,101,102,103,104,107,108,109,112,113,114,116,117,122,123,124,126,127,128,135,136,138,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,77,-18,-22,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,98,-16,-10,-43,-54,-46,-47,-53,-49,-58,-6,-19,116,-44,-52,-14,-15,-37,-45,-59,-17,-11,-55,-34,-35,-36,-56,-12,-21,-39,-41,-42,]),';':([5,7,9,12,13,15,19,22,38,40,41,50,52,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,80,83,84,85,92,95,96,98,101,102,103,104,107,108,109,110,112,113,114,116,117,122,123,124,126,127,128,135,136,138,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,78,-18,-22,91,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,99,-16,-10,-43,-54,-46,-47,-53,-49,-58,-6,-19,99,-44,-52,-14,-15,-37,121,-45,-59,-17,-11,-55,-34,-35,-36,-56,-12,-21,-39,-41,-42,]),'THEN':([5,7,9,12,13,15,19,22,38,49,50,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,103,104,107,108,109,112,113,116,117,126,127,128,135,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,88,-22,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,-54,-46,-47,-53,-49,-58,-6,-44,-52,-14,-15,-37,-45,-59,-11,-55,-56,-12,-21,-39,]),'DO':([5,7,9,12,13,15,19,22,38,50,51,55,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,103,104,107,108,109,112,113,116,117,126,127,128,129,135,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,-22,90,94,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,-54,-46,-47,-53,-49,-58,-6,-44,-52,-14,-15,-37,-45,-59,-11,-55,-56,-12,-21,132,-39,]),',':([5,7,9,12,13,15,19,22,38,50,54,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,103,104,107,108,109,112,113,116,117,126,127,128,135,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,-22,93,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,-54,-46,-47,-53,-49,-58,-6,-44,-52,-14,-15,-37,-45,-59,-11,-55,-56,-12,-21,-39,]),')':([5,7,9,12,13,15,19,22,38,43,50,53,54,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,81,83,84,85,92,95,96,98,103,104,105,107,108,109,111,112,113,116,117,118,126,127,128,135,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,80,-22,92,-8,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,103,-54,-46,-47,-53,-49,-58,-6,-44,-52,117,-14,-15,-37,-7,-45,-59,-11,-55,126,-56,-12,-21,-39,]),']':([5,7,9,12,13,15,19,22,38,50,54,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,82,83,84,85,92,95,96,98,103,104,107,108,109,111,112,113,116,117,126,127,128,135,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,-22,-8,95,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,104,-54,-46,-47,-53,-49,-58,-6,-44,-52,-14,-15,-37,-7,-45,-59,-11,-55,-56,-12,-21,-39,]),'LAMBDA':([5,7,9,12,13,15,19,22,23,38,50,54,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,103,104,107,108,109,111,112,113,116,117,125,126,127,128,131,135,],[-9,-40,-13,-20,-33,-38,-48,-60,58,-1,-22,-8,-57,97,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,-54,-46,-47,-53,-49,-58,-6,-44,-52,-14,-15,-37,-7,-45,-59,-11,-55,130,-56,-12,-21,134,-39,]),'IN':([5,7,9,12,13,15,19,22,38,50,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,103,104,106,107,108,109,112,113,116,117,126,127,128,135,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,-22,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,-54,-46,-47,-53,-49,-58,-6,-44,-52,119,-14,-15,-37,-45,-59,-11,-55,-56,-12,-21,-39,]),'ELSE':([5,7,9,12,13,15,19,22,38,50,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,80,83,84,85,92,95,96,98,103,104,107,108,109,112,113,116,117,126,127,128,135,],[-9,-40,-13,-20,-33,-38,-48,-60,-1,-22,-57,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-43,-54,-46,-47,-53,-49,-58,-6,-44,-52,120,-15,-37,-45,-59,-11,-55,-56,-12,-21,-39,]),'ASSIGN':([7,48,100,],[46,87,115,]),'.':([7,39,47,79,99,130,134,],[47,76,47,76,76,47,47,]),'AS':([50,],[89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,58,78,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[1,38,41,49,51,52,54,55,54,57,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,84,96,101,106,107,109,110,54,112,113,54,122,127,128,129,54,96,135,136,113,138,]),'assign_expression':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,58,78,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'lambda_expression':([0,2,4,10,14,16,17,18,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,43,46,58,78,87,88,90,91,93,94,97,105,115,119,120,121,125,130,132,133,134,137,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,85,22,22,22,22,22,22,22,22,22,22,123,22,22,22,22,22,22,22,22,22,]),'sequence':([4,],[40,]),'dots':([7,47,130,134,],[45,86,133,137,]),'expression_list':([17,20,23,43,93,105,125,],[53,56,59,81,111,118,131,]),'sequence_struct':([39,79,],[74,102,]),'struct_assign':([39,79,99,],[75,75,114,]),'lambda_expression_struct':([115,],[124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> - expression','expression',2,'p_expr_uminus','literals_parser.py',4),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',6),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',7),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',8),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',9),
  ('expression -> STRUCT { sequence_struct }','expression',4,'p_expression__new_struct','struct_parser.py',6),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',7),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',8),
  ('expression -> NUMBER','expression',1,'p_expression_num','literals_parser.py',8),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',10),
  ('expression -> EXTEND ID { sequence_struct }','expression',5,'p_expression_struct_extend','struct_parser.py',10),
  ('expression -> LOCAL ID ASSIGN expression IN expression','expression',6,'p_expression_local','local_parser.py',12),
  ('expression -> BOOL','expression',1,'p_expression_bool','literals_parser.py',13),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','control_parser.py',14),
  ('expression -> IMPORT ID AS ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('sequence_struct -> struct_assign','sequence_struct',1,'p_expression_expressions_struct','struct_parser.py',14),
  ('sequence_struct -> sequence_struct ; struct_assign','sequence_struct',3,'p_expression_expressions_struct','struct_parser.py',15),
  ('sequence -> expression','sequence',1,'p_expression_seq_expr','sequences_parser.py',15),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_seq_expr','sequences_parser.py',16),
  ('expression -> FLOAT','expression',1,'p_expression_types_float','literals_parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','control_parser.py',18),
  ('expression -> IMPORT ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',20),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',21),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',22),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',23),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',24),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',25),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',26),
  ('expression -> expression NEQS expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',27),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',28),
  ('expression -> expression NAND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',29),
  ('expression -> STRING','expression',1,'p_expression_types_string','literals_parser.py',21),
  ('struct_assign -> . ID ASSIGN expression','struct_assign',4,'p_expression_assign_struct_write_id','struct_parser.py',23),
  ('struct_assign -> . ID ASSIGN lambda_expression','struct_assign',4,'p_expression_assign_struct_write_id','struct_parser.py',24),
  ('struct_assign -> . ID ASSIGN lambda_expression_struct','struct_assign',4,'p_expression_assign_struct_write_id','struct_parser.py',25),
  ('expression -> LOOP expression DO expression','expression',4,'p_expression_loop_do_expr','control_parser.py',24),
  ('expression -> CHAR','expression',1,'p_expression_types_char','literals_parser.py',25),
  ('expression -> FOR expression ; expression ; expression DO expression','expression',8,'p_expression_for_do_expr','control_parser.py',29),
  ('expression -> ID','expression',1,'p_expression_read_id','literals_parser.py',30),
  ('lambda_expression_struct -> LAMBDA_START LAMBDA dots expression','lambda_expression_struct',4,'p_expression_lambda__in_struct','struct_parser.py',30),
  ('lambda_expression_struct -> LAMBDA_START expression_list LAMBDA dots expression','lambda_expression_struct',5,'p_expression_lambda__in_struct','struct_parser.py',31),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',31),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',32),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while_do_expr','control_parser.py',34),
  ('assign_expression -> ID ASSIGN expression','assign_expression',3,'p_expression_write_id','struct_parser.py',39),
  ('assign_expression -> ID ASSIGN lambda_expression','assign_expression',3,'p_expression_write_id','struct_parser.py',40),
  ('expression -> assign_expression','expression',1,'p_expression_write_id','struct_parser.py',41),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','binop_parser.py',48),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',49),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',50),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','binop_parser.py',52),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','binop_parser.py',56),
  ('expression -> ID dots ID','expression',3,'p_expression_dot_outside','struct_parser.py',58),
  ('expression -> ID dots ID ( )','expression',5,'p_expression_dot_outside_call','struct_parser.py',65),
  ('expression -> ID dots ID ( expression_list )','expression',6,'p_expression_dot_outside_call','struct_parser.py',66),
  ('expression -> NOT expression','expression',2,'p_expression_unary_operators_not','struct_parser.py',75),
  ('lambda_expression -> LAMBDA_START LAMBDA expression','lambda_expression',3,'p_expression_lambda__outside','struct_parser.py',83),
  ('lambda_expression -> LAMBDA_START expression_list LAMBDA expression','lambda_expression',4,'p_expression_lambda__outside','struct_parser.py',84),
  ('expression -> lambda_expression','expression',1,'p_expression_lambda__outside','struct_parser.py',85),
]
