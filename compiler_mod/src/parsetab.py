
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightASSIGNrightLAMBDArightLOCALnonassocTHENDOnonassocELSEleftORleftANDNANDleft=NEQSEQleft<>LEGEleft+-left*/rightNOTUMINUSAND AS ASSIGN BOOL CHAR DO ELSE EQ EXTEND FLOAT FOR GE ID IF IMPORT IN LAMBDA LAMBDA_START LE LOCAL LOOP NAND NEQS NOT NUMBER OR STRING STRUCT THEN WHILEexpression : LOCAL ID ASSIGN expression IN expressionexpression : FLOATexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression_list : expression "," expression_list\n        |        expression\n    expression : IDexpression : IF expression THEN expression\n    expression : IMPORT ID AS IDexpression : "{" sequence "}" expression : STRING expression :  dots IDexpression : IF expression THEN expression ELSE expression\n    expression : IMPORT IDsequence :   sequence ";" expression \n                |   expression expression : STRUCT "{" sequence "}" expression : "-" expression %prec UMINUSexpression :   expression AND expression\n                    | expression EQ expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression GE expression\n                    | expression LE expression\n                    | expression NEQS expression\n                    | expression OR expression\n                    | expression NAND expression\n    expression :     LAMBDA_START LAMBDA expression\n            |           LAMBDA_START expression_list  LAMBDA expression\n    expression : CHAR expression : NUMBERexpression : EXTEND ID "{" sequence "}" expression : ID ASSIGN expressionexpression : LOOP expression DO expression\n    expression : "[" expression_list "]"expression : "(" expression ")"dots :    "."\n        |       "." dots\n    expression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : ID "[" NUMBER "]"expression : FOR expression ";" expression ";" expression DO expression\n    dot_expression : ID dots ID\n    expression : "(" expression_list ")"expression : WHILE expression DO expression\n    expression : dot_expression\n                |   dot_expression "(" ")"\n                |   dot_expression "(" expression_list ")"\n\n    expression : NOT expression\n     expression : BOOL'
    
_lr_action_items = {'LOCAL':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'FLOAT':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'ID':([0,2,5,6,7,8,10,12,15,16,17,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,43,50,51,61,63,78,84,85,87,90,91,92,93,97,98,115,116,118,122,],[3,39,3,3,46,3,49,3,54,3,3,3,3,3,3,-40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,83,3,3,3,-41,3,3,105,3,3,3,3,3,3,3,3,3,3,3,]),'IF':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'IMPORT':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'{':([0,5,6,8,11,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,54,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[8,8,8,8,50,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,92,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'STRING':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'STRUCT':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'-':([0,1,3,4,5,6,8,9,12,13,14,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,44,45,46,48,49,50,51,52,55,57,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,84,86,87,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,],[5,26,-9,-2,5,5,5,-13,5,-33,-34,5,5,5,5,5,-49,5,-53,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-20,26,-16,26,-14,5,5,26,26,26,26,26,5,-52,-3,-4,-5,-6,26,26,26,26,26,26,26,26,26,26,5,26,-42,-46,5,-12,5,26,5,5,5,5,-38,-39,-47,5,5,-50,26,-43,-44,26,-11,26,-19,26,26,26,26,-51,5,5,-35,5,26,26,26,5,26,]),'LAMBDA_START':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'CHAR':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'NUMBER':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,82,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'EXTEND':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'LOOP':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'[':([0,3,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[17,42,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'(':([0,3,5,6,8,12,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,83,84,87,90,91,92,93,97,98,115,116,118,122,],[18,41,18,18,18,18,18,18,18,18,18,61,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-46,18,18,18,18,18,18,18,18,18,18,18,18,]),'FOR':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'WHILE':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'NOT':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'BOOL':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'.':([0,3,5,6,8,12,16,17,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'$end':([1,3,4,9,13,14,21,23,44,46,49,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,102,103,104,105,107,109,111,113,114,117,119,120,123,],[0,-9,-2,-13,-33,-34,-49,-53,-20,-16,-14,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,-31,-38,-39,-47,-50,-43,-44,-10,-11,-19,-32,-37,-48,-51,-35,-1,-15,-45,]),'+':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[25,-9,-2,-13,-33,-34,-49,-53,-20,25,-16,25,-14,25,25,25,25,25,-52,-3,-4,-5,-6,25,25,25,25,25,25,25,25,25,25,25,-42,-46,-12,25,-38,-39,-47,-50,25,-43,-44,25,-11,25,-19,25,25,25,25,-51,-35,25,25,25,25,]),'*':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[27,-9,-2,-13,-33,-34,-49,-53,-20,27,-16,27,-14,27,27,27,27,27,-52,27,27,-5,-6,27,27,27,27,27,27,27,27,27,27,27,-42,-46,-12,27,-38,-39,-47,-50,27,-43,-44,27,-11,27,-19,27,27,27,27,-51,-35,27,27,27,27,]),'/':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[28,-9,-2,-13,-33,-34,-49,-53,-20,28,-16,28,-14,28,28,28,28,28,-52,28,28,-5,-6,28,28,28,28,28,28,28,28,28,28,28,-42,-46,-12,28,-38,-39,-47,-50,28,-43,-44,28,-11,28,-19,28,28,28,28,-51,-35,28,28,28,28,]),'AND':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[29,-9,-2,-13,-33,-34,-49,-53,-20,29,-16,29,-14,29,29,29,29,29,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,29,-30,29,-42,-46,-12,29,-38,-39,-47,-50,29,-43,-44,29,-11,29,-19,29,29,29,29,-51,-35,29,29,29,29,]),'EQ':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[30,-9,-2,-13,-33,-34,-49,-53,-20,30,-16,30,-14,30,30,30,30,30,-52,-3,-4,-5,-6,30,-22,-23,-24,-25,-26,-27,-28,30,30,30,-42,-46,-12,30,-38,-39,-47,-50,30,-43,-44,30,-11,30,-19,30,30,30,30,-51,-35,30,30,30,30,]),'=':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[31,-9,-2,-13,-33,-34,-49,-53,-20,31,-16,31,-14,31,31,31,31,31,-52,-3,-4,-5,-6,31,-22,-23,-24,-25,-26,-27,-28,31,31,31,-42,-46,-12,31,-38,-39,-47,-50,31,-43,-44,31,-11,31,-19,31,31,31,31,-51,-35,31,31,31,31,]),'>':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[32,-9,-2,-13,-33,-34,-49,-53,-20,32,-16,32,-14,32,32,32,32,32,-52,-3,-4,-5,-6,32,32,32,-24,-25,-26,-27,32,32,32,32,-42,-46,-12,32,-38,-39,-47,-50,32,-43,-44,32,-11,32,-19,32,32,32,32,-51,-35,32,32,32,32,]),'<':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[33,-9,-2,-13,-33,-34,-49,-53,-20,33,-16,33,-14,33,33,33,33,33,-52,-3,-4,-5,-6,33,33,33,-24,-25,-26,-27,33,33,33,33,-42,-46,-12,33,-38,-39,-47,-50,33,-43,-44,33,-11,33,-19,33,33,33,33,-51,-35,33,33,33,33,]),'GE':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[34,-9,-2,-13,-33,-34,-49,-53,-20,34,-16,34,-14,34,34,34,34,34,-52,-3,-4,-5,-6,34,34,34,-24,-25,-26,-27,34,34,34,34,-42,-46,-12,34,-38,-39,-47,-50,34,-43,-44,34,-11,34,-19,34,34,34,34,-51,-35,34,34,34,34,]),'LE':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[35,-9,-2,-13,-33,-34,-49,-53,-20,35,-16,35,-14,35,35,35,35,35,-52,-3,-4,-5,-6,35,35,35,-24,-25,-26,-27,35,35,35,35,-42,-46,-12,35,-38,-39,-47,-50,35,-43,-44,35,-11,35,-19,35,35,35,35,-51,-35,35,35,35,35,]),'NEQS':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[36,-9,-2,-13,-33,-34,-49,-53,-20,36,-16,36,-14,36,36,36,36,36,-52,-3,-4,-5,-6,36,-22,-23,-24,-25,-26,-27,-28,36,36,36,-42,-46,-12,36,-38,-39,-47,-50,36,-43,-44,36,-11,36,-19,36,36,36,36,-51,-35,36,36,36,36,]),'OR':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[37,-9,-2,-13,-33,-34,-49,-53,-20,37,-16,37,-14,37,37,37,37,37,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,37,-42,-46,-12,37,-38,-39,-47,-50,37,-43,-44,37,-11,37,-19,37,37,37,37,-51,-35,37,37,37,37,]),'NAND':([1,3,4,9,13,14,21,23,44,45,46,48,49,52,55,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,106,107,109,111,112,113,114,117,119,120,121,123,],[38,-9,-2,-13,-33,-34,-49,-53,-20,38,-16,38,-14,38,38,38,38,38,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,38,-30,38,-42,-46,-12,38,-38,-39,-47,-50,38,-43,-44,38,-11,38,-19,38,38,38,38,-51,-35,38,38,38,38,]),'THEN':([3,4,9,13,14,21,23,44,45,46,49,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,102,103,104,105,107,109,111,113,114,117,119,120,123,],[-9,-2,-13,-33,-34,-49,-53,-20,84,-16,-14,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,-31,-38,-39,-47,-50,-43,-44,-10,-11,-19,-32,-37,-48,-51,-35,-1,-15,-45,]),'}':([3,4,9,13,14,21,23,44,46,47,48,49,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,88,89,94,95,96,99,102,103,104,105,106,107,109,110,111,113,114,117,119,120,123,],[-9,-2,-13,-33,-34,-49,-53,-20,-16,86,-18,-14,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,107,-31,-38,-39,-47,-50,-43,-44,-10,-11,-17,-19,-32,117,-37,-48,-51,-35,-1,-15,-45,]),';':([3,4,9,13,14,21,23,44,46,47,48,49,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,88,89,94,95,96,99,102,103,104,105,106,107,109,110,111,112,113,114,117,119,120,123,],[-9,-2,-13,-33,-34,-49,-53,-20,-16,87,-18,-14,97,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,87,-31,-38,-39,-47,-50,-43,-44,-10,-11,-17,-19,-32,87,-37,118,-48,-51,-35,-1,-15,-45,]),',':([3,4,9,13,14,21,23,44,46,49,52,57,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,102,103,104,105,107,109,111,113,114,117,119,120,123,],[-9,-2,-13,-33,-34,-49,-53,-20,-16,-14,90,90,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,-31,-38,-39,-47,-50,-43,-44,-10,-11,-19,-32,-37,-48,-51,-35,-1,-15,-45,]),'LAMBDA':([3,4,9,12,13,14,21,23,44,46,49,52,53,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,102,103,104,105,107,108,109,111,113,114,117,119,120,123,],[-9,-2,-13,51,-33,-34,-49,-53,-20,-16,-14,-8,91,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,-31,-38,-39,-47,-50,-43,-44,-10,-11,-19,-7,-32,-37,-48,-51,-35,-1,-15,-45,]),'DO':([3,4,9,13,14,21,23,44,46,49,55,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,102,103,104,105,107,109,111,113,114,117,119,120,121,123,],[-9,-2,-13,-33,-34,-49,-53,-20,-16,-14,93,98,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,-31,-38,-39,-47,-50,-43,-44,-10,-11,-19,-32,-37,-48,-51,-35,-1,-15,122,-45,]),']':([3,4,9,13,14,21,23,44,46,49,52,56,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,83,86,89,94,95,96,99,102,103,104,105,107,108,109,111,113,114,117,119,120,123,],[-9,-2,-13,-33,-34,-49,-53,-20,-16,-14,-8,94,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,103,-46,-12,-31,-38,-39,-47,-50,-43,-44,-10,-11,-19,-7,-32,-37,-48,-51,-35,-1,-15,-45,]),')':([3,4,9,13,14,21,23,41,44,46,49,52,57,58,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,83,86,89,94,95,96,99,100,102,103,104,105,107,108,109,111,113,114,117,119,120,123,],[-9,-2,-13,-33,-34,-49,-53,80,-20,-16,-14,-8,95,96,99,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,102,-46,-12,-31,-38,-39,-47,-50,114,-43,-44,-10,-11,-19,-7,-32,-37,-48,-51,-35,-1,-15,-45,]),'IN':([3,4,9,13,14,21,23,44,46,49,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,101,102,103,104,105,107,109,111,113,114,117,119,120,123,],[-9,-2,-13,-33,-34,-49,-53,-20,-16,-14,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,-31,-38,-39,-47,-50,115,-43,-44,-10,-11,-19,-32,-37,-48,-51,-35,-1,-15,-45,]),'ELSE':([3,4,9,13,14,21,23,44,46,49,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,83,86,89,94,95,96,99,102,103,104,105,107,109,111,113,114,117,119,120,123,],[-9,-2,-13,-33,-34,-49,-53,-20,-16,-14,-52,-3,-4,-5,-6,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-36,-42,-46,-12,-31,-38,-39,-47,-50,-43,-44,116,-11,-19,-32,-37,-48,-51,-35,-1,-15,-45,]),'ASSIGN':([3,39,],[40,78,]),'AS':([46,],[85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[1,44,45,48,52,55,52,57,59,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,52,48,89,52,101,104,106,52,109,48,111,112,113,119,120,121,123,]),'dots':([0,3,5,6,8,12,16,17,18,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[10,43,10,10,10,10,10,10,10,10,10,10,63,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'dot_expression':([0,5,6,8,12,16,17,18,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,50,51,61,78,84,87,90,91,92,93,97,98,115,116,118,122,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'sequence':([8,50,92,],[47,88,110,]),'expression_list':([12,17,18,41,61,90,],[53,56,58,81,100,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> LOCAL ID ASSIGN expression IN expression','expression',6,'p_expression_local','local_parser.py',12),
  ('expression -> FLOAT','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',13),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',14),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',15),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',16),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',13),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',14),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','control_parser.py',14),
  ('expression -> IMPORT ID AS ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> STRING','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> dots ID','expression',2,'p_expression_read_parent_id','var_parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','control_parser.py',18),
  ('expression -> IMPORT ID','expression',2,'p_expression_import','import_parser.py',18),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('expression -> STRUCT { sequence }','expression',4,'p_expression__new_struct','struct_parser.py',18),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',18),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> expression NEQS expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',26),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',27),
  ('expression -> expression NAND expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',28),
  ('expression -> LAMBDA_START LAMBDA expression','expression',3,'p_expression_lambda_args_WORKING','lambda_parser.py',19),
  ('expression -> LAMBDA_START expression_list LAMBDA expression','expression',4,'p_expression_lambda_args_WORKING','lambda_parser.py',20),
  ('expression -> CHAR','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',22),
  ('expression -> EXTEND ID { sequence }','expression',5,'p_expression_struct_extend','struct_parser.py',22),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_write_id','var_parser.py',22),
  ('expression -> LOOP expression DO expression','expression',4,'p_expression_loop_do_expr','control_parser.py',24),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','types_parser.py',24),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',26),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',26),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',27),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',28),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',29),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','types_parser.py',28),
  ('expression -> FOR expression ; expression ; expression DO expression','expression',8,'p_expression_for_do_expr','control_parser.py',29),
  ('dot_expression -> ID dots ID','dot_expression',3,'p_expression_dot_struct','struct_parser.py',32),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','types_parser.py',32),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while_do_expr','control_parser.py',34),
  ('expression -> dot_expression','expression',1,'p_expression_struct_use_parent_WORKING','struct_parser.py',37),
  ('expression -> dot_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',38),
  ('expression -> dot_expression ( expression_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',39),
  ('expression -> NOT expression','expression',2,'p_expression_unary_operators_not','bool_parser.py',49),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',54),
]
