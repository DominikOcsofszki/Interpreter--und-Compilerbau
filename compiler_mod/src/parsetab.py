
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightassignrightlambdarightletrecrightlocalnonassocthendononassocelseleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotUMINUSBOOL ID NUMBER and as assign char do else eq extend float for ge if import in lambda lambda_start le letrec local loop nand neqs not or string struct then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : letrec ID assign expression lambda expressionexpression : "{" sequence "}" expression_list : expression "," expression_list\n        |        expression\n    expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : string expression : ID assign expressionexpression : import IDexpression : "-" expression %prec UMINUSexpression : char expression : if expression then expression\n    sequence :   sequence ";" expression \n                |   expression expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : "[" expression_list "]"expression : if expression then expression else expression\n    expression :     lambda_start lambda expression\n            |           lambda_start expression_list  lambda expression\n    expression : ID "[" NUMBER "]"expression : not expression\n    expression : loop expression do expression\n    expression : "(" expression_list ")"expression : NUMBER expression : BOOLexpression : "(" expression ")"expression : for expression ";" expression ";" expression do expression\n    expression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : while expression do expression\n    expression : struct "{" sequence "}" expression : extend ID "{" sequence "}" dots :    "."\n        |       "." dots\n    dot_expression : ID dots ID\n    expression : dot_expression\n                |   dot_expression "(" ")"\n                |   dot_expression "(" expression_list ")"\n\n    '
    
_lr_action_items = {'float':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,7,9,11,12,13,15,16,17,19,20,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,42,43,52,60,62,77,83,84,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[4,38,44,45,4,4,4,4,4,4,4,4,4,4,61,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,82,-48,4,4,4,4,-49,105,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'import':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'letrec':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'{':([0,7,9,11,12,13,15,16,17,19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,61,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[7,7,7,7,7,7,7,7,7,7,7,60,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,99,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'string':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'-':([0,1,2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,44,47,48,49,51,52,54,55,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,102,103,104,105,106,107,108,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,],[9,35,-1,-3,9,-19,9,-23,9,9,9,-39,9,9,9,-40,9,9,-51,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-21,35,-22,35,35,9,-36,35,35,35,35,9,9,35,35,35,35,35,35,35,35,35,35,-27,-28,-29,-30,9,35,-43,-50,9,-6,9,9,-31,9,35,9,9,-38,-41,9,9,9,-52,35,-35,-44,-4,35,35,35,35,35,35,35,-46,-53,9,9,9,9,-47,35,35,35,35,9,35,]),'char':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'[':([0,4,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[12,40,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'lambda_start':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'not':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'loop':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'(':([0,4,7,9,11,12,13,15,16,17,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,82,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[17,41,17,17,17,17,17,17,17,17,17,17,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-50,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'NUMBER':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,79,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'BOOL':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'for':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'while':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'struct':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'extend':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'$end':([1,2,4,8,10,14,18,23,44,48,54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,103,104,105,108,110,111,113,114,116,121,122,123,124,127,],[0,-1,-3,-19,-23,-39,-40,-51,-21,-22,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,-52,-35,-44,-4,-24,-34,-37,-45,-46,-53,-47,-2,-5,-32,-42,]),'and':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[24,-1,-3,-19,-23,-39,-40,-51,-21,24,-22,24,24,-36,24,24,24,24,-9,-10,-11,-12,-13,-14,-15,-16,24,-18,-27,-28,-29,-30,24,-43,-50,-6,-31,24,-38,-41,-52,24,-35,-44,-4,24,24,24,24,24,24,24,-46,-53,-47,24,24,24,24,24,]),'eq':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[25,-1,-3,-19,-23,-39,-40,-51,-21,25,-22,25,25,-36,25,25,25,25,25,-10,-11,-12,-13,-14,-15,-16,25,25,-27,-28,-29,-30,25,-43,-50,-6,-31,25,-38,-41,-52,25,-35,-44,-4,25,25,25,25,25,25,25,-46,-53,-47,25,25,25,25,25,]),'=':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[26,-1,-3,-19,-23,-39,-40,-51,-21,26,-22,26,26,-36,26,26,26,26,26,-10,-11,-12,-13,-14,-15,-16,26,26,-27,-28,-29,-30,26,-43,-50,-6,-31,26,-38,-41,-52,26,-35,-44,-4,26,26,26,26,26,26,26,-46,-53,-47,26,26,26,26,26,]),'>':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[27,-1,-3,-19,-23,-39,-40,-51,-21,27,-22,27,27,-36,27,27,27,27,27,27,27,-12,-13,-14,-15,27,27,27,-27,-28,-29,-30,27,-43,-50,-6,-31,27,-38,-41,-52,27,-35,-44,-4,27,27,27,27,27,27,27,-46,-53,-47,27,27,27,27,27,]),'<':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[28,-1,-3,-19,-23,-39,-40,-51,-21,28,-22,28,28,-36,28,28,28,28,28,28,28,-12,-13,-14,-15,28,28,28,-27,-28,-29,-30,28,-43,-50,-6,-31,28,-38,-41,-52,28,-35,-44,-4,28,28,28,28,28,28,28,-46,-53,-47,28,28,28,28,28,]),'ge':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[29,-1,-3,-19,-23,-39,-40,-51,-21,29,-22,29,29,-36,29,29,29,29,29,29,29,-12,-13,-14,-15,29,29,29,-27,-28,-29,-30,29,-43,-50,-6,-31,29,-38,-41,-52,29,-35,-44,-4,29,29,29,29,29,29,29,-46,-53,-47,29,29,29,29,29,]),'le':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[30,-1,-3,-19,-23,-39,-40,-51,-21,30,-22,30,30,-36,30,30,30,30,30,30,30,-12,-13,-14,-15,30,30,30,-27,-28,-29,-30,30,-43,-50,-6,-31,30,-38,-41,-52,30,-35,-44,-4,30,30,30,30,30,30,30,-46,-53,-47,30,30,30,30,30,]),'neqs':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[31,-1,-3,-19,-23,-39,-40,-51,-21,31,-22,31,31,-36,31,31,31,31,31,-10,-11,-12,-13,-14,-15,-16,31,31,-27,-28,-29,-30,31,-43,-50,-6,-31,31,-38,-41,-52,31,-35,-44,-4,31,31,31,31,31,31,31,-46,-53,-47,31,31,31,31,31,]),'or':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[32,-1,-3,-19,-23,-39,-40,-51,-21,32,-22,32,32,-36,32,32,32,32,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,32,-43,-50,-6,-31,32,-38,-41,-52,32,-35,-44,-4,32,32,32,32,32,32,32,-46,-53,-47,32,32,32,32,32,]),'nand':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[33,-1,-3,-19,-23,-39,-40,-51,-21,33,-22,33,33,-36,33,33,33,33,-9,-10,-11,-12,-13,-14,-15,-16,33,-18,-27,-28,-29,-30,33,-43,-50,-6,-31,33,-38,-41,-52,33,-35,-44,-4,33,33,33,33,33,33,33,-46,-53,-47,33,33,33,33,33,]),'+':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[34,-1,-3,-19,-23,-39,-40,-51,-21,34,-22,34,34,-36,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-27,-28,-29,-30,34,-43,-50,-6,-31,34,-38,-41,-52,34,-35,-44,-4,34,34,34,34,34,34,34,-46,-53,-47,34,34,34,34,34,]),'*':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[36,-1,-3,-19,-23,-39,-40,-51,-21,36,-22,36,36,-36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-29,-30,36,-43,-50,-6,-31,36,-38,-41,-52,36,-35,-44,-4,36,36,36,36,36,36,36,-46,-53,-47,36,36,36,36,36,]),'/':([1,2,4,8,10,14,18,23,44,47,48,49,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,106,107,108,110,111,112,113,114,116,121,122,123,124,125,127,],[37,-1,-3,-19,-23,-39,-40,-51,-21,37,-22,37,37,-36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-29,-30,37,-43,-50,-6,-31,37,-38,-41,-52,37,-35,-44,-4,37,37,37,37,37,37,37,-46,-53,-47,37,37,37,37,37,]),'}':([2,4,8,10,14,18,23,44,46,47,48,54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,98,100,103,104,105,107,108,110,111,113,114,115,116,121,122,123,124,127,],[-1,-3,-19,-23,-39,-40,-51,-21,86,-26,-22,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,114,-52,-35,-44,-4,-25,-24,-34,-37,-45,-46,121,-53,-47,-2,-5,-32,-42,]),';':([2,4,8,10,14,18,23,44,46,47,48,54,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,98,100,103,104,105,107,108,110,111,112,113,114,115,116,121,122,123,124,127,],[-1,-3,-19,-23,-39,-40,-51,-21,87,-26,-22,-36,96,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,87,-52,-35,-44,-4,-25,-24,-34,-37,120,-45,-46,87,-53,-47,-2,-5,-32,-42,]),'then':([2,4,8,10,14,18,23,44,48,49,54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,103,104,105,108,110,111,113,114,116,121,122,123,124,127,],[-1,-3,-19,-23,-39,-40,-51,-21,-22,88,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,-52,-35,-44,-4,-24,-34,-37,-45,-46,-53,-47,-2,-5,-32,-42,]),',':([2,4,8,10,14,18,23,44,48,51,54,57,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,103,104,105,108,110,111,113,114,116,121,122,123,124,127,],[-1,-3,-19,-23,-39,-40,-51,-21,-22,90,-36,90,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,-52,-35,-44,-4,-24,-34,-37,-45,-46,-53,-47,-2,-5,-32,-42,]),']':([2,4,8,10,14,18,23,44,48,50,51,54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,86,89,91,94,95,100,103,104,105,108,109,110,111,113,114,116,121,122,123,124,127,],[-1,-3,-19,-23,-39,-40,-51,-21,-22,89,-8,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,103,-43,-50,-6,-31,-33,-38,-41,-52,-35,-44,-4,-24,-7,-34,-37,-45,-46,-53,-47,-2,-5,-32,-42,]),'lambda':([2,4,8,10,13,14,18,23,44,48,51,53,54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,103,104,105,106,108,109,110,111,113,114,116,121,122,123,124,127,],[-1,-3,-19,-23,52,-39,-40,-51,-21,-22,-8,92,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,-52,-35,-44,-4,118,-24,-7,-34,-37,-45,-46,-53,-47,-2,-5,-32,-42,]),'do':([2,4,8,10,14,18,23,44,48,54,55,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,103,104,105,108,110,111,113,114,116,121,122,123,124,125,127,],[-1,-3,-19,-23,-39,-40,-51,-21,-22,-36,93,97,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,-52,-35,-44,-4,-24,-34,-37,-45,-46,-53,-47,-2,-5,-32,126,-42,]),')':([2,4,8,10,14,18,23,41,44,48,51,54,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,81,82,86,89,91,94,95,100,101,103,104,105,108,109,110,111,113,114,116,121,122,123,124,127,],[-1,-3,-19,-23,-39,-40,-51,80,-21,-22,-8,-36,94,95,100,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,104,-50,-6,-31,-33,-38,-41,-52,116,-35,-44,-4,-24,-7,-34,-37,-45,-46,-53,-47,-2,-5,-32,-42,]),'in':([2,4,8,10,14,18,23,44,48,54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,102,103,104,105,108,110,111,113,114,116,121,122,123,124,127,],[-1,-3,-19,-23,-39,-40,-51,-21,-22,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,-52,117,-35,-44,-4,-24,-34,-37,-45,-46,-53,-47,-2,-5,-32,-42,]),'else':([2,4,8,10,14,18,23,44,48,54,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,80,82,86,89,91,94,95,100,103,104,105,108,110,111,113,114,116,121,122,123,124,127,],[-1,-3,-19,-23,-39,-40,-51,-21,-22,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-27,-28,-29,-30,-20,-43,-50,-6,-31,-33,-38,-41,-52,-35,-44,-4,119,-34,-37,-45,-46,-53,-47,-2,-5,-32,-42,]),'assign':([4,38,45,],[39,77,85,]),'.':([4,43,],[43,43,]),'as':([44,],[84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[1,47,48,49,51,51,54,55,57,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,51,91,47,51,102,106,107,108,51,110,111,112,113,47,122,123,124,125,127,]),'dot_expression':([0,7,9,11,12,13,15,16,17,19,20,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,41,52,60,62,77,85,87,88,90,92,93,96,97,99,117,118,119,120,126,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'dots':([4,43,],[42,83,]),'sequence':([7,60,99,],[46,98,115,]),'expression_list':([12,13,17,41,62,90,],[50,53,56,81,101,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> letrec ID assign expression lambda expression','expression',6,'p_expression_letrec','letrec_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',15),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',16),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> string','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',19),
  ('expression -> char','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',23),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',24),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','types_parser.py',24),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> lambda_start lambda expression','expression',3,'p_expression_lambda_args_WORKING','lambda_parser.py',27),
  ('expression -> lambda_start expression_list lambda expression','expression',4,'p_expression_lambda_args_WORKING','lambda_parser.py',28),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','types_parser.py',28),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','types_parser.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',44),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',45),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',47),
  ('expression -> struct { sequence }','expression',4,'p_expression__new_struct','struct_parser.py',62),
  ('expression -> extend ID { sequence }','expression',5,'p_expression_struct_extend','struct_parser.py',66),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',70),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',71),
  ('dot_expression -> ID dots ID','dot_expression',3,'p_expression_dot_struct','struct_parser.py',76),
  ('expression -> dot_expression','expression',1,'p_expression_struct_use_parent_WORKING','struct_parser.py',102),
  ('expression -> dot_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',103),
  ('expression -> dot_expression ( expression_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',104),
]
