
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightASSIGNrightLAMBDArightLOCALnonassocTHENDOnonassocELSEleftORleftANDNANDleft=NEQSEQleft<>LEGEleft+-left*/rightNOTUMINUSAND AS ASSIGN BOOL CHAR DO ELSE EQ EXTEND FLOAT FOR GE ID IF IMPORT IN LAMBDA LAMBDA_START LE LOCAL LOOP NAND NEQS NOT NUMBER OR STRING STRUCT THEN WHILEexpression : "-" expression %prec UMINUSexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression_list :    expression "," expression_list\n                    |       expression\n    expression : NUMBERexpression : "{" sequence "}" expression : LOCAL ID ASSIGN expression IN expression expression : BOOLexpression : IF expression THEN expression\n    expression : IMPORT ID AS IDsequence_struct :   sequence_struct ";" "." ID ASSIGN expression \n                        |  "." ID ASSIGN expression \n                        sequence :   expression \n                |   sequence ";" expression expression : FLOATexpression : IF expression THEN expression ELSE expression\n    expression : IMPORT IDexpression :   expression AND expression\n                    | expression EQ expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression GE expression\n                    | expression LE expression\n                    | expression NEQS expression\n                    | expression OR expression\n                    | expression NAND expression\n    expression : STRING expression : STRUCT "{" sequence_struct "}" expression :     LAMBDA_START LAMBDA expression\n            |           LAMBDA_START expression_list  LAMBDA expression\n    expression : LOOP expression DO expression\n    expression : CHAR expression : EXTEND ID "{" sequence_struct "}" expression : FOR expression ";" expression ";" expression DO expression\n    expression : IDdots :    "."\n        |       "." dots\n    expression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : WHILE expression DO expression\n    dot_expression : ID dots ID\n                    |   dots ID\n    expression : dot_expression\n                |   dot_expression "(" ")"\n                |   dot_expression "(" expression_list ")"\n\n    expression : NOT expression\n    expression : "[" expression_list "]"expression :  dots IDexpression : ID "[" NUMBER "]"expression : ID ASSIGN expressionexpression : "(" expression_list ")"expression : dots ID ASSIGN expression'
    
_lr_action_items = {'-':([0,1,2,3,4,6,7,8,10,11,13,14,15,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,45,47,48,50,51,53,55,57,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,84,85,89,90,91,92,94,95,96,97,99,100,101,102,103,104,105,106,107,111,112,114,115,116,117,118,119,121,122,123,124,125,127,128,129,130,131,132,],[2,26,2,-8,2,-39,-11,2,-18,-31,2,2,-36,2,2,2,-47,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-1,26,2,2,26,-20,2,26,26,26,26,2,-50,-46,-2,-3,-4,-5,26,26,26,26,26,26,26,26,26,26,-9,2,2,-42,26,-45,2,26,2,2,2,2,-55,2,-48,-51,2,26,26,-43,-53,26,-13,-32,26,26,26,26,-49,26,2,2,2,-37,2,26,26,26,26,2,2,26,26,]),'NUMBER':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,82,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'{':([0,2,4,8,12,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,54,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[4,4,4,4,49,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,93,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'LOCAL':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'BOOL':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'IF':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'IMPORT':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'FLOAT':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'STRING':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'STRUCT':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'LAMBDA_START':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LOOP':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'CHAR':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'EXTEND':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FOR':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ID':([0,2,4,5,8,9,13,14,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,46,50,58,62,78,79,85,86,88,90,91,92,94,96,100,118,119,120,121,123,129,130,],[6,6,6,42,6,48,6,6,54,6,6,6,6,6,61,-40,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,84,6,6,-41,6,6,6,106,109,6,6,6,6,6,6,6,6,126,6,6,6,6,]),'WHILE':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NOT':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'[':([0,2,4,6,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[22,22,22,44,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'(':([0,2,4,6,8,13,14,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,61,78,79,84,85,90,91,92,94,96,100,118,119,121,123,129,130,],[18,18,18,43,18,18,18,18,18,18,58,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-46,18,18,-45,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'.':([0,2,4,6,8,13,14,17,18,19,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,49,50,58,78,79,85,90,91,92,93,94,96,100,108,118,119,121,123,129,130,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,88,24,24,24,24,24,24,24,24,88,24,24,24,120,24,24,24,24,24,24,]),'$end':([1,3,6,7,10,11,15,20,39,48,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,103,104,105,106,107,111,112,115,116,117,122,124,125,132,],[0,-8,-39,-11,-18,-31,-36,-47,-1,-20,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,-33,-55,-48,-51,-43,-53,-12,-13,-32,-34,-35,-44,-49,-56,-37,-10,-19,-38,]),'+':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[25,-8,-39,-11,-18,-31,-36,-47,-1,25,25,-20,25,25,25,25,-50,-46,-2,-3,-4,-5,25,25,25,25,25,25,25,25,25,25,-9,-42,25,-45,25,-55,-48,-51,25,25,-43,-53,25,-13,-32,25,25,25,25,-49,25,-37,25,25,25,25,25,25,]),'*':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[27,-8,-39,-11,-18,-31,-36,-47,-1,27,27,-20,27,27,27,27,-50,-46,27,27,-4,-5,27,27,27,27,27,27,27,27,27,27,-9,-42,27,-45,27,-55,-48,-51,27,27,-43,-53,27,-13,-32,27,27,27,27,-49,27,-37,27,27,27,27,27,27,]),'/':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[28,-8,-39,-11,-18,-31,-36,-47,-1,28,28,-20,28,28,28,28,-50,-46,28,28,-4,-5,28,28,28,28,28,28,28,28,28,28,-9,-42,28,-45,28,-55,-48,-51,28,28,-43,-53,28,-13,-32,28,28,28,28,-49,28,-37,28,28,28,28,28,28,]),'AND':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[29,-8,-39,-11,-18,-31,-36,-47,-1,29,29,-20,29,29,29,29,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,29,-30,-9,-42,29,-45,29,-55,-48,-51,29,29,-43,-53,29,-13,-32,29,29,29,29,-49,29,-37,29,29,29,29,29,29,]),'EQ':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[30,-8,-39,-11,-18,-31,-36,-47,-1,30,30,-20,30,30,30,30,-50,-46,-2,-3,-4,-5,30,-22,-23,-24,-25,-26,-27,-28,30,30,-9,-42,30,-45,30,-55,-48,-51,30,30,-43,-53,30,-13,-32,30,30,30,30,-49,30,-37,30,30,30,30,30,30,]),'=':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[31,-8,-39,-11,-18,-31,-36,-47,-1,31,31,-20,31,31,31,31,-50,-46,-2,-3,-4,-5,31,-22,-23,-24,-25,-26,-27,-28,31,31,-9,-42,31,-45,31,-55,-48,-51,31,31,-43,-53,31,-13,-32,31,31,31,31,-49,31,-37,31,31,31,31,31,31,]),'>':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[32,-8,-39,-11,-18,-31,-36,-47,-1,32,32,-20,32,32,32,32,-50,-46,-2,-3,-4,-5,32,32,32,-24,-25,-26,-27,32,32,32,-9,-42,32,-45,32,-55,-48,-51,32,32,-43,-53,32,-13,-32,32,32,32,32,-49,32,-37,32,32,32,32,32,32,]),'<':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[33,-8,-39,-11,-18,-31,-36,-47,-1,33,33,-20,33,33,33,33,-50,-46,-2,-3,-4,-5,33,33,33,-24,-25,-26,-27,33,33,33,-9,-42,33,-45,33,-55,-48,-51,33,33,-43,-53,33,-13,-32,33,33,33,33,-49,33,-37,33,33,33,33,33,33,]),'GE':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[34,-8,-39,-11,-18,-31,-36,-47,-1,34,34,-20,34,34,34,34,-50,-46,-2,-3,-4,-5,34,34,34,-24,-25,-26,-27,34,34,34,-9,-42,34,-45,34,-55,-48,-51,34,34,-43,-53,34,-13,-32,34,34,34,34,-49,34,-37,34,34,34,34,34,34,]),'LE':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[35,-8,-39,-11,-18,-31,-36,-47,-1,35,35,-20,35,35,35,35,-50,-46,-2,-3,-4,-5,35,35,35,-24,-25,-26,-27,35,35,35,-9,-42,35,-45,35,-55,-48,-51,35,35,-43,-53,35,-13,-32,35,35,35,35,-49,35,-37,35,35,35,35,35,35,]),'NEQS':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[36,-8,-39,-11,-18,-31,-36,-47,-1,36,36,-20,36,36,36,36,-50,-46,-2,-3,-4,-5,36,-22,-23,-24,-25,-26,-27,-28,36,36,-9,-42,36,-45,36,-55,-48,-51,36,36,-43,-53,36,-13,-32,36,36,36,36,-49,36,-37,36,36,36,36,36,36,]),'OR':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[37,-8,-39,-11,-18,-31,-36,-47,-1,37,37,-20,37,37,37,37,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,37,-45,37,-55,-48,-51,37,37,-43,-53,37,-13,-32,37,37,37,37,-49,37,-37,37,37,37,37,37,37,]),'NAND':([1,3,6,7,10,11,15,20,39,41,47,48,51,53,55,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,101,102,103,104,105,106,107,111,112,114,115,116,117,122,124,125,127,128,131,132,],[38,-8,-39,-11,-18,-31,-36,-47,-1,38,38,-20,38,38,38,38,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,38,-30,-9,-42,38,-45,38,-55,-48,-51,38,38,-43,-53,38,-13,-32,38,38,38,38,-49,38,-37,38,38,38,38,38,38,]),'}':([3,6,7,10,11,15,20,39,40,41,48,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,87,89,95,97,99,101,103,104,105,106,107,111,112,113,115,116,117,122,124,125,127,131,132,],[-8,-39,-11,-18,-31,-36,-47,-1,77,-16,-20,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,107,-33,-55,-48,-51,-17,-43,-53,-12,-13,-32,-34,-35,122,-44,-49,-56,-37,-10,-19,-15,-14,-38,]),';':([3,6,7,10,11,15,20,39,40,41,48,55,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,87,89,95,97,99,101,103,104,105,106,107,111,112,113,114,115,116,117,122,124,125,127,131,132,],[-8,-39,-11,-18,-31,-36,-47,-1,78,-16,-20,94,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,108,-33,-55,-48,-51,-17,-43,-53,-12,-13,-32,-34,-35,108,123,-44,-49,-56,-37,-10,-19,-15,-14,-38,]),'THEN':([3,6,7,10,11,15,20,39,47,48,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,103,104,105,106,107,111,112,115,116,117,122,124,125,132,],[-8,-39,-11,-18,-31,-36,-47,-1,85,-20,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,-33,-55,-48,-51,-43,-53,-12,-13,-32,-34,-35,-44,-49,-56,-37,-10,-19,-38,]),',':([3,6,7,10,11,15,20,39,48,51,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,103,104,105,106,107,111,112,115,116,117,122,124,125,132,],[-8,-39,-11,-18,-31,-36,-47,-1,-20,90,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,-33,-55,-48,-51,-43,-53,-12,-13,-32,-34,-35,-44,-49,-56,-37,-10,-19,-38,]),'LAMBDA':([3,6,7,10,11,13,15,20,39,48,51,52,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,103,104,105,106,107,110,111,112,115,116,117,122,124,125,132,],[-8,-39,-11,-18,-31,50,-36,-47,-1,-20,-7,91,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,-33,-55,-48,-51,-43,-53,-12,-13,-32,-6,-34,-35,-44,-49,-56,-37,-10,-19,-38,]),'DO':([3,6,7,10,11,15,20,39,48,53,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,103,104,105,106,107,111,112,115,116,117,122,124,125,128,132,],[-8,-39,-11,-18,-31,-36,-47,-1,-20,92,96,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,-33,-55,-48,-51,-43,-53,-12,-13,-32,-34,-35,-44,-49,-56,-37,-10,-19,130,-38,]),')':([3,6,7,10,11,15,20,39,43,48,51,56,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,81,83,84,89,95,97,98,99,103,104,105,106,107,110,111,112,115,116,117,122,124,125,132,],[-8,-39,-11,-18,-31,-36,-47,-1,80,-20,-7,95,97,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,103,-54,-45,-33,-55,-48,116,-51,-43,-53,-12,-13,-32,-6,-34,-35,-44,-49,-56,-37,-10,-19,-38,]),']':([3,6,7,10,11,15,20,39,48,51,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,83,84,89,95,97,99,103,104,105,106,107,110,111,112,115,116,117,122,124,125,132,],[-8,-39,-11,-18,-31,-36,-47,-1,-20,-7,-50,99,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,104,-54,-45,-33,-55,-48,-51,-43,-53,-12,-13,-32,-6,-34,-35,-44,-49,-56,-37,-10,-19,-38,]),'IN':([3,6,7,10,11,15,20,39,48,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,102,103,104,105,106,107,111,112,115,116,117,122,124,125,132,],[-8,-39,-11,-18,-31,-36,-47,-1,-20,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,-33,-55,-48,-51,118,-43,-53,-12,-13,-32,-34,-35,-44,-49,-56,-37,-10,-19,-38,]),'ELSE':([3,6,7,10,11,15,20,39,48,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,83,84,89,95,97,99,103,104,105,106,107,111,112,115,116,117,122,124,125,132,],[-8,-39,-11,-18,-31,-36,-47,-1,-20,-50,-46,-2,-3,-4,-5,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-9,-42,-54,-45,-33,-55,-48,-51,-43,-53,119,-13,-32,-34,-35,-44,-49,-56,-37,-10,-19,-38,]),'ASSIGN':([6,42,61,109,126,],[45,79,100,121,129,]),'AS':([48,],[86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[1,39,41,47,51,53,55,51,57,59,51,63,64,65,66,67,68,69,70,71,72,73,74,75,76,51,83,89,51,101,102,105,51,111,112,114,115,117,124,125,127,128,131,132,]),'dot_expression':([0,2,4,8,13,14,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'dots':([0,2,4,6,8,13,14,17,18,19,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,50,58,78,79,85,90,91,92,94,96,100,118,119,121,123,129,130,],[23,23,23,46,23,23,23,23,23,23,23,23,62,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'sequence':([4,],[40,]),'expression_list':([13,18,22,43,58,90,],[52,56,60,81,98,110,]),'sequence_struct':([49,93,],[87,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> - expression','expression',2,'p_expr_uminus','literals_parser.py',4),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',6),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',7),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',8),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',9),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',7),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',8),
  ('expression -> NUMBER','expression',1,'p_expression_num','literals_parser.py',8),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',10),
  ('expression -> LOCAL ID ASSIGN expression IN expression','expression',6,'p_expression_local','local_parser.py',12),
  ('expression -> BOOL','expression',1,'p_expression_bool','literals_parser.py',13),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','control_parser.py',14),
  ('expression -> IMPORT ID AS ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('sequence_struct -> sequence_struct ; . ID ASSIGN expression','sequence_struct',6,'p_expression_expressions_struct','struct_parser.py',15),
  ('sequence_struct -> . ID ASSIGN expression','sequence_struct',4,'p_expression_expressions_struct','struct_parser.py',16),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',16),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',17),
  ('expression -> FLOAT','expression',1,'p_expression_types_float','literals_parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','control_parser.py',18),
  ('expression -> IMPORT ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',20),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',21),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',22),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',23),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',24),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',25),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',26),
  ('expression -> expression NEQS expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',27),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',28),
  ('expression -> expression NAND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',29),
  ('expression -> STRING','expression',1,'p_expression_types_string','literals_parser.py',21),
  ('expression -> STRUCT { sequence_struct }','expression',4,'p_expression__new_struct','struct_parser.py',22),
  ('expression -> LAMBDA_START LAMBDA expression','expression',3,'p_expression_lambda_args_WORKING','lambda_parser.py',23),
  ('expression -> LAMBDA_START expression_list LAMBDA expression','expression',4,'p_expression_lambda_args_WORKING','lambda_parser.py',24),
  ('expression -> LOOP expression DO expression','expression',4,'p_expression_loop_do_expr','control_parser.py',24),
  ('expression -> CHAR','expression',1,'p_expression_types_char','literals_parser.py',25),
  ('expression -> EXTEND ID { sequence_struct }','expression',5,'p_expression_struct_extend','struct_parser.py',26),
  ('expression -> FOR expression ; expression ; expression DO expression','expression',8,'p_expression_for_do_expr','control_parser.py',29),
  ('expression -> ID','expression',1,'p_expression_read_id','literals_parser.py',30),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',30),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',31),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',32),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',33),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while_do_expr','control_parser.py',34),
  ('dot_expression -> ID dots ID','dot_expression',3,'p_expression_dot_struct','struct_parser.py',36),
  ('dot_expression -> dots ID','dot_expression',2,'p_expression_dot_struct','struct_parser.py',37),
  ('expression -> dot_expression','expression',1,'p_expression_struct_use_parent_WORKING','struct_parser.py',42),
  ('expression -> dot_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',43),
  ('expression -> dot_expression ( expression_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',44),
  ('expression -> NOT expression','expression',2,'p_expression_unary_operators_not','literals_parser.py',43),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','binop_parser.py',48),
  ('expression -> dots ID','expression',2,'p_expression_read_parent_id','literals_parser.py',48),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','binop_parser.py',52),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_write_id','literals_parser.py',52),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','binop_parser.py',56),
  ('expression -> dots ID ASSIGN expression','expression',4,'p_expression_write_id_dots','literals_parser.py',56),
]
