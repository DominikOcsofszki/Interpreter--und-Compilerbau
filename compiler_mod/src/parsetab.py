
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightASSIGNrightLAMBDArightLOCALnonassocTHENDOnonassocELSEleftORleftANDNANDleft=NEQSEQleft<>LEGEleft+-left*/rightNOTUMINUSAND AS ASSIGN BOOL CHAR DO ELSE EQ EXTEND FLOAT FOR GE ID IF IMPORT IN LAMBDA LAMBDA_START LE LOCAL LOOP NAND NEQS NOT NUMBER OR STRING STRUCT THEN WHILEexpression : "-" expression %prec UMINUSexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : STRUCT "{" sequence_struct "}" expression_list :    expression "," expression_list\n                    |       expression\n    expression : NUMBERexpression : "{" sequence "}" expression : EXTEND ID "{" sequence_struct "}" expression : LOCAL ID ASSIGN expression IN expression expression : BOOLexpression : IF expression THEN expression\n    expression : IMPORT ID AS IDdots :    "."\n        |       "." dots\n    sequence :   expression \n                |   sequence ";" expression expression : FLOATexpression : IF expression THEN expression ELSE expression\n    expression : IMPORT IDexpression :   expression AND expression\n                    | expression EQ expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression GE expression\n                    | expression LE expression\n                    | expression NEQS expression\n                    | expression OR expression\n                    | expression NAND expression\n    expression :     LAMBDA_START LAMBDA expression\n            |           LAMBDA_START expression_list  LAMBDA expression\n    expression : STRING expression : ID dots IDexpression : LOOP expression DO expression\n    expression : CHAR expression : FOR expression ";" expression ";" expression DO expression\n    expression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : IDexpression : ID dots ID "(" ")"\n                |   ID dots ID "(" expression_list ")"\n    expression : WHILE expression DO expression\n    dots_in_struct_expression : dots ID\n    expression : "[" expression_list "]"expression : dots_in_struct_expression "(" ")"\n                |   dots_in_struct_expression "(" expression_list ")"\n\n    expression : ID "[" NUMBER "]"expression : "(" expression_list ")"expression : NOT expression \n    expression : ID ASSIGN expressionexpression : dots ID ASSIGN expressionseq_assign_expression : dots ID ASSIGN expression \n                        sequence_struct :    seq_assign_expression \n                      |     sequence_struct ";"  seq_assign_expression \n                      '
    
_lr_action_items = {'-':([0,1,2,4,5,7,9,10,12,13,14,16,17,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,45,47,49,50,51,52,55,56,58,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,81,83,84,87,88,89,91,92,93,94,95,96,97,98,99,100,102,105,107,108,109,110,111,112,114,115,116,117,118,119,121,122,123,125,126,127,128,129,130,131,132,133,134,],[2,26,2,2,-9,-42,-13,2,-20,2,-35,2,-38,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-1,26,2,2,26,-22,2,26,26,26,26,2,-52,-2,-3,-4,-5,26,26,26,26,26,26,26,26,26,26,-10,2,-36,-40,26,2,2,26,2,2,2,2,2,-51,2,-47,-48,-6,26,2,-41,-50,26,26,-15,26,26,26,26,26,-49,2,-11,-43,2,2,2,26,-44,26,26,26,2,26,]),'STRUCT':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'NUMBER':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,46,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,86,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'{':([0,2,3,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[4,4,40,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,82,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'EXTEND':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'LOCAL':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'BOOL':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'IF':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'IMPORT':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FLOAT':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'LAMBDA_START':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'STRING':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'ID':([0,2,4,6,8,10,11,13,15,16,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,47,51,60,62,79,81,88,89,90,92,93,94,95,96,98,107,121,125,126,127,133,],[7,7,7,43,48,7,50,7,54,7,7,7,7,7,7,-16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,83,7,7,7,7,-17,104,7,7,7,112,7,7,7,7,7,7,7,7,7,7,7,7,]),'LOOP':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'CHAR':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'FOR':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WHILE':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'[':([0,2,4,7,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[21,21,21,46,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'(':([0,2,4,7,10,13,16,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,54,60,81,83,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[19,19,19,45,19,19,19,19,19,19,19,60,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-46,19,19,107,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NOT':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'.':([0,2,4,7,10,13,16,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,45,47,51,60,81,82,88,89,92,93,94,95,96,98,103,107,121,125,126,127,133,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'$end':([1,5,7,9,12,14,17,39,50,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,108,109,111,112,114,115,116,118,119,122,123,129,130,131,134,],[0,-9,-42,-13,-20,-35,-38,-1,-22,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,-53,-33,-51,-47,-48,-6,-41,-50,-14,-15,-34,-54,-37,-45,-49,-11,-43,-44,-12,-21,-39,]),'+':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[25,-9,-42,-13,-20,-35,-38,-1,25,25,-22,25,25,25,25,-52,-2,-3,-4,-5,25,25,25,25,25,25,25,25,25,25,-10,-36,-40,25,25,-51,-47,-48,-6,25,-41,-50,25,25,-15,25,25,25,25,25,-49,-11,-43,25,-44,25,25,25,25,]),'*':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[27,-9,-42,-13,-20,-35,-38,-1,27,27,-22,27,27,27,27,-52,27,27,-4,-5,27,27,27,27,27,27,27,27,27,27,-10,-36,-40,27,27,-51,-47,-48,-6,27,-41,-50,27,27,-15,27,27,27,27,27,-49,-11,-43,27,-44,27,27,27,27,]),'/':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[28,-9,-42,-13,-20,-35,-38,-1,28,28,-22,28,28,28,28,-52,28,28,-4,-5,28,28,28,28,28,28,28,28,28,28,-10,-36,-40,28,28,-51,-47,-48,-6,28,-41,-50,28,28,-15,28,28,28,28,28,-49,-11,-43,28,-44,28,28,28,28,]),'AND':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[29,-9,-42,-13,-20,-35,-38,-1,29,29,-22,29,29,29,29,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,29,-32,-10,-36,-40,29,29,-51,-47,-48,-6,29,-41,-50,29,29,-15,29,29,29,29,29,-49,-11,-43,29,-44,29,29,29,29,]),'EQ':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[30,-9,-42,-13,-20,-35,-38,-1,30,30,-22,30,30,30,30,-52,-2,-3,-4,-5,30,-24,-25,-26,-27,-28,-29,-30,30,30,-10,-36,-40,30,30,-51,-47,-48,-6,30,-41,-50,30,30,-15,30,30,30,30,30,-49,-11,-43,30,-44,30,30,30,30,]),'=':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[31,-9,-42,-13,-20,-35,-38,-1,31,31,-22,31,31,31,31,-52,-2,-3,-4,-5,31,-24,-25,-26,-27,-28,-29,-30,31,31,-10,-36,-40,31,31,-51,-47,-48,-6,31,-41,-50,31,31,-15,31,31,31,31,31,-49,-11,-43,31,-44,31,31,31,31,]),'>':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[32,-9,-42,-13,-20,-35,-38,-1,32,32,-22,32,32,32,32,-52,-2,-3,-4,-5,32,32,32,-26,-27,-28,-29,32,32,32,-10,-36,-40,32,32,-51,-47,-48,-6,32,-41,-50,32,32,-15,32,32,32,32,32,-49,-11,-43,32,-44,32,32,32,32,]),'<':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[33,-9,-42,-13,-20,-35,-38,-1,33,33,-22,33,33,33,33,-52,-2,-3,-4,-5,33,33,33,-26,-27,-28,-29,33,33,33,-10,-36,-40,33,33,-51,-47,-48,-6,33,-41,-50,33,33,-15,33,33,33,33,33,-49,-11,-43,33,-44,33,33,33,33,]),'GE':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[34,-9,-42,-13,-20,-35,-38,-1,34,34,-22,34,34,34,34,-52,-2,-3,-4,-5,34,34,34,-26,-27,-28,-29,34,34,34,-10,-36,-40,34,34,-51,-47,-48,-6,34,-41,-50,34,34,-15,34,34,34,34,34,-49,-11,-43,34,-44,34,34,34,34,]),'LE':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[35,-9,-42,-13,-20,-35,-38,-1,35,35,-22,35,35,35,35,-52,-2,-3,-4,-5,35,35,35,-26,-27,-28,-29,35,35,35,-10,-36,-40,35,35,-51,-47,-48,-6,35,-41,-50,35,35,-15,35,35,35,35,35,-49,-11,-43,35,-44,35,35,35,35,]),'NEQS':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[36,-9,-42,-13,-20,-35,-38,-1,36,36,-22,36,36,36,36,-52,-2,-3,-4,-5,36,-24,-25,-26,-27,-28,-29,-30,36,36,-10,-36,-40,36,36,-51,-47,-48,-6,36,-41,-50,36,36,-15,36,36,36,36,36,-49,-11,-43,36,-44,36,36,36,36,]),'OR':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[37,-9,-42,-13,-20,-35,-38,-1,37,37,-22,37,37,37,37,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,37,37,-51,-47,-48,-6,37,-41,-50,37,37,-15,37,37,37,37,37,-49,-11,-43,37,-44,37,37,37,37,]),'NAND':([1,5,7,9,12,14,17,39,42,49,50,52,55,56,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,105,108,109,110,111,112,114,115,116,117,118,119,122,123,128,129,130,131,132,134,],[38,-9,-42,-13,-20,-35,-38,-1,38,38,-22,38,38,38,38,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,38,-32,-10,-36,-40,38,38,-51,-47,-48,-6,38,-41,-50,38,38,-15,38,38,38,38,38,-49,-11,-43,38,-44,38,38,38,38,]),'}':([5,7,9,12,14,17,39,41,42,50,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,87,91,97,99,100,102,105,106,108,109,111,112,114,115,116,118,119,120,122,123,128,129,130,131,134,],[-9,-42,-13,-20,-35,-38,-1,80,-18,-22,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,102,-56,-10,-36,-40,-53,-33,-51,-47,-48,-6,-19,122,-41,-50,-14,-15,-34,-54,-37,-45,-49,-57,-11,-43,-55,-44,-12,-21,-39,]),';':([5,7,9,12,14,17,39,41,42,50,56,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,84,87,91,97,99,100,102,105,106,108,109,111,112,114,115,116,117,118,119,120,122,123,128,129,130,131,134,],[-9,-42,-13,-20,-35,-38,-1,81,-18,-22,96,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,103,-56,-10,-36,-40,-53,-33,-51,-47,-48,-6,-19,103,-41,-50,-14,-15,-34,-54,-37,127,-45,-49,-57,-11,-43,-55,-44,-12,-21,-39,]),'THEN':([5,7,9,12,14,17,39,49,50,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,108,109,111,112,114,115,116,118,119,122,123,129,130,131,134,],[-9,-42,-13,-20,-35,-38,-1,89,-22,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,-53,-33,-51,-47,-48,-6,-41,-50,-14,-15,-34,-54,-37,-45,-49,-11,-43,-44,-12,-21,-39,]),',':([5,7,9,12,14,17,39,50,52,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,108,109,111,112,114,115,116,118,119,122,123,129,130,131,134,],[-9,-42,-13,-20,-35,-38,-1,-22,92,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,-53,-33,-51,-47,-48,-6,-41,-50,-14,-15,-34,-54,-37,-45,-49,-11,-43,-44,-12,-21,-39,]),'LAMBDA':([5,7,9,12,13,14,17,39,50,52,53,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,108,109,111,112,113,114,115,116,118,119,122,123,129,130,131,134,],[-9,-42,-13,-20,51,-35,-38,-1,-22,-8,93,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,-53,-33,-51,-47,-48,-6,-41,-50,-14,-15,-7,-34,-54,-37,-45,-49,-11,-43,-44,-12,-21,-39,]),'DO':([5,7,9,12,14,17,39,50,55,58,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,108,109,111,112,114,115,116,118,119,122,123,129,130,131,132,134,],[-9,-42,-13,-20,-35,-38,-1,-22,95,98,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,-53,-33,-51,-47,-48,-6,-41,-50,-14,-15,-34,-54,-37,-45,-49,-11,-43,-44,-12,-21,133,-39,]),')':([5,7,9,12,14,17,39,45,50,52,57,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,85,87,91,97,99,100,101,102,107,108,109,111,112,113,114,115,116,118,119,122,123,124,129,130,131,134,],[-9,-42,-13,-20,-35,-38,-1,84,-22,-8,97,100,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,108,-53,-33,-51,-47,-48,119,-6,123,-41,-50,-14,-15,-7,-34,-54,-37,-45,-49,-11,-43,129,-44,-12,-21,-39,]),']':([5,7,9,12,14,17,39,50,52,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,86,87,91,97,99,100,102,108,109,111,112,113,114,115,116,118,119,122,123,129,130,131,134,],[-9,-42,-13,-20,-35,-38,-1,-22,-8,99,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,109,-53,-33,-51,-47,-48,-6,-41,-50,-14,-15,-7,-34,-54,-37,-45,-49,-11,-43,-44,-12,-21,-39,]),'IN':([5,7,9,12,14,17,39,50,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,108,109,110,111,112,114,115,116,118,119,122,123,129,130,131,134,],[-9,-42,-13,-20,-35,-38,-1,-22,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,-53,-33,-51,-47,-48,-6,-41,-50,125,-14,-15,-34,-54,-37,-45,-49,-11,-43,-44,-12,-21,-39,]),'ELSE':([5,7,9,12,14,17,39,50,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,87,91,97,99,100,102,108,109,111,112,114,115,116,118,119,122,123,129,130,131,134,],[-9,-42,-13,-20,-35,-38,-1,-22,-52,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-36,-40,-53,-33,-51,-47,-48,-6,-41,-50,126,-15,-34,-54,-37,-45,-49,-11,-43,-44,-12,-21,-39,]),'ASSIGN':([7,48,54,104,],[47,88,94,121,]),'AS':([50,],[90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[1,39,42,49,52,55,56,52,58,52,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,52,87,91,52,105,110,111,52,114,115,116,117,118,52,128,130,131,132,134,]),'dots':([0,2,4,7,10,13,16,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,45,47,51,60,81,82,88,89,92,93,94,95,96,98,103,107,121,125,126,127,133,],[15,15,15,44,15,15,15,15,15,15,15,15,62,15,15,15,15,15,15,15,15,15,15,15,15,15,15,79,15,15,15,15,15,79,15,15,15,15,15,15,15,15,79,15,15,15,15,15,15,]),'dots_in_struct_expression':([0,2,4,10,13,16,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,45,47,51,60,81,88,89,92,93,94,95,96,98,107,121,125,126,127,133,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'sequence':([4,],[41,]),'expression_list':([13,19,21,45,60,92,107,],[53,57,59,85,101,113,124,]),'sequence_struct':([40,82,],[77,106,]),'seq_assign_expression':([40,82,103,],[78,78,120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> - expression','expression',2,'p_expr_uminus','literals_parser.py',4),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',6),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',7),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',8),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',9),
  ('expression -> STRUCT { sequence_struct }','expression',4,'p_expression__new_struct','struct_parser.py',6),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',7),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',8),
  ('expression -> NUMBER','expression',1,'p_expression_num','literals_parser.py',8),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',10),
  ('expression -> EXTEND ID { sequence_struct }','expression',5,'p_expression_struct_extend','struct_parser.py',10),
  ('expression -> LOCAL ID ASSIGN expression IN expression','expression',6,'p_expression_local','local_parser.py',12),
  ('expression -> BOOL','expression',1,'p_expression_bool','literals_parser.py',13),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','control_parser.py',14),
  ('expression -> IMPORT ID AS ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',14),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',15),
  ('sequence -> expression','sequence',1,'p_expression_seq_expr','sequences_parser.py',15),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_seq_expr','sequences_parser.py',16),
  ('expression -> FLOAT','expression',1,'p_expression_types_float','literals_parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','control_parser.py',18),
  ('expression -> IMPORT ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',20),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',21),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',22),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',23),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',24),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',25),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',26),
  ('expression -> expression NEQS expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',27),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',28),
  ('expression -> expression NAND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',29),
  ('expression -> LAMBDA_START LAMBDA expression','expression',3,'p_expression_lambda_args_WORKING','lambda_parser.py',20),
  ('expression -> LAMBDA_START expression_list LAMBDA expression','expression',4,'p_expression_lambda_args_WORKING','lambda_parser.py',21),
  ('expression -> STRING','expression',1,'p_expression_types_string','literals_parser.py',21),
  ('expression -> ID dots ID','expression',3,'p_expression_dot_outside','struct_parser.py',23),
  ('expression -> LOOP expression DO expression','expression',4,'p_expression_loop_do_expr','control_parser.py',24),
  ('expression -> CHAR','expression',1,'p_expression_types_char','literals_parser.py',25),
  ('expression -> FOR expression ; expression ; expression DO expression','expression',8,'p_expression_for_do_expr','control_parser.py',29),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',29),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',30),
  ('expression -> ID','expression',1,'p_expression_read_id','literals_parser.py',30),
  ('expression -> ID dots ID ( )','expression',5,'p_expression_dot_outside_call','struct_parser.py',31),
  ('expression -> ID dots ID ( expression_list )','expression',6,'p_expression_dot_outside_call','struct_parser.py',32),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while_do_expr','control_parser.py',34),
  ('dots_in_struct_expression -> dots ID','dots_in_struct_expression',2,'p_expression_dot_struct','struct_parser.py',43),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','binop_parser.py',48),
  ('expression -> dots_in_struct_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',48),
  ('expression -> dots_in_struct_expression ( expression_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',49),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','binop_parser.py',52),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','binop_parser.py',56),
  ('expression -> NOT expression','expression',2,'p_expression_unary_operators_not','struct_parser.py',58),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_write_id','struct_parser.py',63),
  ('expression -> dots ID ASSIGN expression','expression',4,'p_expression_write_id_dots','struct_parser.py',67),
  ('seq_assign_expression -> dots ID ASSIGN expression','seq_assign_expression',4,'p_expression_assign','struct_parser.py',71),
  ('sequence_struct -> seq_assign_expression','sequence_struct',1,'p_expression_expressions_struct','struct_parser.py',78),
  ('sequence_struct -> sequence_struct ; seq_assign_expression','sequence_struct',3,'p_expression_expressions_struct','struct_parser.py',79),
]
