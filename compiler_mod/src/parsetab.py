
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionleft,rightassignrightlambdarightlocalnonassocthendononassocelseleftorleftandnandleft=neqseqleft<>legeleft+-left*/left([)]rightnotUMINUSBOOL ID NUMBER and array as assign char do else eq float for ge if import in lambda le letrec list local loop nand neqs not or string then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : ID lambda expression\n    |   lambda expression\n    expression : "{" sequence "}" expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : string expression : letrec ID assign expression in expressionexpression : ID assign expressionexpression : "-" expression %prec UMINUSexpression : import IDsequence :   sequence ";" expression \n                |   expression expression : char expression : if expression then expression\n    expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    id_list : expression "," id_list\n        |           expression\n    expression : "[" id_list "]"expression : if expression then expression else expression\n    expression : ID "[" NUMBER "]"expression : not expression\n    expression : loop expression do expression\n    expression : "(" id_list ")"expression : NUMBERexpression : "(" id_list ")" lambda expression expression : BOOLexpression : "(" expression ")"expression :  ID "(" ")"expression :  ID "(" id_list ")"expression : for expression ";" expression ";" expression do expression\n    expression : while expression do expression\n    '
    
_lr_action_items = {'float':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,7,9,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,75,77,78,79,81,82,85,86,96,99,100,101,103,108,],[4,35,40,4,4,44,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,90,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'import':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'lambda':([0,4,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,83,85,86,96,99,100,101,103,108,],[6,36,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,96,6,6,6,6,6,6,6,6,]),'{':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'string':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'letrec':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'-':([0,1,2,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,],[10,32,-1,-3,10,10,-18,10,-25,10,10,-39,10,10,10,-41,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-22,32,32,-21,32,32,-36,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-27,-28,-29,-30,10,32,32,-43,-7,10,10,10,-33,10,10,-38,-42,10,10,32,-35,-44,-4,32,32,32,32,10,32,32,10,10,10,32,10,32,32,32,32,10,32,]),'char':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'if':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'[':([0,4,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[13,38,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'not':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'loop':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'(':([0,4,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[17,39,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'NUMBER':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,72,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'BOOL':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'for':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'while':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'$end':([1,2,4,8,11,14,18,40,41,45,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,88,89,90,93,95,98,102,104,105,106,109,],[0,-1,-3,-18,-25,-39,-41,-22,-6,-21,-36,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,-7,-33,-38,-42,-35,-44,-4,-26,-37,-46,-40,-2,-19,-34,-45,]),'and':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[21,-1,-3,-18,-25,-39,-41,-22,21,21,-21,21,21,-36,21,21,21,21,-8,-9,-10,-11,-12,-13,-14,-15,21,-17,-27,-28,-29,-30,21,21,-43,-7,-33,-38,-42,21,-35,-44,-4,21,21,21,21,21,21,21,21,21,21,21,21,]),'eq':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[22,-1,-3,-18,-25,-39,-41,-22,22,22,-21,22,22,-36,22,22,22,22,22,-9,-10,-11,-12,-13,-14,-15,22,22,-27,-28,-29,-30,22,22,-43,-7,-33,-38,-42,22,-35,-44,-4,22,22,22,22,22,22,22,22,22,22,22,22,]),'=':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[23,-1,-3,-18,-25,-39,-41,-22,23,23,-21,23,23,-36,23,23,23,23,23,-9,-10,-11,-12,-13,-14,-15,23,23,-27,-28,-29,-30,23,23,-43,-7,-33,-38,-42,23,-35,-44,-4,23,23,23,23,23,23,23,23,23,23,23,23,]),'>':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[24,-1,-3,-18,-25,-39,-41,-22,24,24,-21,24,24,-36,24,24,24,24,24,24,24,-11,-12,-13,-14,24,24,24,-27,-28,-29,-30,24,24,-43,-7,-33,-38,-42,24,-35,-44,-4,24,24,24,24,24,24,24,24,24,24,24,24,]),'<':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[25,-1,-3,-18,-25,-39,-41,-22,25,25,-21,25,25,-36,25,25,25,25,25,25,25,-11,-12,-13,-14,25,25,25,-27,-28,-29,-30,25,25,-43,-7,-33,-38,-42,25,-35,-44,-4,25,25,25,25,25,25,25,25,25,25,25,25,]),'ge':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[26,-1,-3,-18,-25,-39,-41,-22,26,26,-21,26,26,-36,26,26,26,26,26,26,26,-11,-12,-13,-14,26,26,26,-27,-28,-29,-30,26,26,-43,-7,-33,-38,-42,26,-35,-44,-4,26,26,26,26,26,26,26,26,26,26,26,26,]),'le':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[27,-1,-3,-18,-25,-39,-41,-22,27,27,-21,27,27,-36,27,27,27,27,27,27,27,-11,-12,-13,-14,27,27,27,-27,-28,-29,-30,27,27,-43,-7,-33,-38,-42,27,-35,-44,-4,27,27,27,27,27,27,27,27,27,27,27,27,]),'neqs':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[28,-1,-3,-18,-25,-39,-41,-22,28,28,-21,28,28,-36,28,28,28,28,28,-9,-10,-11,-12,-13,-14,-15,28,28,-27,-28,-29,-30,28,28,-43,-7,-33,-38,-42,28,-35,-44,-4,28,28,28,28,28,28,28,28,28,28,28,28,]),'or':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[29,-1,-3,-18,-25,-39,-41,-22,29,29,-21,29,29,-36,29,29,29,29,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,29,29,-43,-7,-33,-38,-42,29,-35,-44,-4,29,29,29,29,29,29,29,29,29,29,29,29,]),'nand':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[30,-1,-3,-18,-25,-39,-41,-22,30,30,-21,30,30,-36,30,30,30,30,-8,-9,-10,-11,-12,-13,-14,-15,30,-17,-27,-28,-29,-30,30,30,-43,-7,-33,-38,-42,30,-35,-44,-4,30,30,30,30,30,30,30,30,30,30,30,30,]),'+':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[31,-1,-3,-18,-25,-39,-41,-22,31,31,-21,31,31,-36,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-27,-28,-29,-30,31,31,-43,-7,-33,-38,-42,31,-35,-44,-4,31,31,31,31,31,31,31,31,31,31,31,31,]),'*':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[33,-1,-3,-18,-25,-39,-41,-22,33,33,-21,33,33,-36,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-29,-30,33,33,-43,-7,-33,-38,-42,33,-35,-44,-4,33,33,33,33,33,33,33,33,33,33,33,33,]),'/':([1,2,4,8,11,14,18,40,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,91,92,93,95,97,98,102,104,105,106,107,109,],[34,-1,-3,-18,-25,-39,-41,-22,34,34,-21,34,34,-36,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-29,-30,34,34,-43,-7,-33,-38,-42,34,-35,-44,-4,34,34,34,34,34,34,34,34,34,34,34,34,]),'}':([2,4,8,11,14,18,40,41,42,43,45,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,88,89,90,91,93,95,98,102,104,105,106,109,],[-1,-3,-18,-25,-39,-41,-22,-6,76,-24,-21,-36,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,-7,-33,-38,-42,-35,-44,-4,-23,-26,-37,-46,-40,-2,-19,-34,-45,]),';':([2,4,8,11,14,18,40,41,42,43,45,49,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,88,89,90,91,93,95,97,98,102,104,105,106,109,],[-1,-3,-18,-25,-39,-41,-22,-6,77,-24,-21,-36,85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,-7,-33,-38,-42,-35,-44,-4,-23,-26,-37,103,-46,-40,-2,-19,-34,-45,]),'then':([2,4,8,11,14,18,40,41,45,46,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,88,89,90,93,95,98,102,104,105,106,109,],[-1,-3,-18,-25,-39,-41,-22,-6,-21,79,-36,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,-7,-33,-38,-42,-35,-44,-4,-26,-37,-46,-40,-2,-19,-34,-45,]),',':([2,4,8,11,14,18,40,41,45,48,49,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,88,89,90,93,95,98,102,104,105,106,109,],[-1,-3,-18,-25,-39,-41,-22,-6,-21,81,-36,81,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,-7,-33,-38,-42,-35,-44,-4,-26,-37,-46,-40,-2,-19,-34,-45,]),']':([2,4,8,11,14,18,40,41,45,47,48,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,76,80,83,84,88,89,90,93,94,95,98,102,104,105,106,109,],[-1,-3,-18,-25,-39,-41,-22,-6,-21,80,-32,-36,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,88,-43,-7,-33,-38,-42,-35,-44,-4,-26,-31,-37,-46,-40,-2,-19,-34,-45,]),'do':([2,4,8,11,14,18,40,41,45,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,88,89,90,93,95,98,102,104,105,106,107,109,],[-1,-3,-18,-25,-39,-41,-22,-6,-21,-36,82,86,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,-7,-33,-38,-42,-35,-44,-4,-26,-37,-46,-40,-2,-19,-34,108,-45,]),')':([2,4,8,11,14,18,39,40,41,45,48,49,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,74,76,80,83,84,88,89,90,93,94,95,98,102,104,105,106,109,],[-1,-3,-18,-25,-39,-41,73,-22,-6,-21,-32,-36,83,84,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,89,-7,-33,-38,-42,-35,-44,-4,-26,-31,-37,-46,-40,-2,-19,-34,-45,]),'in':([2,4,8,11,14,18,40,41,45,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,87,88,89,90,92,93,95,98,102,104,105,106,109,],[-1,-3,-18,-25,-39,-41,-22,-6,-21,-36,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,-7,-33,-38,-42,99,-35,-44,-4,100,-26,-37,-46,-40,-2,-19,-34,-45,]),'else':([2,4,8,11,14,18,40,41,45,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,73,76,80,83,84,88,89,90,93,95,98,102,104,105,106,109,],[-1,-3,-18,-25,-39,-41,-22,-6,-21,-36,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-27,-28,-29,-30,-5,-20,-43,-7,-33,-38,-42,-35,-44,-4,101,-37,-46,-40,-2,-19,-34,-45,]),'assign':([4,35,44,],[37,69,78,]),'as':([40,],[75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,7,10,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,69,77,78,79,81,82,85,86,96,99,100,101,103,108,],[1,41,43,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,48,87,91,92,93,48,95,97,98,102,104,105,106,107,109,]),'sequence':([7,],[42,]),'id_list':([13,17,39,81,],[47,51,74,94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> ID lambda expression','expression',3,'p_expression_lambda','lambda_parser.py',14),
  ('expression -> lambda expression','expression',2,'p_expression_lambda','lambda_parser.py',15),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> string','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> letrec ID assign expression in expression','expression',6,'p_expression_letrec','local_parser.py',17),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('expression -> char','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('id_list -> expression , id_list','id_list',3,'p_expression_expr_ids2','lambda_parser.py',24),
  ('id_list -> expression','id_list',1,'p_expression_expr_ids2','lambda_parser.py',25),
  ('expression -> [ id_list ]','expression',3,'p_expression_types_array','types_parser.py',24),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','types_parser.py',28),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',32),
  ('expression -> ( id_list )','expression',3,'p_expression_types_list','types_parser.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> ( id_list ) lambda expression','expression',5,'p_expression_lambda_args','lambda_parser.py',34),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> ID ( )','expression',3,'p_expression_call_no_vars','lambda_parser.py',38),
  ('expression -> ID ( id_list )','expression',4,'p_expression_call_args','lambda_parser.py',42),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',43),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',48),
]
