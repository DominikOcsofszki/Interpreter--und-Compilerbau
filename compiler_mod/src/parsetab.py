
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightassignrightlambdaleft,nonassocthennonassocelsedoleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotUMINUSright(left)BOOL ID NUMBER and array as assign char do else eq float for ge if import in lambda le letrec list local loop nand neqs not or string then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : ID lambda expressionexpression : "{" sequence "}" expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : string expression : "-" expression %prec UMINUSexpression : letrec ID assign expression in expressionexpression : ID assign expressionexpression : import IDsequence :   sequence ";" expression \n                |   expression id_list : ID "," id_list\n        |           expression\n    expression : char expression : if expression then expression\n    expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : "[" expression "]"expression : if expression then expression else expression\n    expression : not expression\n    expression : "(" id_list ")" lambda expressionexpression : loop expression do expression\n    expression : NUMBER expression : BOOLexpression :  ID "(" id_list ")"expression : "(" expression ")"expression : for expression ";" expression ";" expression do expression\n    expression : while expression do expression\n    '
    
_lr_action_items = {'float':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,8,9,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,71,73,74,75,79,80,81,82,89,94,95,96,98,103,],[4,34,38,4,4,42,4,4,4,48,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,48,4,85,4,4,4,48,4,4,4,4,4,4,4,4,4,]),'import':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'{':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'string':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'-':([0,1,2,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,],[8,31,-1,-3,8,-17,8,-26,8,8,8,8,8,-37,-38,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-21,31,-18,31,31,-34,31,-3,31,31,31,31,31,31,31,31,31,31,31,31,31,-28,-29,-30,-31,8,31,31,31,-6,8,8,8,-32,-40,8,8,8,8,31,-39,-4,31,31,31,8,31,31,31,8,8,8,31,8,31,31,31,31,8,31,]),'letrec':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'char':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'[':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'not':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'(':([0,4,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,48,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[14,37,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,37,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'loop':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'NUMBER':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'BOOL':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'for':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'while':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'$end':([1,2,4,7,10,16,17,38,41,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,76,78,84,85,88,91,93,97,99,100,101,104,],[0,-1,-3,-17,-26,-37,-38,-21,-18,-34,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,-6,-32,-40,-39,-4,-27,-36,-42,-35,-2,-19,-33,-41,]),'and':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[20,-1,-3,-17,-26,-37,-38,-21,20,-18,20,20,-34,20,-3,20,20,20,-7,-8,-9,-10,-11,-12,-13,-14,20,-16,-28,-29,-30,-31,20,20,20,-6,-32,-40,20,-39,-4,20,20,20,20,20,20,20,20,20,20,20,20,]),'eq':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[21,-1,-3,-17,-26,-37,-38,-21,21,-18,21,21,-34,21,-3,21,21,21,21,-8,-9,-10,-11,-12,-13,-14,21,21,-28,-29,-30,-31,21,21,21,-6,-32,-40,21,-39,-4,21,21,21,21,21,21,21,21,21,21,21,21,]),'=':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[22,-1,-3,-17,-26,-37,-38,-21,22,-18,22,22,-34,22,-3,22,22,22,22,-8,-9,-10,-11,-12,-13,-14,22,22,-28,-29,-30,-31,22,22,22,-6,-32,-40,22,-39,-4,22,22,22,22,22,22,22,22,22,22,22,22,]),'>':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[23,-1,-3,-17,-26,-37,-38,-21,23,-18,23,23,-34,23,-3,23,23,23,23,23,23,-10,-11,-12,-13,23,23,23,-28,-29,-30,-31,23,23,23,-6,-32,-40,23,-39,-4,23,23,23,23,23,23,23,23,23,23,23,23,]),'<':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[24,-1,-3,-17,-26,-37,-38,-21,24,-18,24,24,-34,24,-3,24,24,24,24,24,24,-10,-11,-12,-13,24,24,24,-28,-29,-30,-31,24,24,24,-6,-32,-40,24,-39,-4,24,24,24,24,24,24,24,24,24,24,24,24,]),'ge':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[25,-1,-3,-17,-26,-37,-38,-21,25,-18,25,25,-34,25,-3,25,25,25,25,25,25,-10,-11,-12,-13,25,25,25,-28,-29,-30,-31,25,25,25,-6,-32,-40,25,-39,-4,25,25,25,25,25,25,25,25,25,25,25,25,]),'le':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[26,-1,-3,-17,-26,-37,-38,-21,26,-18,26,26,-34,26,-3,26,26,26,26,26,26,-10,-11,-12,-13,26,26,26,-28,-29,-30,-31,26,26,26,-6,-32,-40,26,-39,-4,26,26,26,26,26,26,26,26,26,26,26,26,]),'neqs':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[27,-1,-3,-17,-26,-37,-38,-21,27,-18,27,27,-34,27,-3,27,27,27,27,-8,-9,-10,-11,-12,-13,-14,27,27,-28,-29,-30,-31,27,27,27,-6,-32,-40,27,-39,-4,27,27,27,27,27,27,27,27,27,27,27,27,]),'or':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[28,-1,-3,-17,-26,-37,-38,-21,28,-18,28,28,-34,28,-3,28,28,28,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,28,28,28,-6,-32,-40,28,-39,-4,28,28,28,28,28,28,28,28,28,28,28,28,]),'nand':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[29,-1,-3,-17,-26,-37,-38,-21,29,-18,29,29,-34,29,-3,29,29,29,-7,-8,-9,-10,-11,-12,-13,-14,29,-16,-28,-29,-30,-31,29,29,29,-6,-32,-40,29,-39,-4,29,29,29,29,29,29,29,29,29,29,29,29,]),'+':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[30,-1,-3,-17,-26,-37,-38,-21,30,-18,30,30,-34,30,-3,30,30,30,30,30,30,30,30,30,30,30,30,30,-28,-29,-30,-31,30,30,30,-6,-32,-40,30,-39,-4,30,30,30,30,30,30,30,30,30,30,30,30,]),'*':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[32,-1,-3,-17,-26,-37,-38,-21,32,-18,32,32,-34,32,-3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-30,-31,32,32,32,-6,-32,-40,32,-39,-4,32,32,32,32,32,32,32,32,32,32,32,32,]),'/':([1,2,4,7,10,16,17,38,40,41,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,72,76,78,83,84,85,86,87,88,91,92,93,97,99,100,101,102,104,],[33,-1,-3,-17,-26,-37,-38,-21,33,-18,33,33,-34,33,-3,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-30,-31,33,33,33,-6,-32,-40,33,-39,-4,33,33,33,33,33,33,33,33,33,33,33,33,]),'}':([2,4,7,10,16,17,38,39,40,41,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,76,78,84,85,86,88,91,93,97,99,100,101,104,],[-1,-3,-17,-26,-37,-38,-21,72,-23,-18,-34,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,-6,-32,-40,-39,-4,-22,-27,-36,-42,-35,-2,-19,-33,-41,]),';':([2,4,7,10,16,17,38,39,40,41,45,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,76,78,84,85,86,88,91,92,93,97,99,100,101,104,],[-1,-3,-17,-26,-37,-38,-21,73,-23,-18,-34,81,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,-6,-32,-40,-39,-4,-22,-27,-36,98,-42,-35,-2,-19,-33,-41,]),'then':([2,4,7,10,16,17,38,41,43,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,76,78,84,85,88,91,93,97,99,100,101,104,],[-1,-3,-17,-26,-37,-38,-21,-18,75,-34,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,-6,-32,-40,-39,-4,-27,-36,-42,-35,-2,-19,-33,-41,]),']':([2,4,7,10,16,17,38,41,44,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,76,78,84,85,88,91,93,97,99,100,101,104,],[-1,-3,-17,-26,-37,-38,-21,-18,76,-34,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,-6,-32,-40,-39,-4,-27,-36,-42,-35,-2,-19,-33,-41,]),')':([2,4,7,10,16,17,38,41,45,46,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,72,76,78,84,85,88,90,91,93,97,99,100,101,104,],[-1,-3,-17,-26,-37,-38,-21,-18,-34,77,78,-3,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,84,-25,-6,-32,-40,-39,-4,-27,-24,-36,-42,-35,-2,-19,-33,-41,]),'do':([2,4,7,10,16,17,38,41,45,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,76,78,84,85,88,91,93,97,99,100,101,102,104,],[-1,-3,-17,-26,-37,-38,-21,-18,-34,80,82,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,-6,-32,-40,-39,-4,-27,-36,-42,-35,-2,-19,-33,103,-41,]),'in':([2,4,7,10,16,17,38,41,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,76,78,83,84,85,87,88,91,93,97,99,100,101,104,],[-1,-3,-17,-26,-37,-38,-21,-18,-34,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,-6,-32,-40,94,-39,-4,95,-27,-36,-42,-35,-2,-19,-33,-41,]),'else':([2,4,7,10,16,17,38,41,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,76,78,84,85,88,91,93,97,99,100,101,104,],[-1,-3,-17,-26,-37,-38,-21,-18,-34,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-20,-6,-32,-40,-39,-4,96,-36,-42,-35,-2,-19,-33,-41,]),'lambda':([4,48,77,],[35,35,89,]),'assign':([4,34,42,48,],[36,66,74,36,]),'as':([38,],[71,]),',':([48,],[79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,8,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,66,73,74,75,79,80,81,82,89,94,95,96,98,103,],[1,40,41,43,44,45,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,83,86,87,88,70,91,92,93,97,99,100,101,102,104,]),'sequence':([6,],[39,]),'id_list':([14,37,79,],[46,69,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> ID lambda expression','expression',3,'p_expression_lambda','lambda_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> string','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',16),
  ('expression -> letrec ID assign expression in expression','expression',6,'p_expression_letrec','local_parser.py',17),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('id_list -> ID , id_list','id_list',3,'p_expression_expr_ids2','lambda_parser.py',19),
  ('id_list -> expression','id_list',1,'p_expression_expr_ids2','lambda_parser.py',20),
  ('expression -> char','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> [ expression ]','expression',3,'p_expression_types_array_assign','types_parser.py',24),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> ( id_list ) lambda expression','expression',5,'p_expression_lambda_args','lambda_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ID ( id_list )','expression',4,'p_expression_call_args','lambda_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',47),
]
