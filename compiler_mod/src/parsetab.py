
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightASSIGNrightLAMBDArightLOCALnonassocTHENDOnonassocELSEleftORleftANDNANDleft=NEQSEQleft<>LEGEleft+-left*/rightNOTUMINUSAND AS ASSIGN BOOL CHAR DO ELSE EQ EXTEND FLOAT FOR GE ID IF IMPORT IN LAMBDA LAMBDA_START LE LOCAL LOOP NAND NEQS NOT NUMBER OR STRING STRUCT THEN WHILEexpression : "-" expression %prec UMINUSexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : STRUCT "{" sequence_struct "}" expression_list :    expression "," expression_list\n                    |       expression\n    expression : NUMBERexpression : "{" sequence "}" expression : EXTEND ID "{" sequence_struct "}" expression : LOCAL ID ASSIGN expression IN expression expression : BOOLexpression : IF expression THEN expression\n    expression : IMPORT ID AS IDdots :    "."\n        |       "." dots\n    sequence :   expression \n                |   sequence ";" expression expression : FLOATexpression : IF expression THEN expression ELSE expression\n    expression : IMPORT IDexpression :   expression AND expression\n                    | expression EQ expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression GE expression\n                    | expression LE expression\n                    | expression NEQS expression\n                    | expression OR expression\n                    | expression NAND expression\n    expression :     LAMBDA_START LAMBDA expression\n            |           LAMBDA_START expression_list  LAMBDA expression\n    expression : STRING expression : LOOP expression DO expression\n    dot_expression : dots ID\n                    |   ID dots ID\n    expression : CHAR expression : FOR expression ";" expression ";" expression DO expression\n    expression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : IDexpression : dot_expression                 \n                |   dot_expression "(" ")"\n                |   dot_expression "(" expression_list ")"\n\n    expression : WHILE expression DO expression\n    expression : NOT expression expression : "[" expression_list "]"expression : ID ASSIGN expressionexpression : ID "[" NUMBER "]"expression : "(" expression_list ")"seq_assign_expression : dots ID ASSIGN expression sequence_struct :    seq_assign_expression \n                      |     sequence_struct ";"  seq_assign_expression \n                      '
    
_lr_action_items = {'-':([0,1,2,4,5,7,9,10,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,45,49,50,51,52,54,55,57,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,81,83,85,87,88,89,91,92,93,94,95,96,97,99,100,101,104,106,107,108,109,110,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,],[2,26,2,2,-9,-43,-13,2,-20,2,-35,2,-39,2,2,-44,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-1,26,2,2,26,-22,2,26,26,26,2,26,-48,-37,-2,-3,-4,-5,26,26,26,26,26,26,26,26,26,26,-10,2,-41,26,-38,2,2,26,2,2,2,2,-52,-45,2,-49,-6,26,-42,-51,26,26,-15,26,26,26,-46,26,2,-11,2,2,2,26,26,26,26,2,26,]),'STRUCT':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'NUMBER':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,46,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,86,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'{':([0,2,3,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[4,4,40,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,82,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'EXTEND':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'LOCAL':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'BOOL':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'IF':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'IMPORT':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FLOAT':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'LAMBDA_START':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'STRING':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'LOOP':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'CHAR':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FOR':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'ID':([0,2,4,6,8,10,11,13,15,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,47,51,57,62,79,81,88,89,90,92,93,94,95,99,118,120,121,122,127,],[7,7,7,43,48,7,50,7,7,7,7,7,7,7,61,-16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,87,7,7,-17,103,7,7,7,110,7,7,7,7,7,7,7,7,7,7,]),'WHILE':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'NOT':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'[':([0,2,4,7,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[22,22,22,46,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'(':([0,2,4,7,10,13,15,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,61,81,87,88,89,92,93,94,95,99,118,120,121,122,127,],[18,18,18,44,18,18,18,18,18,57,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-37,18,-38,18,18,18,18,18,18,18,18,18,18,18,18,]),'.':([0,2,4,7,10,13,15,17,18,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,44,45,51,57,81,82,88,89,92,93,94,95,99,102,118,120,121,122,127,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'$end':([1,5,7,9,12,14,16,19,39,50,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,106,107,109,110,112,113,115,116,119,124,125,128,],[0,-9,-43,-13,-20,-35,-39,-44,-1,-22,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,-50,-38,-33,-52,-45,-49,-6,-42,-51,-14,-15,-34,-36,-46,-47,-11,-12,-21,-40,]),'+':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[25,-9,-43,-13,-20,-35,-39,-44,-1,25,25,-22,25,25,25,25,-48,-37,-2,-3,-4,-5,25,25,25,25,25,25,25,25,25,25,-10,-41,25,-38,25,-52,-45,-49,-6,25,-42,-51,25,25,-15,25,25,25,-46,25,-11,25,25,25,25,25,]),'*':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[27,-9,-43,-13,-20,-35,-39,-44,-1,27,27,-22,27,27,27,27,-48,-37,27,27,-4,-5,27,27,27,27,27,27,27,27,27,27,-10,-41,27,-38,27,-52,-45,-49,-6,27,-42,-51,27,27,-15,27,27,27,-46,27,-11,27,27,27,27,27,]),'/':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[28,-9,-43,-13,-20,-35,-39,-44,-1,28,28,-22,28,28,28,28,-48,-37,28,28,-4,-5,28,28,28,28,28,28,28,28,28,28,-10,-41,28,-38,28,-52,-45,-49,-6,28,-42,-51,28,28,-15,28,28,28,-46,28,-11,28,28,28,28,28,]),'AND':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[29,-9,-43,-13,-20,-35,-39,-44,-1,29,29,-22,29,29,29,29,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,29,-32,-10,-41,29,-38,29,-52,-45,-49,-6,29,-42,-51,29,29,-15,29,29,29,-46,29,-11,29,29,29,29,29,]),'EQ':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[30,-9,-43,-13,-20,-35,-39,-44,-1,30,30,-22,30,30,30,30,-48,-37,-2,-3,-4,-5,30,-24,-25,-26,-27,-28,-29,-30,30,30,-10,-41,30,-38,30,-52,-45,-49,-6,30,-42,-51,30,30,-15,30,30,30,-46,30,-11,30,30,30,30,30,]),'=':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[31,-9,-43,-13,-20,-35,-39,-44,-1,31,31,-22,31,31,31,31,-48,-37,-2,-3,-4,-5,31,-24,-25,-26,-27,-28,-29,-30,31,31,-10,-41,31,-38,31,-52,-45,-49,-6,31,-42,-51,31,31,-15,31,31,31,-46,31,-11,31,31,31,31,31,]),'>':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[32,-9,-43,-13,-20,-35,-39,-44,-1,32,32,-22,32,32,32,32,-48,-37,-2,-3,-4,-5,32,32,32,-26,-27,-28,-29,32,32,32,-10,-41,32,-38,32,-52,-45,-49,-6,32,-42,-51,32,32,-15,32,32,32,-46,32,-11,32,32,32,32,32,]),'<':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[33,-9,-43,-13,-20,-35,-39,-44,-1,33,33,-22,33,33,33,33,-48,-37,-2,-3,-4,-5,33,33,33,-26,-27,-28,-29,33,33,33,-10,-41,33,-38,33,-52,-45,-49,-6,33,-42,-51,33,33,-15,33,33,33,-46,33,-11,33,33,33,33,33,]),'GE':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[34,-9,-43,-13,-20,-35,-39,-44,-1,34,34,-22,34,34,34,34,-48,-37,-2,-3,-4,-5,34,34,34,-26,-27,-28,-29,34,34,34,-10,-41,34,-38,34,-52,-45,-49,-6,34,-42,-51,34,34,-15,34,34,34,-46,34,-11,34,34,34,34,34,]),'LE':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[35,-9,-43,-13,-20,-35,-39,-44,-1,35,35,-22,35,35,35,35,-48,-37,-2,-3,-4,-5,35,35,35,-26,-27,-28,-29,35,35,35,-10,-41,35,-38,35,-52,-45,-49,-6,35,-42,-51,35,35,-15,35,35,35,-46,35,-11,35,35,35,35,35,]),'NEQS':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[36,-9,-43,-13,-20,-35,-39,-44,-1,36,36,-22,36,36,36,36,-48,-37,-2,-3,-4,-5,36,-24,-25,-26,-27,-28,-29,-30,36,36,-10,-41,36,-38,36,-52,-45,-49,-6,36,-42,-51,36,36,-15,36,36,36,-46,36,-11,36,36,36,36,36,]),'OR':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[37,-9,-43,-13,-20,-35,-39,-44,-1,37,37,-22,37,37,37,37,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,37,-38,37,-52,-45,-49,-6,37,-42,-51,37,37,-15,37,37,37,-46,37,-11,37,37,37,37,37,]),'NAND':([1,5,7,9,12,14,16,19,39,42,49,50,52,54,55,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,104,106,107,108,109,110,112,113,114,115,116,119,123,124,125,126,128,],[38,-9,-43,-13,-20,-35,-39,-44,-1,38,38,-22,38,38,38,38,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,38,-32,-10,-41,38,-38,38,-52,-45,-49,-6,38,-42,-51,38,38,-15,38,38,38,-46,38,-11,38,38,38,38,38,]),'}':([5,7,9,12,14,16,19,39,41,42,50,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,85,87,91,96,97,100,101,104,105,106,107,109,110,112,113,115,116,117,119,123,124,125,128,],[-9,-43,-13,-20,-35,-39,-44,-1,80,-18,-22,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,101,-54,-10,-41,-50,-38,-33,-52,-45,-49,-6,-19,119,-42,-51,-14,-15,-34,-36,-46,-47,-55,-11,-53,-12,-21,-40,]),';':([5,7,9,12,14,16,19,39,41,42,50,55,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,83,85,87,91,96,97,100,101,104,105,106,107,109,110,112,113,114,115,116,117,119,123,124,125,128,],[-9,-43,-13,-20,-35,-39,-44,-1,81,-18,-22,95,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,102,-54,-10,-41,-50,-38,-33,-52,-45,-49,-6,-19,102,-42,-51,-14,-15,-34,-36,122,-46,-47,-55,-11,-53,-12,-21,-40,]),'THEN':([5,7,9,12,14,16,19,39,49,50,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,106,107,109,110,112,113,115,116,119,124,125,128,],[-9,-43,-13,-20,-35,-39,-44,-1,89,-22,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,-50,-38,-33,-52,-45,-49,-6,-42,-51,-14,-15,-34,-36,-46,-47,-11,-12,-21,-40,]),',':([5,7,9,12,14,16,19,39,50,52,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,106,107,109,110,112,113,115,116,119,124,125,128,],[-9,-43,-13,-20,-35,-39,-44,-1,-22,92,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,-50,-38,-33,-52,-45,-49,-6,-42,-51,-14,-15,-34,-36,-46,-47,-11,-12,-21,-40,]),'LAMBDA':([5,7,9,12,13,14,16,19,39,50,52,53,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,106,107,109,110,111,112,113,115,116,119,124,125,128,],[-9,-43,-13,-20,51,-35,-39,-44,-1,-22,-8,93,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,-50,-38,-33,-52,-45,-49,-6,-42,-51,-14,-15,-7,-34,-36,-46,-47,-11,-12,-21,-40,]),'DO':([5,7,9,12,14,16,19,39,50,54,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,106,107,109,110,112,113,115,116,119,124,125,126,128,],[-9,-43,-13,-20,-35,-39,-44,-1,-22,94,99,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,-50,-38,-33,-52,-45,-49,-6,-42,-51,-14,-15,-34,-36,-46,-47,-11,-12,-21,127,-40,]),')':([5,7,9,12,14,16,19,39,44,50,52,56,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,84,85,87,91,96,97,98,100,101,106,107,109,110,111,112,113,115,116,119,124,125,128,],[-9,-43,-13,-20,-35,-39,-44,-1,83,-22,-8,96,97,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,106,-50,-38,-33,-52,-45,115,-49,-6,-42,-51,-14,-15,-7,-34,-36,-46,-47,-11,-12,-21,-40,]),']':([5,7,9,12,14,16,19,39,50,52,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,86,87,91,96,97,100,101,106,107,109,110,111,112,113,115,116,119,124,125,128,],[-9,-43,-13,-20,-35,-39,-44,-1,-22,-8,-48,100,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,-50,107,-38,-33,-52,-45,-49,-6,-42,-51,-14,-15,-7,-34,-36,-46,-47,-11,-12,-21,-40,]),'IN':([5,7,9,12,14,16,19,39,50,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,106,107,108,109,110,112,113,115,116,119,124,125,128,],[-9,-43,-13,-20,-35,-39,-44,-1,-22,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,-50,-38,-33,-52,-45,-49,-6,-42,-51,120,-14,-15,-34,-36,-46,-47,-11,-12,-21,-40,]),'ELSE':([5,7,9,12,14,16,19,39,50,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,80,83,85,87,91,96,97,100,101,106,107,109,110,112,113,115,116,119,124,125,128,],[-9,-43,-13,-20,-35,-39,-44,-1,-22,-48,-37,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-41,-50,-38,-33,-52,-45,-49,-6,-42,-51,121,-15,-34,-36,-46,-47,-11,-12,-21,-40,]),'ASSIGN':([7,48,103,],[45,88,118,]),'AS':([50,],[90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[1,39,42,49,52,54,55,52,58,59,52,63,64,65,66,67,68,69,70,71,72,73,74,75,76,52,85,91,52,104,108,109,52,112,113,114,116,123,124,125,126,128,]),'dot_expression':([0,2,4,10,13,15,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,44,45,51,57,81,88,89,92,93,94,95,99,118,120,121,122,127,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'dots':([0,2,4,7,10,13,15,17,18,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,44,45,51,57,81,82,88,89,92,93,94,95,99,102,118,120,121,122,127,],[23,23,23,47,23,23,23,23,23,23,23,23,62,23,23,23,23,23,23,23,23,23,23,23,23,23,23,79,23,23,23,23,23,79,23,23,23,23,23,23,23,79,23,23,23,23,23,]),'sequence':([4,],[41,]),'expression_list':([13,18,22,44,57,92,],[53,56,60,84,98,111,]),'sequence_struct':([40,82,],[77,105,]),'seq_assign_expression':([40,82,102,],[78,78,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> - expression','expression',2,'p_expr_uminus','literals_parser.py',4),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',6),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',7),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',8),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',9),
  ('expression -> STRUCT { sequence_struct }','expression',4,'p_expression__new_struct','struct_parser.py',6),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',7),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',8),
  ('expression -> NUMBER','expression',1,'p_expression_num','literals_parser.py',8),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',10),
  ('expression -> EXTEND ID { sequence_struct }','expression',5,'p_expression_struct_extend','struct_parser.py',10),
  ('expression -> LOCAL ID ASSIGN expression IN expression','expression',6,'p_expression_local','local_parser.py',12),
  ('expression -> BOOL','expression',1,'p_expression_bool','literals_parser.py',13),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','control_parser.py',14),
  ('expression -> IMPORT ID AS ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',14),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',15),
  ('sequence -> expression','sequence',1,'p_expression_seq_expr','sequences_parser.py',15),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_seq_expr','sequences_parser.py',16),
  ('expression -> FLOAT','expression',1,'p_expression_types_float','literals_parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','control_parser.py',18),
  ('expression -> IMPORT ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',20),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',21),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',22),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',23),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',24),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',25),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',26),
  ('expression -> expression NEQS expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',27),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',28),
  ('expression -> expression NAND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',29),
  ('expression -> LAMBDA_START LAMBDA expression','expression',3,'p_expression_lambda_args_WORKING','lambda_parser.py',20),
  ('expression -> LAMBDA_START expression_list LAMBDA expression','expression',4,'p_expression_lambda_args_WORKING','lambda_parser.py',21),
  ('expression -> STRING','expression',1,'p_expression_types_string','literals_parser.py',21),
  ('expression -> LOOP expression DO expression','expression',4,'p_expression_loop_do_expr','control_parser.py',24),
  ('dot_expression -> dots ID','dot_expression',2,'p_expression_dot_struct','struct_parser.py',24),
  ('dot_expression -> ID dots ID','dot_expression',3,'p_expression_dot_struct','struct_parser.py',25),
  ('expression -> CHAR','expression',1,'p_expression_types_char','literals_parser.py',25),
  ('expression -> FOR expression ; expression ; expression DO expression','expression',8,'p_expression_for_do_expr','control_parser.py',29),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',29),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',30),
  ('expression -> ID','expression',1,'p_expression_read_id','literals_parser.py',30),
  ('expression -> dot_expression','expression',1,'p_expression_struct_use_parent_WORKING','struct_parser.py',33),
  ('expression -> dot_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',34),
  ('expression -> dot_expression ( expression_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',35),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while_do_expr','control_parser.py',34),
  ('expression -> NOT expression','expression',2,'p_expression_unary_operators_not','struct_parser.py',46),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','binop_parser.py',48),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_write_id','struct_parser.py',50),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','binop_parser.py',52),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','binop_parser.py',56),
  ('seq_assign_expression -> dots ID ASSIGN expression','seq_assign_expression',4,'p_expression_assign','struct_parser.py',58),
  ('sequence_struct -> seq_assign_expression','sequence_struct',1,'p_expression_expressions_struct','struct_parser.py',62),
  ('sequence_struct -> sequence_struct ; seq_assign_expression','sequence_struct',3,'p_expression_expressions_struct','struct_parser.py',63),
]
