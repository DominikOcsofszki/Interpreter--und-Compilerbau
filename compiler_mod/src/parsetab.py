
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightassignrightlambdarightletrecrightlocalnonassocthendononassocelseleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotUMINUSBOOL ID NUMBER and as assign char do else eq extend float for ge if import in lambda lambda_start le letrec local loop nand neqs not or string struct then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : letrec ID assign expression lambda expressionexpression : "{" sequence "}" expression_list : expression "," expression_list\n        |        expression\n    expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : string expression :  dots IDexpression : import IDexpression : "-" expression %prec UMINUSexpression : char expression : if expression then expression\n    sequence :   sequence ";" expression \n                |   expression expression : ID assign expressionexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : "[" expression_list "]"expression : if expression then expression else expression\n    expression :     lambda_start lambda expression\n            |           lambda_start expression_list  lambda expression\n    expression : ID "[" NUMBER "]"expression : not expression\n    expression : loop expression do expression\n    expression : "(" expression_list ")"expression : NUMBER expression : BOOLexpression : "(" expression ")"expression : for expression ";" expression ";" expression do expression\n    expression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : while expression do expression\n    expression : struct "{" sequence "}" expression : extend ID "{" sequence "}" dots :    "."\n        |       "." dots\n    dot_expression : ID dots ID\n    expression : dot_expression\n                |   dot_expression "(" ")"\n                |   dot_expression "(" expression_list ")"\n\n    '
    
_lr_action_items = {'float':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,7,9,10,12,13,14,16,17,18,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,44,54,62,64,65,80,86,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[4,40,45,46,4,49,4,4,4,4,4,4,4,4,4,63,-49,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,4,4,4,-50,4,107,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'import':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'letrec':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'{':([0,7,10,12,13,14,16,17,18,20,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,63,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[7,7,7,7,7,7,7,7,7,7,7,62,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,101,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'string':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'-':([0,1,2,4,7,8,10,11,12,13,14,15,16,17,18,19,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,45,48,49,50,51,53,54,56,57,59,60,61,62,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,85,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,104,105,106,107,108,109,110,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,],[10,37,-1,-3,10,-19,10,-23,10,10,10,-40,10,10,10,-41,10,10,-52,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-21,37,-20,-22,37,37,10,-37,37,37,37,37,10,10,37,37,37,37,37,37,37,37,37,37,-28,-29,-30,-31,10,37,-44,-51,10,-6,10,10,-32,10,37,10,10,-39,-42,10,10,10,-53,37,-36,-45,-4,37,37,37,37,37,37,37,-47,-54,10,10,10,10,-48,37,37,37,37,10,37,]),'char':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'if':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'[':([0,4,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[13,42,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'lambda_start':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'not':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'loop':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'(':([0,4,7,10,12,13,14,16,17,18,20,21,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,85,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[18,43,18,18,18,18,18,18,18,18,18,18,64,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-51,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'NUMBER':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,82,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'BOOL':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'for':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'while':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'struct':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'extend':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'.':([0,4,7,10,12,13,14,16,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'$end':([1,2,4,8,11,15,19,24,45,49,50,56,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,105,106,107,110,112,113,115,116,118,123,124,125,126,129,],[0,-1,-3,-19,-23,-40,-41,-52,-21,-20,-22,-37,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,-53,-36,-45,-4,-24,-35,-38,-46,-47,-54,-48,-2,-5,-33,-43,]),'and':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[26,-1,-3,-19,-23,-40,-41,-52,-21,26,-20,-22,26,26,-37,26,26,26,26,-9,-10,-11,-12,-13,-14,-15,-16,26,-18,-28,-29,-30,-31,26,-44,-51,-6,-32,26,-39,-42,-53,26,-36,-45,-4,26,26,26,26,26,26,26,-47,-54,-48,26,26,26,26,26,]),'eq':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[27,-1,-3,-19,-23,-40,-41,-52,-21,27,-20,-22,27,27,-37,27,27,27,27,27,-10,-11,-12,-13,-14,-15,-16,27,27,-28,-29,-30,-31,27,-44,-51,-6,-32,27,-39,-42,-53,27,-36,-45,-4,27,27,27,27,27,27,27,-47,-54,-48,27,27,27,27,27,]),'=':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[28,-1,-3,-19,-23,-40,-41,-52,-21,28,-20,-22,28,28,-37,28,28,28,28,28,-10,-11,-12,-13,-14,-15,-16,28,28,-28,-29,-30,-31,28,-44,-51,-6,-32,28,-39,-42,-53,28,-36,-45,-4,28,28,28,28,28,28,28,-47,-54,-48,28,28,28,28,28,]),'>':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[29,-1,-3,-19,-23,-40,-41,-52,-21,29,-20,-22,29,29,-37,29,29,29,29,29,29,29,-12,-13,-14,-15,29,29,29,-28,-29,-30,-31,29,-44,-51,-6,-32,29,-39,-42,-53,29,-36,-45,-4,29,29,29,29,29,29,29,-47,-54,-48,29,29,29,29,29,]),'<':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[30,-1,-3,-19,-23,-40,-41,-52,-21,30,-20,-22,30,30,-37,30,30,30,30,30,30,30,-12,-13,-14,-15,30,30,30,-28,-29,-30,-31,30,-44,-51,-6,-32,30,-39,-42,-53,30,-36,-45,-4,30,30,30,30,30,30,30,-47,-54,-48,30,30,30,30,30,]),'ge':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[31,-1,-3,-19,-23,-40,-41,-52,-21,31,-20,-22,31,31,-37,31,31,31,31,31,31,31,-12,-13,-14,-15,31,31,31,-28,-29,-30,-31,31,-44,-51,-6,-32,31,-39,-42,-53,31,-36,-45,-4,31,31,31,31,31,31,31,-47,-54,-48,31,31,31,31,31,]),'le':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[32,-1,-3,-19,-23,-40,-41,-52,-21,32,-20,-22,32,32,-37,32,32,32,32,32,32,32,-12,-13,-14,-15,32,32,32,-28,-29,-30,-31,32,-44,-51,-6,-32,32,-39,-42,-53,32,-36,-45,-4,32,32,32,32,32,32,32,-47,-54,-48,32,32,32,32,32,]),'neqs':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[33,-1,-3,-19,-23,-40,-41,-52,-21,33,-20,-22,33,33,-37,33,33,33,33,33,-10,-11,-12,-13,-14,-15,-16,33,33,-28,-29,-30,-31,33,-44,-51,-6,-32,33,-39,-42,-53,33,-36,-45,-4,33,33,33,33,33,33,33,-47,-54,-48,33,33,33,33,33,]),'or':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[34,-1,-3,-19,-23,-40,-41,-52,-21,34,-20,-22,34,34,-37,34,34,34,34,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,34,-44,-51,-6,-32,34,-39,-42,-53,34,-36,-45,-4,34,34,34,34,34,34,34,-47,-54,-48,34,34,34,34,34,]),'nand':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[35,-1,-3,-19,-23,-40,-41,-52,-21,35,-20,-22,35,35,-37,35,35,35,35,-9,-10,-11,-12,-13,-14,-15,-16,35,-18,-28,-29,-30,-31,35,-44,-51,-6,-32,35,-39,-42,-53,35,-36,-45,-4,35,35,35,35,35,35,35,-47,-54,-48,35,35,35,35,35,]),'+':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[36,-1,-3,-19,-23,-40,-41,-52,-21,36,-20,-22,36,36,-37,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-28,-29,-30,-31,36,-44,-51,-6,-32,36,-39,-42,-53,36,-36,-45,-4,36,36,36,36,36,36,36,-47,-54,-48,36,36,36,36,36,]),'*':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[38,-1,-3,-19,-23,-40,-41,-52,-21,38,-20,-22,38,38,-37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-30,-31,38,-44,-51,-6,-32,38,-39,-42,-53,38,-36,-45,-4,38,38,38,38,38,38,38,-47,-54,-48,38,38,38,38,38,]),'/':([1,2,4,8,11,15,19,24,45,48,49,50,51,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,108,109,110,112,113,114,115,116,118,123,124,125,126,127,129,],[39,-1,-3,-19,-23,-40,-41,-52,-21,39,-20,-22,39,39,-37,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-30,-31,39,-44,-51,-6,-32,39,-39,-42,-53,39,-36,-45,-4,39,39,39,39,39,39,39,-47,-54,-48,39,39,39,39,39,]),'}':([2,4,8,11,15,19,24,45,47,48,49,50,56,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,100,102,105,106,107,109,110,112,113,115,116,117,118,123,124,125,126,129,],[-1,-3,-19,-23,-40,-41,-52,-21,88,-26,-20,-22,-37,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,116,-53,-36,-45,-4,-25,-24,-35,-38,-46,-47,123,-54,-48,-2,-5,-33,-43,]),';':([2,4,8,11,15,19,24,45,47,48,49,50,56,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,100,102,105,106,107,109,110,112,113,114,115,116,117,118,123,124,125,126,129,],[-1,-3,-19,-23,-40,-41,-52,-21,89,-26,-20,-22,-37,98,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,89,-53,-36,-45,-4,-25,-24,-35,-38,122,-46,-47,89,-54,-48,-2,-5,-33,-43,]),'then':([2,4,8,11,15,19,24,45,49,50,51,56,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,105,106,107,110,112,113,115,116,118,123,124,125,126,129,],[-1,-3,-19,-23,-40,-41,-52,-21,-20,-22,90,-37,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,-53,-36,-45,-4,-24,-35,-38,-46,-47,-54,-48,-2,-5,-33,-43,]),',':([2,4,8,11,15,19,24,45,49,50,53,56,59,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,105,106,107,110,112,113,115,116,118,123,124,125,126,129,],[-1,-3,-19,-23,-40,-41,-52,-21,-20,-22,92,-37,92,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,-53,-36,-45,-4,-24,-35,-38,-46,-47,-54,-48,-2,-5,-33,-43,]),']':([2,4,8,11,15,19,24,45,49,50,52,53,56,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,85,88,91,93,96,97,102,105,106,107,110,111,112,113,115,116,118,123,124,125,126,129,],[-1,-3,-19,-23,-40,-41,-52,-21,-20,-22,91,-8,-37,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,105,-44,-51,-6,-32,-34,-39,-42,-53,-36,-45,-4,-24,-7,-35,-38,-46,-47,-54,-48,-2,-5,-33,-43,]),'lambda':([2,4,8,11,14,15,19,24,45,49,50,53,55,56,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,105,106,107,108,110,111,112,113,115,116,118,123,124,125,126,129,],[-1,-3,-19,-23,54,-40,-41,-52,-21,-20,-22,-8,94,-37,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,-53,-36,-45,-4,120,-24,-7,-35,-38,-46,-47,-54,-48,-2,-5,-33,-43,]),'do':([2,4,8,11,15,19,24,45,49,50,56,57,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,105,106,107,110,112,113,115,116,118,123,124,125,126,127,129,],[-1,-3,-19,-23,-40,-41,-52,-21,-20,-22,-37,95,99,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,-53,-36,-45,-4,-24,-35,-38,-46,-47,-54,-48,-2,-5,-33,128,-43,]),')':([2,4,8,11,15,19,24,43,45,49,50,53,56,58,59,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,88,91,93,96,97,102,103,105,106,107,110,111,112,113,115,116,118,123,124,125,126,129,],[-1,-3,-19,-23,-40,-41,-52,83,-21,-20,-22,-8,-37,96,97,102,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,106,-51,-6,-32,-34,-39,-42,-53,118,-36,-45,-4,-24,-7,-35,-38,-46,-47,-54,-48,-2,-5,-33,-43,]),'in':([2,4,8,11,15,19,24,45,49,50,56,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,104,105,106,107,110,112,113,115,116,118,123,124,125,126,129,],[-1,-3,-19,-23,-40,-41,-52,-21,-20,-22,-37,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,-53,119,-36,-45,-4,-24,-35,-38,-46,-47,-54,-48,-2,-5,-33,-43,]),'else':([2,4,8,11,15,19,24,45,49,50,56,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,88,91,93,96,97,102,105,106,107,110,112,113,115,116,118,123,124,125,126,129,],[-1,-3,-19,-23,-40,-41,-52,-21,-20,-22,-37,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-28,-29,-30,-31,-27,-44,-51,-6,-32,-34,-39,-42,-53,-36,-45,-4,121,-35,-38,-46,-47,-54,-48,-2,-5,-33,-43,]),'assign':([4,40,46,],[41,80,87,]),'as':([45,],[86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[1,48,50,51,53,53,56,57,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,53,93,48,53,104,108,109,110,53,112,113,114,115,48,124,125,126,127,129,]),'dots':([0,4,7,10,12,13,14,16,17,18,20,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[9,44,9,9,9,9,9,9,9,9,9,9,65,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'dot_expression':([0,7,10,12,13,14,16,17,18,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,54,62,64,80,87,89,90,92,94,95,98,99,101,119,120,121,122,128,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'sequence':([7,62,101,],[47,100,117,]),'expression_list':([13,14,18,43,64,92,],[52,55,58,84,103,111,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> letrec ID assign expression lambda expression','expression',6,'p_expression_letrec','letrec_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',15),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',16),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> string','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> dots ID','expression',2,'p_expression_read_parent_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',19),
  ('expression -> char','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',23),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',24),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',23),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','types_parser.py',24),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> lambda_start lambda expression','expression',3,'p_expression_lambda_args_WORKING','lambda_parser.py',27),
  ('expression -> lambda_start expression_list lambda expression','expression',4,'p_expression_lambda_args_WORKING','lambda_parser.py',28),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','types_parser.py',28),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','types_parser.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',44),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',45),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',47),
  ('expression -> struct { sequence }','expression',4,'p_expression__new_struct','struct_parser.py',62),
  ('expression -> extend ID { sequence }','expression',5,'p_expression_struct_extend','struct_parser.py',66),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',70),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',71),
  ('dot_expression -> ID dots ID','dot_expression',3,'p_expression_dot_struct','struct_parser.py',76),
  ('expression -> dot_expression','expression',1,'p_expression_struct_use_parent_WORKING','struct_parser.py',102),
  ('expression -> dot_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',103),
  ('expression -> dot_expression ( expression_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',104),
]
