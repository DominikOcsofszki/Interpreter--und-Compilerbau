
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightassignrightlambdarightletrecrightlocalnonassocthendononassocelseleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotUMINUSBOOL ID NUMBER and as assign char do else eq extend float for ge if import in lambda le letrec local loop nand neqs not or string struct then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : letrec ID assign expression lambda expressionexpression : "{" sequence "}" expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : string expression : ID assign expressionexpression : import IDexpression : struct "{" sequence "}" expression : "-" expression %prec UMINUSexpression : char expression : if expression then expression\n    sequence :   sequence ";" expression \n                |   expression expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : "[" id_list "]"expression : if expression then expression else expression\n    id_list : expression "," id_list\n        |        expression\n    expression :     ID "." ID "(" id_list ")"\n                    |   ID "." ID "(" ")"\n \n    expression : ID "[" NUMBER "]"expression : not expression\n    expression : loop expression do expression\n    expression : "(" id_list ")"expression : NUMBER expression : BOOLexpression : "(" expression ")"expression : extend ID "{" sequence "}" expression : for expression ";" expression ";" expression do expression\n    expression :     lambda expression\n            |           ID lambda expression\n            |           "(" id_list ")" lambda expression\n    expression : ID "." ID \n                | ID "." "." ID \n                | ID "." "." "." ID \n                | ID "." "." "." "." ID \n                | ID "." "." "." "." "." ID \n                | ID "." "." "." "." "." "." ID \n\n    expression : while expression do expression\n    expression :  ID "(" ")"expression :  ID "(" id_list ")"'
    
_lr_action_items = {'float':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,7,8,11,13,14,15,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,40,42,48,74,77,82,83,85,87,89,92,93,94,95,97,99,108,113,117,118,119,122,126,131,132,],[4,37,43,44,4,4,4,4,4,4,4,4,57,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,76,4,4,4,4,98,102,4,4,4,4,4,4,4,4,4,116,4,4,125,4,4,4,130,133,4,]),'import':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'letrec':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'{':([0,7,8,10,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,57,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[8,8,8,48,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,93,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'string':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'struct':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'-':([0,1,2,4,7,8,9,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,43,45,47,48,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,81,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,106,108,109,111,112,113,115,116,118,119,120,121,122,123,124,125,127,128,129,130,132,133,134,],[11,34,-1,-3,11,11,-17,11,-22,11,11,11,-40,11,11,-41,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-19,34,34,11,-21,34,34,34,-37,34,34,34,34,34,34,34,34,34,34,34,34,34,-26,-27,-28,-29,11,34,-48,-55,34,11,-6,11,11,-30,11,-39,-42,11,11,11,11,34,11,-49,-56,-36,-4,34,34,-20,34,11,34,34,34,11,-35,-50,11,11,34,-43,11,34,-34,-51,34,34,34,-52,11,-53,34,]),'char':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'if':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'[':([0,4,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[14,41,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'not':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'loop':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'(':([0,4,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,76,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[15,40,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,97,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'NUMBER':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,41,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,80,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'BOOL':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'extend':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'for':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'lambda':([0,2,4,7,8,9,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,43,45,48,49,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,81,83,84,85,87,88,89,90,91,92,93,94,95,97,98,100,101,102,103,105,106,108,109,112,113,115,116,118,119,120,121,122,123,124,125,127,128,130,132,133,134,],[7,-1,42,7,7,-17,7,-22,7,7,7,-40,7,7,-41,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-19,-45,7,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,7,-18,-48,-55,-46,7,-6,7,7,-30,7,108,-42,7,7,7,7,7,-49,-56,-36,-4,118,-20,-23,7,-38,-54,7,-35,-50,7,7,-47,-43,7,-2,-34,-51,-5,-31,-52,7,-53,-44,]),'while':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'$end':([1,2,4,9,12,16,19,43,45,49,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,98,100,101,102,105,106,109,112,115,116,120,121,123,124,125,127,128,130,133,134,],[0,-1,-3,-17,-22,-40,-41,-19,-45,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,-46,-6,-30,-39,-42,-49,-56,-36,-4,-20,-23,-38,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),'and':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[23,-1,-3,-17,-22,-40,-41,-19,23,23,-21,23,23,23,-37,23,23,23,-7,-8,-9,-10,-11,-12,-13,-14,23,-16,-26,-27,-28,-29,23,-48,-55,23,-6,-30,-39,-42,23,-49,-56,-36,-4,23,23,-20,23,23,23,23,-35,-50,23,-43,23,-34,-51,23,23,23,-52,-53,23,]),'eq':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[24,-1,-3,-17,-22,-40,-41,-19,24,24,-21,24,24,24,-37,24,24,24,24,-8,-9,-10,-11,-12,-13,-14,24,24,-26,-27,-28,-29,24,-48,-55,24,-6,-30,-39,-42,24,-49,-56,-36,-4,24,24,-20,24,24,24,24,-35,-50,24,-43,24,-34,-51,24,24,24,-52,-53,24,]),'=':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[25,-1,-3,-17,-22,-40,-41,-19,25,25,-21,25,25,25,-37,25,25,25,25,-8,-9,-10,-11,-12,-13,-14,25,25,-26,-27,-28,-29,25,-48,-55,25,-6,-30,-39,-42,25,-49,-56,-36,-4,25,25,-20,25,25,25,25,-35,-50,25,-43,25,-34,-51,25,25,25,-52,-53,25,]),'>':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[26,-1,-3,-17,-22,-40,-41,-19,26,26,-21,26,26,26,-37,26,26,26,26,26,26,-10,-11,-12,-13,26,26,26,-26,-27,-28,-29,26,-48,-55,26,-6,-30,-39,-42,26,-49,-56,-36,-4,26,26,-20,26,26,26,26,-35,-50,26,-43,26,-34,-51,26,26,26,-52,-53,26,]),'<':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[27,-1,-3,-17,-22,-40,-41,-19,27,27,-21,27,27,27,-37,27,27,27,27,27,27,-10,-11,-12,-13,27,27,27,-26,-27,-28,-29,27,-48,-55,27,-6,-30,-39,-42,27,-49,-56,-36,-4,27,27,-20,27,27,27,27,-35,-50,27,-43,27,-34,-51,27,27,27,-52,-53,27,]),'ge':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[28,-1,-3,-17,-22,-40,-41,-19,28,28,-21,28,28,28,-37,28,28,28,28,28,28,-10,-11,-12,-13,28,28,28,-26,-27,-28,-29,28,-48,-55,28,-6,-30,-39,-42,28,-49,-56,-36,-4,28,28,-20,28,28,28,28,-35,-50,28,-43,28,-34,-51,28,28,28,-52,-53,28,]),'le':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[29,-1,-3,-17,-22,-40,-41,-19,29,29,-21,29,29,29,-37,29,29,29,29,29,29,-10,-11,-12,-13,29,29,29,-26,-27,-28,-29,29,-48,-55,29,-6,-30,-39,-42,29,-49,-56,-36,-4,29,29,-20,29,29,29,29,-35,-50,29,-43,29,-34,-51,29,29,29,-52,-53,29,]),'neqs':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[30,-1,-3,-17,-22,-40,-41,-19,30,30,-21,30,30,30,-37,30,30,30,30,-8,-9,-10,-11,-12,-13,-14,30,30,-26,-27,-28,-29,30,-48,-55,30,-6,-30,-39,-42,30,-49,-56,-36,-4,30,30,-20,30,30,30,30,-35,-50,30,-43,30,-34,-51,30,30,30,-52,-53,30,]),'or':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[31,-1,-3,-17,-22,-40,-41,-19,31,31,-21,31,31,31,-37,31,31,31,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,31,-48,-55,31,-6,-30,-39,-42,31,-49,-56,-36,-4,31,31,-20,31,31,31,31,-35,-50,31,-43,31,-34,-51,31,31,31,-52,-53,31,]),'nand':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[32,-1,-3,-17,-22,-40,-41,-19,32,32,-21,32,32,32,-37,32,32,32,-7,-8,-9,-10,-11,-12,-13,-14,32,-16,-26,-27,-28,-29,32,-48,-55,32,-6,-30,-39,-42,32,-49,-56,-36,-4,32,32,-20,32,32,32,32,-35,-50,32,-43,32,-34,-51,32,32,32,-52,-53,32,]),'+':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[33,-1,-3,-17,-22,-40,-41,-19,33,33,-21,33,33,33,-37,33,33,33,33,33,33,33,33,33,33,33,33,33,-26,-27,-28,-29,33,-48,-55,33,-6,-30,-39,-42,33,-49,-56,-36,-4,33,33,-20,33,33,33,33,-35,-50,33,-43,33,-34,-51,33,33,33,-52,-53,33,]),'*':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[35,-1,-3,-17,-22,-40,-41,-19,35,35,-21,35,35,35,-37,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-28,-29,35,-48,-55,35,-6,-30,-39,-42,35,-49,-56,-36,-4,35,35,-20,35,35,35,35,-35,-50,35,-43,35,-34,-51,35,35,35,-52,-53,35,]),'/':([1,2,4,9,12,16,19,43,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,103,104,105,106,109,111,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[36,-1,-3,-17,-22,-40,-41,-19,36,36,-21,36,36,36,-37,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-28,-29,36,-48,-55,36,-6,-30,-39,-42,36,-49,-56,-36,-4,36,36,-20,36,36,36,36,-35,-50,36,-43,36,-34,-51,36,36,36,-52,-53,36,]),'}':([2,4,9,12,16,19,43,45,46,47,49,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,86,88,90,91,98,100,101,102,104,105,106,109,110,112,115,116,120,121,123,124,125,127,128,130,133,134,],[-1,-3,-17,-22,-40,-41,-19,-45,84,-25,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,-46,-6,105,-30,-39,-42,-49,-56,-36,-4,-24,-20,-23,-38,121,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),';':([2,4,9,12,16,19,43,45,46,47,49,55,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,86,88,90,91,98,100,101,102,104,105,106,109,110,111,112,115,116,120,121,123,124,125,127,128,130,133,134,],[-1,-3,-17,-22,-40,-41,-19,-45,85,-25,-21,-37,94,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,-46,-6,85,-30,-39,-42,-49,-56,-36,-4,-24,-20,-23,-38,85,122,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),'then':([2,4,9,12,16,19,43,45,49,50,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,98,100,101,102,105,106,109,112,115,116,120,121,123,124,125,127,128,130,133,134,],[-1,-3,-17,-22,-40,-41,-19,-45,-21,87,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,-46,-6,-30,-39,-42,-49,-56,-36,-4,-20,-23,-38,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),',':([2,4,9,12,16,19,43,45,49,52,54,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,98,100,101,102,105,106,109,112,115,116,120,121,123,124,125,127,128,130,133,134,],[-1,-3,-17,-22,-40,-41,-19,-45,-21,89,89,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,-46,-6,-30,-39,-42,-49,-56,-36,-4,-20,-23,-38,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),']':([2,4,9,12,16,19,43,45,49,51,52,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,80,81,84,88,90,91,98,100,101,102,105,106,107,109,112,115,116,120,121,123,124,125,127,128,130,133,134,],[-1,-3,-17,-22,-40,-41,-19,-45,-21,88,-33,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,101,-46,-6,-30,-39,-42,-49,-56,-36,-4,-20,-23,-32,-38,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),')':([2,4,9,12,16,19,40,43,45,49,52,53,54,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,81,84,88,90,91,97,98,100,101,102,105,106,107,109,112,114,115,116,120,121,123,124,125,127,128,130,133,134,],[-1,-3,-17,-22,-40,-41,78,-19,-45,-21,-33,90,91,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,100,-46,-6,-30,-39,-42,115,-49,-56,-36,-4,-20,-23,-32,-38,-54,124,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),'do':([2,4,9,12,16,19,43,45,49,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,98,100,101,102,105,106,109,112,115,116,120,121,123,124,125,127,128,129,130,133,134,],[-1,-3,-17,-22,-40,-41,-19,-45,-21,-37,92,95,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,-46,-6,-30,-39,-42,-49,-56,-36,-4,-20,-23,-38,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,132,-52,-53,-44,]),'in':([2,4,9,12,16,19,43,45,49,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,96,98,100,101,102,105,106,109,112,115,116,120,121,123,124,125,127,128,130,133,134,],[-1,-3,-17,-22,-40,-41,-19,-45,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,-46,-6,-30,-39,-42,113,-49,-56,-36,-4,-20,-23,-38,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),'else':([2,4,9,12,16,19,43,45,49,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,81,84,88,90,91,98,100,101,102,105,106,109,112,115,116,120,121,123,124,125,127,128,130,133,134,],[-1,-3,-17,-22,-40,-41,-19,-45,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-26,-27,-28,-29,-18,-48,-55,-46,-6,-30,-39,-42,-49,-56,-36,-4,-20,119,-38,-54,-35,-50,-47,-43,-2,-34,-51,-5,-31,-52,-53,-44,]),'assign':([4,37,44,],[38,74,83,]),'.':([4,39,77,99,117,126,],[39,77,99,117,126,131,]),'as':([43,],[82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,7,8,11,13,14,15,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,42,48,74,83,85,87,89,92,93,94,95,97,108,113,118,119,122,132,],[1,45,47,49,50,52,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,52,81,47,96,103,104,106,52,109,47,111,112,52,120,123,127,128,129,134,]),'sequence':([8,48,93,],[46,86,110,]),'id_list':([14,15,40,89,97,],[51,53,79,107,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> letrec ID assign expression lambda expression','expression',6,'p_expression_letrec','letrec_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> string','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> struct { sequence }','expression',4,'p_expression_struct','struct_parser.py',19),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',19),
  ('expression -> char','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',23),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',24),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> [ id_list ]','expression',3,'p_expression_types_array','types_parser.py',24),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('id_list -> expression , id_list','id_list',3,'p_expression_expr_ids2','lambda_parser.py',26),
  ('id_list -> expression','id_list',1,'p_expression_expr_ids2','lambda_parser.py',27),
  ('expression -> ID . ID ( id_list )','expression',6,'p_expression_struct_use_fn','struct_parser.py',28),
  ('expression -> ID . ID ( )','expression',5,'p_expression_struct_use_fn','struct_parser.py',29),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','types_parser.py',28),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression -> ( id_list )','expression',3,'p_expression_types_list','types_parser.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> extend ID { sequence }','expression',5,'p_expression_struct_extend','struct_parser.py',41),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> lambda expression','expression',2,'p_expression_lambda_args','lambda_parser.py',44),
  ('expression -> ID lambda expression','expression',3,'p_expression_lambda_args','lambda_parser.py',45),
  ('expression -> ( id_list ) lambda expression','expression',5,'p_expression_lambda_args','lambda_parser.py',46),
  ('expression -> ID . ID','expression',3,'p_expression_struct_use_parent','struct_parser.py',45),
  ('expression -> ID . . ID','expression',4,'p_expression_struct_use_parent','struct_parser.py',46),
  ('expression -> ID . . . ID','expression',5,'p_expression_struct_use_parent','struct_parser.py',47),
  ('expression -> ID . . . . ID','expression',6,'p_expression_struct_use_parent','struct_parser.py',48),
  ('expression -> ID . . . . . ID','expression',7,'p_expression_struct_use_parent','struct_parser.py',49),
  ('expression -> ID . . . . . . ID','expression',8,'p_expression_struct_use_parent','struct_parser.py',50),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',47),
  ('expression -> ID ( )','expression',3,'p_expression_call_no_vars','lambda_parser.py',62),
  ('expression -> ID ( id_list )','expression',4,'p_expression_call_args','lambda_parser.py',66),
]
