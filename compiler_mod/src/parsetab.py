
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightASSIGNrightLAMBDArightLOCALnonassocTHENDOnonassocELSEleftORleftANDNANDleft=NEQSEQleft<>LEGEleft+-left*/rightNOTUMINUSAND AS ASSIGN BOOL CHAR DO ELSE EQ EXTEND FLOAT FOR GE ID IF IMPORT IN LAMBDA LAMBDA_START LE LOCAL LOOP NAND NEQS NOT NUMBER OR STRING STRUCT THEN WHILEexpression : "-" expression %prec UMINUSexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : NUMBERexpression : "{" sequence "}" expression : LOCAL ID ASSIGN expression IN expressionexpression_list : expression "," expression_list\n        |        expression\n     expression : BOOLexpression : IF expression THEN expression\n    expression : IMPORT ID AS IDsequence :   sequence ";" expression \n                |   expression sequence_struct :   sequence_struct ";" "." ID ASSIGN expression \n                        |  "." ID ASSIGN expression \n                        expression : FLOATexpression : IF expression THEN expression ELSE expression\n    expression : IMPORT IDexpression :     LAMBDA_START LAMBDA expression\n            |           LAMBDA_START expression_list  LAMBDA expression\n    expression :   expression AND expression\n                    | expression EQ expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression GE expression\n                    | expression LE expression\n                    | expression NEQS expression\n                    | expression OR expression\n                    | expression NAND expression\n    expression : STRING expression : STRUCT "{" sequence_struct "}" expression : LOOP expression DO expression\n    expression : CHAR expression : EXTEND ID "{" sequence_struct "}" expression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : FOR expression ";" expression ";" expression DO expression\n    expression : IDdots :    "."\n        |       "." dots\n    expression : WHILE expression DO expression\n    dot_expression : ID dots ID\n                    |   dots ID\n    expression : NOT expression\n    expression : dot_expression\n                |   dot_expression "(" ")"\n                |   dot_expression "(" expression_list ")"\n\n    expression :  dots IDexpression : "[" expression_list "]"expression : ID ASSIGN expressionexpression : ID "[" NUMBER "]"expression : dots ID ASSIGN expressionexpression : "(" expression_list ")"'
    
_lr_action_items = {'-':([0,1,2,3,4,6,7,8,10,11,12,14,15,17,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,43,44,47,48,49,50,53,56,57,58,59,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,84,85,87,88,89,92,94,95,96,97,99,100,101,102,103,104,105,106,108,109,112,114,115,116,117,118,119,121,122,123,124,125,127,128,129,130,131,132,],[2,26,2,-6,2,-41,-11,2,-18,2,-33,2,-36,2,2,2,2,-48,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-1,26,2,2,26,-20,2,26,26,26,26,-47,2,-46,-2,-3,-4,-5,26,26,26,26,26,26,26,26,26,26,-7,2,2,-38,26,-45,2,26,2,2,2,-56,2,2,-49,2,-52,26,26,-39,-54,26,-13,26,-34,26,26,26,-50,26,2,2,2,-37,2,26,26,26,26,2,2,26,26,]),'NUMBER':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,45,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,83,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'{':([0,2,4,8,11,13,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,54,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[4,4,4,4,4,52,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,93,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'LOCAL':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'BOOL':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'IF':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'IMPORT':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'FLOAT':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LAMBDA_START':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'STRING':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'STRUCT':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LOOP':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'CHAR':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'EXTEND':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'ID':([0,2,4,5,8,9,11,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,46,49,59,62,78,79,85,86,88,89,91,92,95,96,99,118,119,120,121,123,129,130,],[6,6,6,42,6,48,6,6,54,6,6,6,6,60,6,-42,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,84,6,6,-43,6,6,6,106,6,6,111,6,6,6,6,6,6,126,6,6,6,6,]),'FOR':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'WHILE':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NOT':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'[':([0,2,4,6,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[23,23,23,45,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'(':([0,2,4,6,8,11,14,17,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,60,78,79,84,85,88,89,92,95,96,99,118,119,121,123,129,130,],[17,17,17,43,17,17,17,17,17,17,17,59,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-46,17,17,-45,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'.':([0,2,4,6,8,11,14,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,52,59,78,79,85,88,89,92,93,95,96,99,110,118,119,121,123,129,130,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,91,24,24,24,24,24,24,24,91,24,24,24,120,24,24,24,24,24,24,]),'$end':([1,3,6,7,10,12,15,21,39,48,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,103,104,105,106,108,109,112,115,116,117,122,124,125,132,],[0,-6,-41,-11,-18,-33,-36,-48,-1,-20,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,-56,-49,-52,-39,-54,-12,-13,-22,-34,-35,-44,-50,-55,-37,-8,-19,-40,]),'+':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[25,-6,-41,-11,-18,-33,-36,-48,-1,25,25,-20,25,25,25,25,-47,-46,-2,-3,-4,-5,25,25,25,25,25,25,25,25,25,25,-7,-38,25,-45,25,-56,-49,-52,25,25,-39,-54,25,-13,25,-34,25,25,25,-50,25,-37,25,25,25,25,25,25,]),'*':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[27,-6,-41,-11,-18,-33,-36,-48,-1,27,27,-20,27,27,27,27,-47,-46,27,27,-4,-5,27,27,27,27,27,27,27,27,27,27,-7,-38,27,-45,27,-56,-49,-52,27,27,-39,-54,27,-13,27,-34,27,27,27,-50,27,-37,27,27,27,27,27,27,]),'/':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[28,-6,-41,-11,-18,-33,-36,-48,-1,28,28,-20,28,28,28,28,-47,-46,28,28,-4,-5,28,28,28,28,28,28,28,28,28,28,-7,-38,28,-45,28,-56,-49,-52,28,28,-39,-54,28,-13,28,-34,28,28,28,-50,28,-37,28,28,28,28,28,28,]),'AND':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[29,-6,-41,-11,-18,-33,-36,-48,-1,29,29,-20,29,29,29,29,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,29,-32,-7,-38,29,-45,29,-56,-49,-52,29,29,-39,-54,29,-13,29,-34,29,29,29,-50,29,-37,29,29,29,29,29,29,]),'EQ':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[30,-6,-41,-11,-18,-33,-36,-48,-1,30,30,-20,30,30,30,30,-47,-46,-2,-3,-4,-5,30,-24,-25,-26,-27,-28,-29,-30,30,30,-7,-38,30,-45,30,-56,-49,-52,30,30,-39,-54,30,-13,30,-34,30,30,30,-50,30,-37,30,30,30,30,30,30,]),'=':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[31,-6,-41,-11,-18,-33,-36,-48,-1,31,31,-20,31,31,31,31,-47,-46,-2,-3,-4,-5,31,-24,-25,-26,-27,-28,-29,-30,31,31,-7,-38,31,-45,31,-56,-49,-52,31,31,-39,-54,31,-13,31,-34,31,31,31,-50,31,-37,31,31,31,31,31,31,]),'>':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[32,-6,-41,-11,-18,-33,-36,-48,-1,32,32,-20,32,32,32,32,-47,-46,-2,-3,-4,-5,32,32,32,-26,-27,-28,-29,32,32,32,-7,-38,32,-45,32,-56,-49,-52,32,32,-39,-54,32,-13,32,-34,32,32,32,-50,32,-37,32,32,32,32,32,32,]),'<':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[33,-6,-41,-11,-18,-33,-36,-48,-1,33,33,-20,33,33,33,33,-47,-46,-2,-3,-4,-5,33,33,33,-26,-27,-28,-29,33,33,33,-7,-38,33,-45,33,-56,-49,-52,33,33,-39,-54,33,-13,33,-34,33,33,33,-50,33,-37,33,33,33,33,33,33,]),'GE':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[34,-6,-41,-11,-18,-33,-36,-48,-1,34,34,-20,34,34,34,34,-47,-46,-2,-3,-4,-5,34,34,34,-26,-27,-28,-29,34,34,34,-7,-38,34,-45,34,-56,-49,-52,34,34,-39,-54,34,-13,34,-34,34,34,34,-50,34,-37,34,34,34,34,34,34,]),'LE':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[35,-6,-41,-11,-18,-33,-36,-48,-1,35,35,-20,35,35,35,35,-47,-46,-2,-3,-4,-5,35,35,35,-26,-27,-28,-29,35,35,35,-7,-38,35,-45,35,-56,-49,-52,35,35,-39,-54,35,-13,35,-34,35,35,35,-50,35,-37,35,35,35,35,35,35,]),'NEQS':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[36,-6,-41,-11,-18,-33,-36,-48,-1,36,36,-20,36,36,36,36,-47,-46,-2,-3,-4,-5,36,-24,-25,-26,-27,-28,-29,-30,36,36,-7,-38,36,-45,36,-56,-49,-52,36,36,-39,-54,36,-13,36,-34,36,36,36,-50,36,-37,36,36,36,36,36,36,]),'OR':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[37,-6,-41,-11,-18,-33,-36,-48,-1,37,37,-20,37,37,37,37,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,37,-45,37,-56,-49,-52,37,37,-39,-54,37,-13,37,-34,37,37,37,-50,37,-37,37,37,37,37,37,37,]),'NAND':([1,3,6,7,10,12,15,21,39,41,47,48,50,53,56,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,101,102,103,104,105,106,108,109,112,114,115,116,117,122,124,125,127,128,131,132,],[38,-6,-41,-11,-18,-33,-36,-48,-1,38,38,-20,38,38,38,38,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,38,-32,-7,-38,38,-45,38,-56,-49,-52,38,38,-39,-54,38,-13,38,-34,38,38,38,-50,38,-37,38,38,38,38,38,38,]),'}':([3,6,7,10,12,15,21,39,40,41,48,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,90,94,97,100,101,103,104,105,106,108,109,112,113,115,116,117,122,124,125,127,131,132,],[-6,-41,-11,-18,-33,-36,-48,-1,77,-15,-20,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,109,-56,-49,-52,-14,-39,-54,-12,-13,-22,-34,-35,122,-44,-50,-55,-37,-8,-19,-17,-16,-40,]),';':([3,6,7,10,12,15,21,39,40,41,48,56,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,90,94,97,100,101,103,104,105,106,108,109,112,113,114,115,116,117,122,124,125,127,131,132,],[-6,-41,-11,-18,-33,-36,-48,-1,78,-15,-20,95,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,110,-56,-49,-52,-14,-39,-54,-12,-13,-22,-34,-35,110,123,-44,-50,-55,-37,-8,-19,-17,-16,-40,]),'THEN':([3,6,7,10,12,15,21,39,47,48,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,103,104,105,106,108,109,112,115,116,117,122,124,125,132,],[-6,-41,-11,-18,-33,-36,-48,-1,85,-20,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,-56,-49,-52,-39,-54,-12,-13,-22,-34,-35,-44,-50,-55,-37,-8,-19,-40,]),',':([3,6,7,10,12,15,21,39,48,50,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,103,104,105,106,108,109,112,115,116,117,122,124,125,132,],[-6,-41,-11,-18,-33,-36,-48,-1,-20,88,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,-56,-49,-52,-39,-54,-12,-13,-22,-34,-35,-44,-50,-55,-37,-8,-19,-40,]),'LAMBDA':([3,6,7,10,11,12,15,21,39,48,50,51,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,103,104,105,106,107,108,109,112,115,116,117,122,124,125,132,],[-6,-41,-11,-18,49,-33,-36,-48,-1,-20,-10,89,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,-56,-49,-52,-39,-54,-12,-13,-9,-22,-34,-35,-44,-50,-55,-37,-8,-19,-40,]),'DO':([3,6,7,10,12,15,21,39,48,53,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,103,104,105,106,108,109,112,115,116,117,122,124,125,128,132,],[-6,-41,-11,-18,-33,-36,-48,-1,-20,92,96,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,-56,-49,-52,-39,-54,-12,-13,-22,-34,-35,-44,-50,-55,-37,-8,-19,130,-40,]),')':([3,6,7,10,12,15,21,39,43,48,50,55,58,59,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,81,82,84,87,94,97,98,100,103,104,105,106,107,108,109,112,115,116,117,122,124,125,132,],[-6,-41,-11,-18,-33,-36,-48,-1,80,-20,-10,94,-47,97,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,103,-53,-45,-21,-56,-49,116,-52,-39,-54,-12,-13,-9,-22,-34,-35,-44,-50,-55,-37,-8,-19,-40,]),']':([3,6,7,10,12,15,21,39,48,50,58,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,83,84,87,94,97,100,103,104,105,106,107,108,109,112,115,116,117,122,124,125,132,],[-6,-41,-11,-18,-33,-36,-48,-1,-20,-10,-47,-46,100,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,104,-45,-21,-56,-49,-52,-39,-54,-12,-13,-9,-22,-34,-35,-44,-50,-55,-37,-8,-19,-40,]),'IN':([3,6,7,10,12,15,21,39,48,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,102,103,104,105,106,108,109,112,115,116,117,122,124,125,132,],[-6,-41,-11,-18,-33,-36,-48,-1,-20,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,-56,-49,-52,118,-39,-54,-12,-13,-22,-34,-35,-44,-50,-55,-37,-8,-19,-40,]),'ELSE':([3,6,7,10,12,15,21,39,48,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,87,94,97,100,103,104,105,106,108,109,112,115,116,117,122,124,125,132,],[-6,-41,-11,-18,-33,-36,-48,-1,-20,-47,-46,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-7,-38,-53,-45,-21,-56,-49,-52,-39,-54,119,-13,-22,-34,-35,-44,-50,-55,-37,-8,-19,-40,]),'ASSIGN':([6,42,60,111,126,],[44,79,99,121,129,]),'AS':([48,],[86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[1,39,41,47,50,53,50,56,57,58,50,63,64,65,66,67,68,69,70,71,72,73,74,75,76,50,82,87,50,101,102,105,50,108,112,114,115,117,124,125,127,128,131,132,]),'dot_expression':([0,2,4,8,11,14,17,18,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'dots':([0,2,4,6,8,11,14,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,43,44,49,59,78,79,85,88,89,92,95,96,99,118,119,121,123,129,130,],[22,22,22,46,22,22,22,22,22,22,22,22,62,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'sequence':([4,],[40,]),'expression_list':([11,17,23,43,59,88,],[51,55,61,81,98,107,]),'sequence_struct':([52,93,],[90,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> - expression','expression',2,'p_expr_uminus','literals_parser.py',4),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',6),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',7),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',8),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',9),
  ('expression -> NUMBER','expression',1,'p_expression_num','literals_parser.py',8),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',10),
  ('expression -> LOCAL ID ASSIGN expression IN expression','expression',6,'p_expression_local','local_parser.py',12),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',13),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',14),
  ('expression -> BOOL','expression',1,'p_expression_bool','literals_parser.py',13),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','control_parser.py',14),
  ('expression -> IMPORT ID AS ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',14),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',15),
  ('sequence_struct -> sequence_struct ; . ID ASSIGN expression','sequence_struct',6,'p_expression_expressions_struct','struct_parser.py',15),
  ('sequence_struct -> . ID ASSIGN expression','sequence_struct',4,'p_expression_expressions_struct','struct_parser.py',16),
  ('expression -> FLOAT','expression',1,'p_expression_types_float','literals_parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','control_parser.py',18),
  ('expression -> IMPORT ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> LAMBDA_START LAMBDA expression','expression',3,'p_expression_lambda_args_WORKING','lambda_parser.py',19),
  ('expression -> LAMBDA_START expression_list LAMBDA expression','expression',4,'p_expression_lambda_args_WORKING','lambda_parser.py',20),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',20),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',21),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',22),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',23),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',24),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',25),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',26),
  ('expression -> expression NEQS expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',27),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',28),
  ('expression -> expression NAND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',29),
  ('expression -> STRING','expression',1,'p_expression_types_string','literals_parser.py',21),
  ('expression -> STRUCT { sequence_struct }','expression',4,'p_expression__new_struct','struct_parser.py',22),
  ('expression -> LOOP expression DO expression','expression',4,'p_expression_loop_do_expr','control_parser.py',24),
  ('expression -> CHAR','expression',1,'p_expression_types_char','literals_parser.py',25),
  ('expression -> EXTEND ID { sequence_struct }','expression',5,'p_expression_struct_extend','struct_parser.py',26),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',28),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',29),
  ('expression -> FOR expression ; expression ; expression DO expression','expression',8,'p_expression_for_do_expr','control_parser.py',29),
  ('expression -> ID','expression',1,'p_expression_read_id','literals_parser.py',30),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',30),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',31),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while_do_expr','control_parser.py',34),
  ('dot_expression -> ID dots ID','dot_expression',3,'p_expression_dot_struct','struct_parser.py',36),
  ('dot_expression -> dots ID','dot_expression',2,'p_expression_dot_struct','struct_parser.py',37),
  ('expression -> NOT expression','expression',2,'p_expression_unary_operators_not','literals_parser.py',41),
  ('expression -> dot_expression','expression',1,'p_expression_struct_use_parent_WORKING','struct_parser.py',42),
  ('expression -> dot_expression ( )','expression',3,'p_expression_struct_use_parent_WORKING','struct_parser.py',43),
  ('expression -> dot_expression ( expression_list )','expression',4,'p_expression_struct_use_parent_WORKING','struct_parser.py',44),
  ('expression -> dots ID','expression',2,'p_expression_read_parent_id','literals_parser.py',46),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','binop_parser.py',48),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_write_id','literals_parser.py',50),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','binop_parser.py',52),
  ('expression -> dots ID ASSIGN expression','expression',4,'p_expression_write_id_dots','literals_parser.py',54),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','binop_parser.py',56),
]
