
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotASSIGN BOOL ID NUMBER and eq ge le nand neqs not orexpression : IDexpression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : expression ASSIGN expressionexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : NUMBERexpression : not expression\n    expression : "(" expression ")" expression : BOOL'
    
_lr_action_items = {'ID':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'NUMBER':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'not':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'(':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'BOOL':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,6,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[0,-1,-17,-20,-18,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-19,]),'and':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[7,-1,-17,-20,-18,7,-2,-3,-4,-5,-6,-7,-8,-9,7,-11,7,-13,-14,-15,-16,-19,]),'eq':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[8,-1,-17,-20,-18,8,8,-3,-4,-5,-6,-7,-8,-9,8,8,8,-13,-14,-15,-16,-19,]),'=':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[9,-1,-17,-20,-18,9,9,-3,-4,-5,-6,-7,-8,-9,9,9,9,-13,-14,-15,-16,-19,]),'>':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[10,-1,-17,-20,-18,10,10,10,10,-5,-6,-7,-8,10,10,10,10,-13,-14,-15,-16,-19,]),'<':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[11,-1,-17,-20,-18,11,11,11,11,-5,-6,-7,-8,11,11,11,11,-13,-14,-15,-16,-19,]),'ge':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[12,-1,-17,-20,-18,12,12,12,12,-5,-6,-7,-8,12,12,12,12,-13,-14,-15,-16,-19,]),'le':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[13,-1,-17,-20,-18,13,13,13,13,-5,-6,-7,-8,13,13,13,13,-13,-14,-15,-16,-19,]),'neqs':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[14,-1,-17,-20,-18,14,14,-3,-4,-5,-6,-7,-8,-9,14,14,14,-13,-14,-15,-16,-19,]),'or':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[15,-1,-17,-20,-18,15,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,15,-13,-14,-15,-16,-19,]),'nand':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[16,-1,-17,-20,-18,16,-2,-3,-4,-5,-6,-7,-8,-9,16,-11,16,-13,-14,-15,-16,-19,]),'ASSIGN':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[17,-1,-17,-20,-18,17,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,17,-13,-14,-15,-16,-19,]),'+':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[18,-1,-17,-20,-18,18,18,18,18,18,18,18,18,18,18,18,18,-13,-14,-15,-16,-19,]),'-':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[19,-1,-17,-20,-18,19,19,19,19,19,19,19,19,19,19,19,19,-13,-14,-15,-16,-19,]),'*':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[20,-1,-17,-20,-18,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-15,-16,-19,]),'/':([1,2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[21,-1,-17,-20,-18,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-15,-16,-19,]),')':([2,3,6,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[-1,-17,-20,-18,39,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,],[1,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> expression ASSIGN expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',22),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',23),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',30),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',34),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
]
