
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightassignrightlambdanonassocthennonassocelsedoleftorleftandnandleft=neqseqnotleft<>legeleft+-left*/rightnotUMINUSleft,right()BOOL ID NUMBER and array as assign char do else eq float for ge if import in lambda le letrec list local loop nand neqs not or string then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : ID lambda expressionexpression : "{" sequence "}"expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : string expression : letrec ID assign expression in expressionexpression : ID assign expressionexpression : import IDexpression :  ID "(" expression ")"sequence :   sequence ";" expression\n                |   expression\n    expression : char expression : if expression then expression\n    id_list : ID "," id_list\n                | ID\n\n    expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : "[" expression_list "]"expression : if expression then expression else expression\n    expression : "(" expression_list ")"expression : not expression\n    expression : loop expression do expression\n    \n    expression_list : expression\n                      | expression "," expression_list\n                      | ID "," expression_list\n    expression : NUMBERexpression : id_list lambda expression expression : BOOLexpression : "-" expression %prec UMINUSexpression : "(" expression ")"expression : for expression ";" expression ";" expression do expression\n    expression : while expression do expression\n    '
    
_lr_action_items = {'float':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,8,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,53,70,76,78,79,82,83,84,86,88,89,103,104,105,106,111,],[4,35,40,4,43,46,4,4,46,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,74,4,4,92,4,4,46,96,4,4,4,4,4,4,4,4,4,]),'import':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'{':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'string':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'letrec':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'char':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'[':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'(':([0,4,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,46,53,70,78,79,82,83,84,86,88,89,96,103,104,105,106,111,],[9,38,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,38,9,9,9,9,9,9,9,9,9,9,38,9,9,9,9,9,]),'not':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'loop':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'NUMBER':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'BOOL':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'-':([0,1,2,4,6,7,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,40,42,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,99,100,101,102,103,104,105,106,107,108,109,110,111,112,],[12,32,-1,-3,12,-17,12,-24,12,12,12,12,12,-40,-42,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-20,32,32,-3,32,-43,32,32,32,12,32,32,32,32,32,32,32,32,32,32,32,32,-28,-29,-30,-31,12,32,32,32,-6,12,12,-34,-44,12,12,12,-32,12,32,12,12,32,-21,-4,32,32,-3,32,32,32,32,12,12,12,12,32,32,32,32,12,32,]),'for':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'while':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'$end':([1,2,4,7,10,16,18,40,48,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,77,80,81,85,87,91,92,99,100,102,107,108,109,112,],[0,-1,-3,-17,-24,-40,-42,-20,-43,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,-6,-34,-44,-32,-41,-21,-4,-25,-36,-46,-2,-18,-33,-45,]),'and':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[21,-1,-3,-17,-24,-40,-42,-20,21,21,-3,21,-43,21,-35,21,21,21,-7,-8,-9,-10,-11,-12,-13,-14,21,-16,-28,-29,-30,-31,21,21,21,-6,-34,-44,-32,21,21,-21,-4,21,21,-3,21,21,21,21,21,21,21,21,21,]),'eq':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[22,-1,-3,-17,-24,-40,-42,-20,22,22,-3,22,-43,22,-35,22,22,22,22,-8,-9,-10,-11,-12,-13,-14,22,22,-28,-29,-30,-31,22,22,22,-6,-34,-44,-32,22,22,-21,-4,22,22,-3,22,22,22,22,22,22,22,22,22,]),'=':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[23,-1,-3,-17,-24,-40,-42,-20,23,23,-3,23,-43,23,-35,23,23,23,23,-8,-9,-10,-11,-12,-13,-14,23,23,-28,-29,-30,-31,23,23,23,-6,-34,-44,-32,23,23,-21,-4,23,23,-3,23,23,23,23,23,23,23,23,23,]),'>':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[24,-1,-3,-17,-24,-40,-42,-20,24,24,-3,24,-43,24,24,24,24,24,24,24,24,-10,-11,-12,-13,24,24,24,-28,-29,-30,-31,24,24,24,-6,-34,-44,-32,24,24,-21,-4,24,24,-3,24,24,24,24,24,24,24,24,24,]),'<':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[25,-1,-3,-17,-24,-40,-42,-20,25,25,-3,25,-43,25,25,25,25,25,25,25,25,-10,-11,-12,-13,25,25,25,-28,-29,-30,-31,25,25,25,-6,-34,-44,-32,25,25,-21,-4,25,25,-3,25,25,25,25,25,25,25,25,25,]),'ge':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[26,-1,-3,-17,-24,-40,-42,-20,26,26,-3,26,-43,26,26,26,26,26,26,26,26,-10,-11,-12,-13,26,26,26,-28,-29,-30,-31,26,26,26,-6,-34,-44,-32,26,26,-21,-4,26,26,-3,26,26,26,26,26,26,26,26,26,]),'le':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[27,-1,-3,-17,-24,-40,-42,-20,27,27,-3,27,-43,27,27,27,27,27,27,27,27,-10,-11,-12,-13,27,27,27,-28,-29,-30,-31,27,27,27,-6,-34,-44,-32,27,27,-21,-4,27,27,-3,27,27,27,27,27,27,27,27,27,]),'neqs':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[28,-1,-3,-17,-24,-40,-42,-20,28,28,-3,28,-43,28,-35,28,28,28,28,-8,-9,-10,-11,-12,-13,-14,28,28,-28,-29,-30,-31,28,28,28,-6,-34,-44,-32,28,28,-21,-4,28,28,-3,28,28,28,28,28,28,28,28,28,]),'or':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[29,-1,-3,-17,-24,-40,-42,-20,29,29,-3,29,-43,29,-35,29,29,29,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,29,29,29,-6,-34,-44,-32,29,29,-21,-4,29,29,-3,29,29,29,29,29,29,29,29,29,]),'nand':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[30,-1,-3,-17,-24,-40,-42,-20,30,30,-3,30,-43,30,-35,30,30,30,-7,-8,-9,-10,-11,-12,-13,-14,30,-16,-28,-29,-30,-31,30,30,30,-6,-34,-44,-32,30,30,-21,-4,30,30,-3,30,30,30,30,30,30,30,30,30,]),'+':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[31,-1,-3,-17,-24,-40,-42,-20,31,31,-3,31,-43,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-28,-29,-30,-31,31,31,31,-6,-34,-44,-32,31,31,-21,-4,31,31,-3,31,31,31,31,31,31,31,31,31,]),'*':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[33,-1,-3,-17,-24,-40,-42,-20,33,33,-3,33,-43,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-30,-31,33,33,33,-6,-34,-44,-32,33,33,-21,-4,33,33,-3,33,33,33,33,33,33,33,33,33,]),'/':([1,2,4,7,10,16,18,40,42,45,46,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,90,91,92,93,94,96,99,100,101,102,107,108,109,110,112,],[34,-1,-3,-17,-24,-40,-42,-20,34,34,-3,34,-43,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-30,-31,34,34,34,-6,-34,-44,-32,34,34,-21,-4,34,34,-3,34,34,34,34,34,34,34,34,34,]),'}':([2,4,7,10,16,18,40,41,42,48,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,77,80,81,85,87,91,92,93,99,100,102,107,108,109,112,],[-1,-3,-17,-24,-40,-42,-20,77,-23,-43,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,-6,-34,-44,-32,-41,-21,-4,-22,-25,-36,-46,-2,-18,-33,-45,]),';':([2,4,7,10,16,18,40,41,42,48,51,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,77,80,81,85,87,91,92,93,99,100,101,102,107,108,109,112,],[-1,-3,-17,-24,-40,-42,-20,78,-23,-43,-35,88,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,-6,-34,-44,-32,-41,-21,-4,-22,-25,-36,106,-46,-2,-18,-33,-45,]),')':([2,4,7,10,16,18,40,44,45,46,48,50,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,77,80,81,85,87,91,92,95,96,97,99,100,102,107,108,109,112,],[-1,-3,-17,-24,-40,-42,-20,80,81,-3,-43,-37,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,91,-6,-34,-44,-32,-41,-21,-4,-38,-3,-39,-25,-36,-46,-2,-18,-33,-45,]),',':([2,4,7,10,16,18,40,45,46,48,50,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,74,77,80,81,85,87,91,92,96,99,100,102,107,108,109,112,],[-1,39,-17,-24,-40,-42,-20,82,83,-43,82,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,39,-6,-34,-44,-32,-41,-21,-4,83,-25,-36,-46,-2,-18,-33,-45,]),'then':([2,4,7,10,16,18,40,47,48,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,77,80,81,85,87,91,92,99,100,102,107,108,109,112,],[-1,-3,-17,-24,-40,-42,-20,84,-43,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,-6,-34,-44,-32,-41,-21,-4,-25,-36,-46,-2,-18,-33,-45,]),']':([2,4,7,10,16,18,40,46,48,49,50,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,77,80,81,85,87,91,92,95,96,97,99,100,102,107,108,109,112,],[-1,-3,-17,-24,-40,-42,-20,-3,-43,85,-37,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,-6,-34,-44,-32,-41,-21,-4,-38,-3,-39,-25,-36,-46,-2,-18,-33,-45,]),'do':([2,4,7,10,16,18,40,48,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,77,80,81,85,87,91,92,99,100,102,107,108,109,110,112,],[-1,-3,-17,-24,-40,-42,-20,-43,-35,86,89,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,-6,-34,-44,-32,-41,-21,-4,-25,-36,-46,-2,-18,-33,111,-45,]),'in':([2,4,7,10,16,18,40,48,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,77,80,81,85,87,90,91,92,94,99,100,102,107,108,109,112,],[-1,-3,-17,-24,-40,-42,-20,-43,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,-6,-34,-44,-32,-41,103,-21,-4,104,-25,-36,-46,-2,-18,-33,-45,]),'else':([2,4,7,10,16,18,40,48,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,77,80,81,85,87,91,92,99,100,102,107,108,109,112,],[-1,-3,-17,-24,-40,-42,-20,-43,-35,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-28,-29,-30,-31,-5,-19,-6,-34,-44,-32,-41,-21,-4,105,-36,-46,-2,-18,-33,-45,]),'lambda':([4,17,46,74,75,96,98,],[36,53,36,-27,-26,36,-26,]),'assign':([4,35,43,46,96,],[37,70,79,37,37,]),'as':([40,],[76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[1,42,45,47,48,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,87,90,93,94,50,50,99,100,101,102,107,108,109,110,112,]),'id_list':([0,6,9,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,53,70,78,79,82,83,84,86,88,89,103,104,105,106,111,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,75,17,17,17,17,17,98,17,17,17,17,17,17,17,17,17,]),'sequence':([6,],[41,]),'expression_list':([9,13,82,83,],[44,49,95,97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> ID lambda expression','expression',3,'p_expression_lambda','lambda_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> string','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> letrec ID assign expression in expression','expression',6,'p_expression_letrec','local_parser.py',17),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> ID ( expression )','expression',4,'p_expression_call','lambda_parser.py',18),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('expression -> char','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('id_list -> ID , id_list','id_list',3,'p_expression_lambda_ids','lambda_parser.py',23),
  ('id_list -> ID','id_list',1,'p_expression_lambda_ids','lambda_parser.py',24),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array_assign','types_parser.py',24),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','types_parser.py',28),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression_list -> expression','expression_list',1,'p_expr_list','types_parser.py',32),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expr_list','types_parser.py',33),
  ('expression_list -> ID , expression_list','expression_list',3,'p_expr_list','types_parser.py',34),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> id_list lambda expression','expression',3,'p_expression_lambda_args','lambda_parser.py',34),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',47),
]
