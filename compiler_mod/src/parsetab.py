
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionnonassoc;assignleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotleftelseleftthenBOOL FLOAT ID NUMBER and assign do else eq for ge if le loop nand neqs not or then whileexpression : IDexpression : "{" sequence "}"expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : ID assign expressionsequence :   sequence ";" expression\n                |   expression\n    expression : if expression then expression\n    expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : if expression then expression else expression\n    expression : not expression\n    expression : for expression ";" expression ";" expression do expression\n    expression : NUMBER expression : BOOLexpression : loop expression do expression\n    expression : "(" expression ")"'
    
_lr_action_items = {'ID':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'{':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'if':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'not':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'for':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'NUMBER':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'BOOL':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'loop':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'(':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,7,8,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,60,63,],[0,-1,-24,-25,-22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-27,-16,-26,-21,-23,]),'and':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[11,-1,-24,-25,11,11,-22,11,11,11,-3,-4,-5,-6,-7,-8,-9,-10,11,-12,-17,-18,-19,-20,11,-2,-27,11,-16,11,11,-21,11,11,]),'eq':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[12,-1,-24,-25,12,12,-22,12,12,12,12,-4,-5,-6,-7,-8,-9,-10,12,12,-17,-18,-19,-20,12,-2,-27,12,-16,12,12,-21,12,12,]),'=':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[13,-1,-24,-25,13,13,-22,13,13,13,13,-4,-5,-6,-7,-8,-9,-10,13,13,-17,-18,-19,-20,13,-2,-27,13,-16,13,13,-21,13,13,]),'>':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[14,-1,-24,-25,14,14,-22,14,14,14,14,14,14,-6,-7,-8,-9,14,14,14,-17,-18,-19,-20,14,-2,-27,14,-16,14,14,-21,14,14,]),'<':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[15,-1,-24,-25,15,15,-22,15,15,15,15,15,15,-6,-7,-8,-9,15,15,15,-17,-18,-19,-20,15,-2,-27,15,-16,15,15,-21,15,15,]),'ge':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[16,-1,-24,-25,16,16,-22,16,16,16,16,16,16,-6,-7,-8,-9,16,16,16,-17,-18,-19,-20,16,-2,-27,16,-16,16,16,-21,16,16,]),'le':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[17,-1,-24,-25,17,17,-22,17,17,17,17,17,17,-6,-7,-8,-9,17,17,17,-17,-18,-19,-20,17,-2,-27,17,-16,17,17,-21,17,17,]),'neqs':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[18,-1,-24,-25,18,18,-22,18,18,18,18,-4,-5,-6,-7,-8,-9,-10,18,18,-17,-18,-19,-20,18,-2,-27,18,-16,18,18,-21,18,18,]),'or':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[19,-1,-24,-25,19,19,-22,19,19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,19,-2,-27,19,-16,19,19,-21,19,19,]),'nand':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[20,-1,-24,-25,20,20,-22,20,20,20,-3,-4,-5,-6,-7,-8,-9,-10,20,-12,-17,-18,-19,-20,20,-2,-27,20,-16,20,20,-21,20,20,]),'+':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[21,-1,-24,-25,21,21,-22,21,21,21,21,21,21,21,21,21,21,21,21,21,-17,-18,-19,-20,21,-2,-27,21,-16,21,21,-21,21,21,]),'-':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[22,-1,-24,-25,22,22,-22,22,22,22,22,22,22,22,22,22,22,22,22,22,-17,-18,-19,-20,22,-2,-27,22,-16,22,22,-21,22,22,]),'*':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[23,-1,-24,-25,23,23,-22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-19,-20,23,-2,-27,23,-16,23,23,-21,23,23,]),'/':([1,2,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,61,63,],[24,-1,-24,-25,24,24,-22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-19,-20,24,-2,-27,24,-16,24,24,-21,24,24,]),'}':([2,7,8,26,27,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,57,60,63,],[-1,-24,-25,48,-15,-22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-27,-14,-16,-26,-21,-23,]),';':([2,7,8,26,27,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,60,63,],[-1,-24,-25,49,-15,-22,51,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-27,-14,-16,59,-26,-21,-23,]),'then':([2,7,8,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,60,63,],[-1,-24,-25,50,-22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-27,-16,-26,-21,-23,]),'do':([2,7,8,29,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,60,61,63,],[-1,-24,-25,-22,52,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-27,-16,-26,-21,62,-23,]),')':([2,7,8,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,60,63,],[-1,-24,-25,-22,53,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-27,-16,-26,-21,-23,]),'else':([2,7,8,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,55,57,60,63,],[-1,-24,-25,-22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-27,-16,-26,-21,-23,]),'assign':([2,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,49,50,51,52,58,59,62,],[1,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,54,55,56,57,60,61,63,]),'sequence':([3,],[26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',30),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
]
