
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightassignrightlambdarightletrecrightlocalnonassocthendononassocelseleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotUMINUSBOOL ID NUMBER and as assign char do else eq extend float for ge if import in lambda le letrec local loop nand neqs not or string struct then whileexpression : floatexpression : local ID assign expression in expressionexpression : IDexpression : import ID as IDexpression : letrec ID assign expression lambda expressionexpression : "{" sequence "}" expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : string expression : ID assign expressionexpression : import IDexpression : struct "{" sequence "}" expression : "-" expression %prec UMINUSexpression : char expression : if expression then expression\n    expression : ID "." ID sequence :   sequence ";" expression \n                |   expression expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : "[" id_list "]"expression : if expression then expression else expression\n    id_list : expression "," id_list\n        |        expression\n    expression : extend struct "{" sequence "}" expression : ID "[" NUMBER "]"expression : not expression\n    expression : loop expression do expression\n    expression : "(" id_list ")"expression : NUMBER expression : BOOLexpression : "(" expression ")"expression : for expression ";" expression ";" expression do expression\n    expression :     lambda expression\n            |           ID lambda expression\n            |           "(" id_list ")" lambda expression\n    expression : while expression do expression\n    expression :  ID "(" ")"expression :  ID "(" id_list ")"'
    
_lr_action_items = {'float':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'local':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,3,5,6,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,41,42,48,74,81,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[4,37,43,44,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,76,4,4,4,4,98,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'import':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'letrec':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'{':([0,7,8,10,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,53,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[8,8,8,48,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,89,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'string':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'struct':([0,7,8,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[10,10,10,10,10,10,53,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'-':([0,1,2,4,7,8,9,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,43,45,47,48,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,],[11,34,-1,-3,11,11,-17,11,-22,11,11,-40,11,11,11,-41,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-19,34,34,11,-21,34,34,-37,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-27,-28,-29,-30,11,34,-24,34,-48,11,-6,11,11,-31,11,11,11,-39,-42,11,11,34,-36,-49,-4,34,34,-20,34,34,11,34,34,11,11,11,-35,34,11,34,34,34,34,11,34,]),'char':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'if':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'[':([0,4,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[14,40,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'extend':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'not':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'loop':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'(':([0,4,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[19,42,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'NUMBER':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,40,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,77,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'BOOL':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'for':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'lambda':([0,2,4,7,8,9,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,43,45,48,49,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,82,83,84,86,87,88,89,90,91,92,93,94,96,97,98,99,101,102,105,106,108,109,110,111,112,113,114,115,116,117,119,120,],[7,-1,41,7,7,-17,7,-22,7,7,-40,7,7,7,-41,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-19,-44,7,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,7,-18,-24,-45,-48,7,-6,7,7,-31,7,7,7,106,-42,7,7,-36,-49,-4,110,-20,-23,-38,7,-47,7,7,7,-35,-46,7,-2,-5,-32,7,-43,]),'while':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'$end':([1,2,4,9,12,16,20,43,45,49,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,96,97,98,101,102,105,108,112,113,115,116,117,120,],[0,-1,-3,-17,-22,-40,-41,-19,-44,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,-6,-31,-39,-42,-36,-49,-4,-20,-23,-38,-47,-35,-46,-2,-5,-32,-43,]),'and':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[23,-1,-3,-17,-22,-40,-41,-19,23,23,-21,23,23,-37,23,23,23,23,-7,-8,-9,-10,-11,-12,-13,-14,23,-16,-27,-28,-29,-30,23,-24,23,-48,-6,-31,-39,-42,23,-36,-49,-4,23,23,-20,23,23,23,23,-35,23,23,23,23,23,23,]),'eq':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[24,-1,-3,-17,-22,-40,-41,-19,24,24,-21,24,24,-37,24,24,24,24,24,-8,-9,-10,-11,-12,-13,-14,24,24,-27,-28,-29,-30,24,-24,24,-48,-6,-31,-39,-42,24,-36,-49,-4,24,24,-20,24,24,24,24,-35,24,24,24,24,24,24,]),'=':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[25,-1,-3,-17,-22,-40,-41,-19,25,25,-21,25,25,-37,25,25,25,25,25,-8,-9,-10,-11,-12,-13,-14,25,25,-27,-28,-29,-30,25,-24,25,-48,-6,-31,-39,-42,25,-36,-49,-4,25,25,-20,25,25,25,25,-35,25,25,25,25,25,25,]),'>':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[26,-1,-3,-17,-22,-40,-41,-19,26,26,-21,26,26,-37,26,26,26,26,26,26,26,-10,-11,-12,-13,26,26,26,-27,-28,-29,-30,26,-24,26,-48,-6,-31,-39,-42,26,-36,-49,-4,26,26,-20,26,26,26,26,-35,26,26,26,26,26,26,]),'<':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[27,-1,-3,-17,-22,-40,-41,-19,27,27,-21,27,27,-37,27,27,27,27,27,27,27,-10,-11,-12,-13,27,27,27,-27,-28,-29,-30,27,-24,27,-48,-6,-31,-39,-42,27,-36,-49,-4,27,27,-20,27,27,27,27,-35,27,27,27,27,27,27,]),'ge':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[28,-1,-3,-17,-22,-40,-41,-19,28,28,-21,28,28,-37,28,28,28,28,28,28,28,-10,-11,-12,-13,28,28,28,-27,-28,-29,-30,28,-24,28,-48,-6,-31,-39,-42,28,-36,-49,-4,28,28,-20,28,28,28,28,-35,28,28,28,28,28,28,]),'le':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[29,-1,-3,-17,-22,-40,-41,-19,29,29,-21,29,29,-37,29,29,29,29,29,29,29,-10,-11,-12,-13,29,29,29,-27,-28,-29,-30,29,-24,29,-48,-6,-31,-39,-42,29,-36,-49,-4,29,29,-20,29,29,29,29,-35,29,29,29,29,29,29,]),'neqs':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[30,-1,-3,-17,-22,-40,-41,-19,30,30,-21,30,30,-37,30,30,30,30,30,-8,-9,-10,-11,-12,-13,-14,30,30,-27,-28,-29,-30,30,-24,30,-48,-6,-31,-39,-42,30,-36,-49,-4,30,30,-20,30,30,30,30,-35,30,30,30,30,30,30,]),'or':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[31,-1,-3,-17,-22,-40,-41,-19,31,31,-21,31,31,-37,31,31,31,31,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,31,-24,31,-48,-6,-31,-39,-42,31,-36,-49,-4,31,31,-20,31,31,31,31,-35,31,31,31,31,31,31,]),'nand':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[32,-1,-3,-17,-22,-40,-41,-19,32,32,-21,32,32,-37,32,32,32,32,-7,-8,-9,-10,-11,-12,-13,-14,32,-16,-27,-28,-29,-30,32,-24,32,-48,-6,-31,-39,-42,32,-36,-49,-4,32,32,-20,32,32,32,32,-35,32,32,32,32,32,32,]),'+':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[33,-1,-3,-17,-22,-40,-41,-19,33,33,-21,33,33,-37,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-27,-28,-29,-30,33,-24,33,-48,-6,-31,-39,-42,33,-36,-49,-4,33,33,-20,33,33,33,33,-35,33,33,33,33,33,33,]),'*':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[35,-1,-3,-17,-22,-40,-41,-19,35,35,-21,35,35,-37,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-29,-30,35,-24,35,-48,-6,-31,-39,-42,35,-36,-49,-4,35,35,-20,35,35,35,35,-35,35,35,35,35,35,35,]),'/':([1,2,4,9,12,16,20,43,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,99,100,101,102,105,107,108,112,113,115,116,117,118,120,],[36,-1,-3,-17,-22,-40,-41,-19,36,36,-21,36,36,-37,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-29,-30,36,-24,36,-48,-6,-31,-39,-42,36,-36,-49,-4,36,36,-20,36,36,36,36,-35,36,36,36,36,36,36,]),'}':([2,4,9,12,16,20,43,45,46,47,49,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,85,87,91,92,96,97,98,100,101,102,104,105,108,112,113,115,116,117,120,],[-1,-3,-17,-22,-40,-41,-19,-44,83,-26,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,-6,101,-31,-39,-42,-36,-49,-4,-25,-20,-23,112,-38,-47,-35,-46,-2,-5,-32,-43,]),';':([2,4,9,12,16,20,43,45,46,47,49,54,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,85,87,91,92,96,97,98,100,101,102,104,105,107,108,112,113,115,116,117,120,],[-1,-3,-17,-22,-40,-41,-19,-44,84,-26,-21,-37,93,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,-6,84,-31,-39,-42,-36,-49,-4,-25,-20,-23,84,-38,114,-47,-35,-46,-2,-5,-32,-43,]),'then':([2,4,9,12,16,20,43,45,49,50,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,96,97,98,101,102,105,108,112,113,115,116,117,120,],[-1,-3,-17,-22,-40,-41,-19,-44,-21,86,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,-6,-31,-39,-42,-36,-49,-4,-20,-23,-38,-47,-35,-46,-2,-5,-32,-43,]),',':([2,4,9,12,16,20,43,45,49,52,54,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,96,97,98,101,102,105,108,112,113,115,116,117,120,],[-1,-3,-17,-22,-40,-41,-19,-44,-21,88,-37,88,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,-6,-31,-39,-42,-36,-49,-4,-20,-23,-38,-47,-35,-46,-2,-5,-32,-43,]),']':([2,4,9,12,16,20,43,45,49,51,52,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,83,87,91,92,96,97,98,101,102,103,105,108,112,113,115,116,117,120,],[-1,-3,-17,-22,-40,-41,-19,-44,-21,87,-34,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,96,-45,-48,-6,-31,-39,-42,-36,-49,-4,-20,-23,-33,-38,-47,-35,-46,-2,-5,-32,-43,]),'do':([2,4,9,12,16,20,43,45,49,54,55,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,96,97,98,101,102,105,108,112,113,115,116,117,118,120,],[-1,-3,-17,-22,-40,-41,-19,-44,-21,-37,90,94,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,-6,-31,-39,-42,-36,-49,-4,-20,-23,-38,-47,-35,-46,-2,-5,-32,119,-43,]),')':([2,4,9,12,16,20,42,43,45,49,52,54,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,80,83,87,91,92,96,97,98,101,102,103,105,108,112,113,115,116,117,120,],[-1,-3,-17,-22,-40,-41,79,-19,-44,-21,-34,-37,91,92,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,97,-6,-31,-39,-42,-36,-49,-4,-20,-23,-33,-38,-47,-35,-46,-2,-5,-32,-43,]),'in':([2,4,9,12,16,20,43,45,49,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,95,96,97,98,101,102,105,108,112,113,115,116,117,120,],[-1,-3,-17,-22,-40,-41,-19,-44,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,-6,-31,-39,-42,109,-36,-49,-4,-20,-23,-38,-47,-35,-46,-2,-5,-32,-43,]),'else':([2,4,9,12,16,20,43,45,49,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,83,87,91,92,96,97,98,101,102,105,108,112,113,115,116,117,120,],[-1,-3,-17,-22,-40,-41,-19,-44,-21,-37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-27,-28,-29,-30,-18,-24,-45,-48,-6,-31,-39,-42,-36,-49,-4,-20,111,-38,-47,-35,-46,-2,-5,-32,-43,]),'assign':([4,37,44,],[38,74,82,]),'.':([4,],[39,]),'as':([43,],[81,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,7,8,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,48,74,82,84,86,88,89,90,93,94,106,109,110,111,114,119,],[1,45,47,49,50,52,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,78,52,47,95,99,100,102,52,47,105,107,108,113,115,116,117,118,120,]),'sequence':([8,48,89,],[46,85,104,]),'id_list':([14,19,42,88,],[51,56,80,103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> float','expression',1,'p_expression_types_float','types_parser.py',12),
  ('expression -> local ID assign expression in expression','expression',6,'p_expression_local','local_parser.py',13),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> import ID as ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('expression -> letrec ID assign expression lambda expression','expression',6,'p_expression_letrec','letrec_parser.py',14),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> string','expression',1,'p_expression_types_string','types_parser.py',16),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('expression -> import ID','expression',2,'p_expression_import','import_parser.py',18),
  ('expression -> struct { sequence }','expression',4,'p_expression_struct','struct_parser.py',18),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',19),
  ('expression -> char','expression',1,'p_expression_types_char','types_parser.py',20),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('expression -> ID . ID','expression',3,'p_expression_struct_use','struct_parser.py',22),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',23),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',24),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> [ id_list ]','expression',3,'p_expression_types_array','types_parser.py',24),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('id_list -> expression , id_list','id_list',3,'p_expression_expr_ids2','lambda_parser.py',25),
  ('id_list -> expression','id_list',1,'p_expression_expr_ids2','lambda_parser.py',26),
  ('expression -> extend struct { sequence }','expression',5,'p_expression_struct_extend','struct_parser.py',27),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','types_parser.py',28),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',32),
  ('expression -> ( id_list )','expression',3,'p_expression_types_list','types_parser.py',32),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',43),
  ('expression -> lambda expression','expression',2,'p_expression_lambda_args','lambda_parser.py',43),
  ('expression -> ID lambda expression','expression',3,'p_expression_lambda_args','lambda_parser.py',44),
  ('expression -> ( id_list ) lambda expression','expression',5,'p_expression_lambda_args','lambda_parser.py',45),
  ('expression -> while expression do expression','expression',4,'p_expression_while_do_expr','control_parser.py',48),
  ('expression -> ID ( )','expression',3,'p_expression_call_no_vars','lambda_parser.py',58),
  ('expression -> ID ( id_list )','expression',4,'p_expression_call_args','lambda_parser.py',62),
]
