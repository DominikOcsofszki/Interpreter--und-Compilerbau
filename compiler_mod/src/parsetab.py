
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionnonassocthennonassocelsedorightassignleftorleftandnandleft=neqseqnotleft<>legeleft+-left*/rightnotUMINUSBOOL ID NUMBER and assign do else eq for ge if le loop nand neqs not or then whileexpression : IDexpression : "{" sequence "}"expression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : ID assign expressionsequence :   sequence ";" expression\n                |   expression\n    expression : if expression then expression\n    expression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : if expression then expression else expression\n    expression : not expression\n    expression : loop expression do expression\n    expression : NUMBER expression : BOOLexpression : "(" expression ")"expression : for expression ";" expression ";" expression do expression\n    expression : "-" expression %prec UMINUS'
    
_lr_action_items = {'ID':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'{':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'if':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'not':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'loop':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NUMBER':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'BOOL':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'(':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'for':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'-':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[5,23,-1,5,5,5,5,5,-24,-25,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,23,23,-28,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-17,-18,-19,-20,23,-2,5,5,5,-26,5,23,23,23,23,5,5,23,23,5,23,]),'$end':([1,2,8,9,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,62,65,],[0,-1,-24,-25,-28,-22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-26,-16,-23,-21,-27,]),'and':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[12,-1,-24,-25,12,12,-28,-22,12,12,12,-3,-4,-5,-6,-7,-8,-9,-10,12,-12,-17,-18,-19,-20,12,-2,-26,12,12,12,12,12,12,12,]),'eq':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[13,-1,-24,-25,13,13,-28,-22,13,13,13,13,-4,-5,-6,-7,-8,-9,-10,13,13,-17,-18,-19,-20,13,-2,-26,13,13,13,13,13,13,13,]),'=':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[14,-1,-24,-25,14,14,-28,-22,14,14,14,14,-4,-5,-6,-7,-8,-9,-10,14,14,-17,-18,-19,-20,14,-2,-26,14,14,14,14,14,14,14,]),'>':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[15,-1,-24,-25,15,15,-28,15,15,15,15,15,15,15,-6,-7,-8,-9,15,15,15,-17,-18,-19,-20,15,-2,-26,15,15,15,15,15,15,15,]),'<':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[16,-1,-24,-25,16,16,-28,16,16,16,16,16,16,16,-6,-7,-8,-9,16,16,16,-17,-18,-19,-20,16,-2,-26,16,16,16,16,16,16,16,]),'ge':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[17,-1,-24,-25,17,17,-28,17,17,17,17,17,17,17,-6,-7,-8,-9,17,17,17,-17,-18,-19,-20,17,-2,-26,17,17,17,17,17,17,17,]),'le':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[18,-1,-24,-25,18,18,-28,18,18,18,18,18,18,18,-6,-7,-8,-9,18,18,18,-17,-18,-19,-20,18,-2,-26,18,18,18,18,18,18,18,]),'neqs':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[19,-1,-24,-25,19,19,-28,-22,19,19,19,19,-4,-5,-6,-7,-8,-9,-10,19,19,-17,-18,-19,-20,19,-2,-26,19,19,19,19,19,19,19,]),'or':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[20,-1,-24,-25,20,20,-28,-22,20,20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,20,-2,-26,20,20,20,20,20,20,20,]),'nand':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[21,-1,-24,-25,21,21,-28,-22,21,21,21,-3,-4,-5,-6,-7,-8,-9,-10,21,-12,-17,-18,-19,-20,21,-2,-26,21,21,21,21,21,21,21,]),'+':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[22,-1,-24,-25,22,22,-28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-17,-18,-19,-20,22,-2,-26,22,22,22,22,22,22,22,]),'*':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[24,-1,-24,-25,24,24,-28,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-19,-20,24,-2,-26,24,24,24,24,24,24,24,]),'/':([1,2,8,9,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,63,65,],[25,-1,-24,-25,25,25,-28,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-19,-20,25,-2,-26,25,25,25,25,25,25,25,]),'}':([2,8,9,27,28,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,62,65,],[-1,-24,-25,50,-15,-28,-22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-26,-14,-16,-23,-21,-27,]),';':([2,8,9,27,28,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,58,59,62,65,],[-1,-24,-25,51,-15,-28,-22,55,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-26,-14,-16,-23,61,-21,-27,]),'then':([2,8,9,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,62,65,],[-1,-24,-25,52,-28,-22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-26,-16,-23,-21,-27,]),'do':([2,8,9,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,62,63,65,],[-1,-24,-25,-28,-22,53,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-26,-16,-23,-21,64,-27,]),')':([2,8,9,30,31,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,62,65,],[-1,-24,-25,-28,-22,54,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-26,-16,-23,-21,-27,]),'else':([2,8,9,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,57,58,62,65,],[-1,-24,-25,-28,-22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-17,-18,-19,-20,-13,-2,-26,60,-23,-21,-27,]),'assign':([2,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,51,52,53,55,60,61,64,],[1,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,56,57,58,59,62,63,65,]),'sequence':([3,],[27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> ID','expression',1,'p_expression_read_id','var_parser.py',13),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',14),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',16),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',17),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',18),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',19),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',20),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',21),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',22),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',23),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',24),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators_bool','bool_parser.py',25),
  ('expression -> ID assign expression','expression',3,'p_expression_write_id','var_parser.py',17),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_expressions','sequences_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_expressions','sequences_parser.py',19),
  ('expression -> if expression then expression','expression',4,'p_expression_if_then','control_parser.py',21),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',24),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',25),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',26),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','arith_parser.py',27),
  ('expression -> if expression then expression else expression','expression',6,'p_expression_if_then_else','control_parser.py',25),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',30),
  ('expression -> loop expression do expression','expression',4,'p_expression_loop_do_expr','control_parser.py',31),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',33),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',35),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',37),
  ('expression -> for expression ; expression ; expression do expression','expression',8,'p_expression_for_do_expr','control_parser.py',42),
  ('expression -> - expression','expression',2,'p_expr_uminus','top_parser.py',113),
]
