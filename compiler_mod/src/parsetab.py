
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightASSIGNrightLAMBDArightLOCALnonassocTHENDOnonassocELSEleftORleftANDNANDleft=NEQSEQleft<>LEGEleft+-left*/rightNOTUMINUSAND AS ASSIGN BOOL CHAR DO ELSE EQ EXTEND FLOAT FOR GE ID IF IMPORT IN LAMBDA LAMBDA_START LE LOCAL LOOP NAND NEQS NOT NUMBER OR STRING STRUCT THEN WHILEexpression : "-" expression %prec UMINUSexpression :   expression "+" expression\n                    | expression "-" expression\n                    | expression \'*\' expression\n                    | expression \'/\' expression\n    expression : STRUCT "{" sequence_struct "}" expression_list :    expression "," expression_list\n                    |       expression\n    expression : NUMBERexpression : "{" sequence "}" expression : EXTEND ID "{" sequence_struct "}" expression : LOCAL ID ASSIGN expression IN expression expression : BOOLexpression : IF expression THEN expression\n    expression : IMPORT ID AS IDsequence_struct :    seq_struct_assign_expression \n                      |     sequence_struct ";"  seq_struct_assign_expression \n                      expression : FLOATexpression : IF expression THEN expression ELSE expression\n    expression : IMPORT IDsequence :   expression \n                |   sequence ";" expression expression :   expression AND expression\n                    | expression EQ expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression GE expression\n                    | expression LE expression\n                    | expression NEQS expression\n                    | expression OR expression\n                    | expression NAND expression\n    expression : STRING dots :   "."\n            |   "." dots\n    expression : LOOP expression DO expression\n    expression : CHAR expression : FOR expression ";" expression ";" expression DO expression\n    expression : IDexpression : ID "(" ")"     \n        |           ID "(" expression_list ")"\n    expression : ID dots IDexpression : WHILE expression DO expression\n    expression : ID dots ID "(" ")"\n                |   ID dots ID "(" expression_list ")"\n    expression : "[" expression_list "]"expression : ID "[" NUMBER "]"expression : "(" expression_list ")"expression : NOT expression \n    assign_expression :  ID ASSIGN expression\n                       |    ID ASSIGN lambda_expression\n       expression : assign_expression\n    seq_struct_assign_expression : \'.\' assign_expression \n     lambda_expression :      LAMBDA_START expression_list  LAMBDA seq_struct_assign_expression\n                    |           LAMBDA_START LAMBDA seq_struct_assign_expression\n    lambda_expression :      LAMBDA_START LAMBDA expression\n                    |           LAMBDA_START expression_list  LAMBDA expression\n    '
    
_lr_action_items = {'-':([0,1,2,4,5,7,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,41,44,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,76,78,80,81,82,84,85,87,88,89,90,91,92,93,95,97,99,100,101,103,104,105,106,107,108,110,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,],[2,23,2,2,-9,-39,-13,2,-18,-33,2,-37,2,2,2,2,2,-52,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-1,23,2,2,23,-20,23,23,23,23,-49,-2,-3,-4,-5,23,23,23,23,23,23,23,23,23,23,-10,2,-40,-42,23,-51,2,2,2,2,2,-48,2,2,-46,-6,-53,23,-41,2,-47,2,23,23,-15,23,23,23,-11,-44,2,-55,23,2,2,2,-45,-54,23,23,23,23,2,23,]),'STRUCT':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'NUMBER':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,43,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,79,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'{':([0,2,3,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[4,4,37,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,75,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'EXTEND':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'LOCAL':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'BOOL':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'IF':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'IMPORT':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'FLOAT':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'STRING':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LOOP':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'CHAR':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'FOR':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'ID':([0,2,4,6,8,10,11,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,42,44,45,72,74,82,83,84,85,86,87,88,90,91,100,103,115,118,119,120,127,],[7,7,7,40,46,7,48,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,78,7,-34,96,7,7,-35,7,7,106,7,7,7,7,7,7,7,7,7,7,7,]),'WHILE':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'[':([0,2,4,7,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[19,19,19,43,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'(':([0,2,4,7,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,78,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[17,17,17,41,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,100,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'NOT':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'$end':([1,5,7,9,12,13,15,21,36,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,99,101,105,106,107,110,112,113,116,117,121,122,123,124,125,128,],[0,-9,-39,-13,-18,-33,-37,-52,-1,-20,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,-50,-51,-48,-46,-6,-53,-41,-47,-14,-15,-36,-43,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),'+':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[22,-9,-39,-13,-18,-33,-37,-52,-1,22,22,-20,22,22,22,22,-49,-2,-3,-4,-5,22,22,22,22,22,22,22,22,22,22,-10,-40,-42,22,-51,-48,-46,-6,-53,22,-41,-47,22,22,-15,22,22,22,-11,-44,-55,22,-45,-54,22,22,22,22,22,]),'*':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[24,-9,-39,-13,-18,-33,-37,-52,-1,24,24,-20,24,24,24,24,-49,24,24,-4,-5,24,24,24,24,24,24,24,24,24,24,-10,-40,-42,24,-51,-48,-46,-6,-53,24,-41,-47,24,24,-15,24,24,24,-11,-44,-55,24,-45,-54,24,24,24,24,24,]),'/':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[25,-9,-39,-13,-18,-33,-37,-52,-1,25,25,-20,25,25,25,25,-49,25,25,-4,-5,25,25,25,25,25,25,25,25,25,25,-10,-40,-42,25,-51,-48,-46,-6,-53,25,-41,-47,25,25,-15,25,25,25,-11,-44,-55,25,-45,-54,25,25,25,25,25,]),'AND':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[26,-9,-39,-13,-18,-33,-37,-52,-1,26,26,-20,26,26,26,26,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,26,-32,-10,-40,-42,26,-51,-48,-46,-6,-53,26,-41,-47,26,26,-15,26,26,26,-11,-44,-55,26,-45,-54,26,26,26,26,26,]),'EQ':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[27,-9,-39,-13,-18,-33,-37,-52,-1,27,27,-20,27,27,27,27,-49,-2,-3,-4,-5,27,-24,-25,-26,-27,-28,-29,-30,27,27,-10,-40,-42,27,-51,-48,-46,-6,-53,27,-41,-47,27,27,-15,27,27,27,-11,-44,-55,27,-45,-54,27,27,27,27,27,]),'=':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[28,-9,-39,-13,-18,-33,-37,-52,-1,28,28,-20,28,28,28,28,-49,-2,-3,-4,-5,28,-24,-25,-26,-27,-28,-29,-30,28,28,-10,-40,-42,28,-51,-48,-46,-6,-53,28,-41,-47,28,28,-15,28,28,28,-11,-44,-55,28,-45,-54,28,28,28,28,28,]),'>':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[29,-9,-39,-13,-18,-33,-37,-52,-1,29,29,-20,29,29,29,29,-49,-2,-3,-4,-5,29,29,29,-26,-27,-28,-29,29,29,29,-10,-40,-42,29,-51,-48,-46,-6,-53,29,-41,-47,29,29,-15,29,29,29,-11,-44,-55,29,-45,-54,29,29,29,29,29,]),'<':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[30,-9,-39,-13,-18,-33,-37,-52,-1,30,30,-20,30,30,30,30,-49,-2,-3,-4,-5,30,30,30,-26,-27,-28,-29,30,30,30,-10,-40,-42,30,-51,-48,-46,-6,-53,30,-41,-47,30,30,-15,30,30,30,-11,-44,-55,30,-45,-54,30,30,30,30,30,]),'GE':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[31,-9,-39,-13,-18,-33,-37,-52,-1,31,31,-20,31,31,31,31,-49,-2,-3,-4,-5,31,31,31,-26,-27,-28,-29,31,31,31,-10,-40,-42,31,-51,-48,-46,-6,-53,31,-41,-47,31,31,-15,31,31,31,-11,-44,-55,31,-45,-54,31,31,31,31,31,]),'LE':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[32,-9,-39,-13,-18,-33,-37,-52,-1,32,32,-20,32,32,32,32,-49,-2,-3,-4,-5,32,32,32,-26,-27,-28,-29,32,32,32,-10,-40,-42,32,-51,-48,-46,-6,-53,32,-41,-47,32,32,-15,32,32,32,-11,-44,-55,32,-45,-54,32,32,32,32,32,]),'NEQS':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[33,-9,-39,-13,-18,-33,-37,-52,-1,33,33,-20,33,33,33,33,-49,-2,-3,-4,-5,33,-24,-25,-26,-27,-28,-29,-30,33,33,-10,-40,-42,33,-51,-48,-46,-6,-53,33,-41,-47,33,33,-15,33,33,33,-11,-44,-55,33,-45,-54,33,33,33,33,33,]),'OR':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[34,-9,-39,-13,-18,-33,-37,-52,-1,34,34,-20,34,34,34,34,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,34,-51,-48,-46,-6,-53,34,-41,-47,34,34,-15,34,34,34,-11,-44,-55,34,-45,-54,34,34,34,34,34,]),'NAND':([1,5,7,9,12,13,15,21,36,39,47,48,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,97,99,101,104,105,106,107,108,110,112,113,116,117,121,122,123,124,125,126,128,],[35,-9,-39,-13,-18,-33,-37,-52,-1,35,35,-20,35,35,35,35,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,35,-32,-10,-40,-42,35,-51,-48,-46,-6,-53,35,-41,-47,35,35,-15,35,35,35,-11,-44,-55,35,-45,-54,35,35,35,35,35,]),'}':([5,7,9,12,13,15,21,36,38,39,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,76,78,80,81,89,92,93,95,97,98,99,101,105,106,107,110,111,112,113,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,73,-21,-20,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,93,-16,-10,-40,-42,-50,-51,-48,-46,-6,-53,-22,112,-41,-47,-14,-15,-36,-43,-17,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),';':([5,7,9,12,13,15,21,36,38,39,48,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,76,78,80,81,89,92,93,95,97,98,99,101,105,106,107,108,110,111,112,113,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,74,-21,-20,88,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,94,-16,-10,-40,-42,-50,-51,-48,-46,-6,-53,-22,94,-41,-47,-14,-15,-36,120,-43,-17,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),'THEN':([5,7,9,12,13,15,21,36,47,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,99,101,105,106,107,110,112,113,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,85,-20,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,-50,-51,-48,-46,-6,-53,-41,-47,-14,-15,-36,-43,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),'DO':([5,7,9,12,13,15,21,36,48,49,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,99,101,105,106,107,110,112,113,116,117,121,122,123,124,125,126,128,],[-9,-39,-13,-18,-33,-37,-52,-1,-20,87,91,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,-50,-51,-48,-46,-6,-53,-41,-47,-14,-15,-36,-43,-11,-44,-55,-56,-45,-54,-57,-12,-19,127,-38,]),',':([5,7,9,12,13,15,21,36,48,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,99,101,105,106,107,110,112,113,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,-20,90,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,-50,-51,-48,-46,-6,-53,-41,-47,-14,-15,-36,-43,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),')':([5,7,9,12,13,15,21,36,41,48,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,77,78,80,81,89,92,93,95,99,100,101,105,106,107,109,110,112,113,114,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,76,-20,89,-8,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,99,-42,-50,-51,-48,-46,-6,-53,-41,113,-47,-14,-15,-36,-7,-43,-11,-44,121,-55,-56,-45,-54,-57,-12,-19,-38,]),']':([5,7,9,12,13,15,21,36,48,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,79,80,81,89,92,93,95,99,101,105,106,107,109,110,112,113,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,-20,-8,92,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,101,-50,-51,-48,-46,-6,-53,-41,-47,-14,-15,-36,-7,-43,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),'LAMBDA':([5,7,9,12,13,15,21,36,48,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,82,89,92,93,95,99,101,102,105,106,107,109,110,112,113,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,-20,-8,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,-50,-51,103,-48,-46,-6,-53,-41,-47,115,-14,-15,-36,-7,-43,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),'IN':([5,7,9,12,13,15,21,36,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,99,101,104,105,106,107,110,112,113,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,-20,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,-50,-51,-48,-46,-6,-53,-41,-47,118,-14,-15,-36,-43,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),'ELSE':([5,7,9,12,13,15,21,36,48,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,76,78,80,81,89,92,93,95,99,101,105,106,107,110,112,113,116,117,121,122,123,124,125,128,],[-9,-39,-13,-18,-33,-37,-52,-1,-20,-49,-2,-3,-4,-5,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-10,-40,-42,-50,-51,-48,-46,-6,-53,-41,-47,119,-15,-36,-43,-11,-44,-55,-56,-45,-54,-57,-12,-19,-38,]),'ASSIGN':([7,46,96,],[44,84,44,]),'.':([7,37,45,75,94,103,115,],[45,72,45,72,72,72,72,]),'LAMBDA_START':([44,],[82,]),'AS':([48,],[86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[1,36,39,47,49,50,52,53,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,52,80,97,52,104,105,107,108,52,110,52,117,123,124,125,126,128,]),'assign_expression':([0,2,4,10,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,41,44,72,74,82,84,85,87,88,90,91,100,103,115,118,119,120,127,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,95,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'sequence':([4,],[38,]),'dots':([7,45,],[42,83,]),'expression_list':([17,19,41,82,90,100,],[51,54,77,102,109,114,]),'sequence_struct':([37,75,],[70,98,]),'seq_struct_assign_expression':([37,75,94,103,115,],[71,71,111,116,122,]),'lambda_expression':([44,],[81,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> - expression','expression',2,'p_expr_uminus','literals_parser.py',4),
  ('expression -> expression + expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',6),
  ('expression -> expression - expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',7),
  ('expression -> expression * expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',8),
  ('expression -> expression / expression','expression',3,'p_expression_binary_operators_arith','binop_parser.py',9),
  ('expression -> STRUCT { sequence_struct }','expression',4,'p_expression__new_struct','struct_parser.py',6),
  ('expression_list -> expression , expression_list','expression_list',3,'p_expression_expr_list','lambda_parser.py',7),
  ('expression_list -> expression','expression_list',1,'p_expression_expr_list','lambda_parser.py',8),
  ('expression -> NUMBER','expression',1,'p_expression_num','literals_parser.py',8),
  ('expression -> { sequence }','expression',3,'p_expression_sequence','sequences_parser.py',10),
  ('expression -> EXTEND ID { sequence_struct }','expression',5,'p_expression_struct_extend','struct_parser.py',11),
  ('expression -> LOCAL ID ASSIGN expression IN expression','expression',6,'p_expression_local','local_parser.py',12),
  ('expression -> BOOL','expression',1,'p_expression_bool','literals_parser.py',13),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','control_parser.py',14),
  ('expression -> IMPORT ID AS ID','expression',4,'p_expression_import_as','import_parser.py',14),
  ('sequence_struct -> seq_struct_assign_expression','sequence_struct',1,'p_expression_expressions_struct','struct_parser.py',15),
  ('sequence_struct -> sequence_struct ; seq_struct_assign_expression','sequence_struct',3,'p_expression_expressions_struct','struct_parser.py',16),
  ('expression -> FLOAT','expression',1,'p_expression_types_float','literals_parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','control_parser.py',18),
  ('expression -> IMPORT ID','expression',2,'p_expression_import','import_parser.py',18),
  ('sequence -> expression','sequence',1,'p_expression_seq_expr','sequences_parser.py',18),
  ('sequence -> sequence ; expression','sequence',3,'p_expression_seq_expr','sequences_parser.py',19),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',20),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',21),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',22),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',23),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',24),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',25),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',26),
  ('expression -> expression NEQS expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',27),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',28),
  ('expression -> expression NAND expression','expression',3,'p_expression_binary_operators_bool','binop_parser.py',29),
  ('expression -> STRING','expression',1,'p_expression_types_string','literals_parser.py',21),
  ('dots -> .','dots',1,'p_expression_dots','struct_parser.py',23),
  ('dots -> . dots','dots',2,'p_expression_dots','struct_parser.py',24),
  ('expression -> LOOP expression DO expression','expression',4,'p_expression_loop_do_expr','control_parser.py',24),
  ('expression -> CHAR','expression',1,'p_expression_types_char','literals_parser.py',25),
  ('expression -> FOR expression ; expression ; expression DO expression','expression',8,'p_expression_for_do_expr','control_parser.py',29),
  ('expression -> ID','expression',1,'p_expression_read_id','literals_parser.py',30),
  ('expression -> ID ( )','expression',3,'p_expression_call_args','lambda_parser.py',31),
  ('expression -> ID ( expression_list )','expression',4,'p_expression_call_args','lambda_parser.py',32),
  ('expression -> ID dots ID','expression',3,'p_expression_dot_outside','struct_parser.py',32),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while_do_expr','control_parser.py',34),
  ('expression -> ID dots ID ( )','expression',5,'p_expression_dot_outside_call','struct_parser.py',39),
  ('expression -> ID dots ID ( expression_list )','expression',6,'p_expression_dot_outside_call','struct_parser.py',40),
  ('expression -> [ expression_list ]','expression',3,'p_expression_types_array','binop_parser.py',48),
  ('expression -> ID [ NUMBER ]','expression',4,'p_expression_types_array_call','binop_parser.py',52),
  ('expression -> ( expression_list )','expression',3,'p_expression_types_list','binop_parser.py',56),
  ('expression -> NOT expression','expression',2,'p_expression_unary_operators_not','struct_parser.py',63),
  ('assign_expression -> ID ASSIGN expression','assign_expression',3,'p_expression_write_id','struct_parser.py',68),
  ('assign_expression -> ID ASSIGN lambda_expression','assign_expression',3,'p_expression_write_id','struct_parser.py',69),
  ('expression -> assign_expression','expression',1,'p_expression_write_id','struct_parser.py',70),
  ('seq_struct_assign_expression -> . assign_expression','seq_struct_assign_expression',2,'p_expression_assign','struct_parser.py',85),
  ('lambda_expression -> LAMBDA_START expression_list LAMBDA seq_struct_assign_expression','lambda_expression',4,'p_expression_lambda__in_struct','struct_parser.py',99),
  ('lambda_expression -> LAMBDA_START LAMBDA seq_struct_assign_expression','lambda_expression',3,'p_expression_lambda__in_struct','struct_parser.py',100),
  ('lambda_expression -> LAMBDA_START LAMBDA expression','lambda_expression',3,'p_expression_lambda__outisde','struct_parser.py',110),
  ('lambda_expression -> LAMBDA_START expression_list LAMBDA expression','lambda_expression',4,'p_expression_lambda__outisde','struct_parser.py',111),
]
