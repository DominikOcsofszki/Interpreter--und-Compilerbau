
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionleftorleftandnandleft=neqseqleft<>legeleft+-left*/rightnotBOOL NUMBER and eq ge le nand neqs not orexpression :   expression and expression\n                    | expression eq expression\n                    | expression \'=\' expression\n                    | expression \'>\' expression\n                    | expression \'<\' expression\n                    | expression ge expression\n                    | expression le expression\n                    | expression neqs expression\n                    | expression or expression\n                    | expression nand expression\n    expression : expression "+" expressionexpression : expression "-" expressionexpression : NUMBERexpression : not expression\n    expression : expression "*" expressionexpression : expression "/" expression expression : BOOLexpression : "(" expression ")"'
    
_lr_action_items = {'NUMBER':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'not':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'BOOL':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'(':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'$end':([1,2,4,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[0,-13,-17,-14,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-18,]),'and':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[6,-13,-17,-14,6,-1,-2,-3,-4,-5,-6,-7,-8,6,-10,-11,-12,-15,-16,-18,]),'eq':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[7,-13,-17,-14,7,7,-2,-3,-4,-5,-6,-7,-8,7,7,-11,-12,-15,-16,-18,]),'=':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[8,-13,-17,-14,8,8,-2,-3,-4,-5,-6,-7,-8,8,8,-11,-12,-15,-16,-18,]),'>':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[9,-13,-17,-14,9,9,9,9,-4,-5,-6,-7,9,9,9,-11,-12,-15,-16,-18,]),'<':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[10,-13,-17,-14,10,10,10,10,-4,-5,-6,-7,10,10,10,-11,-12,-15,-16,-18,]),'ge':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[11,-13,-17,-14,11,11,11,11,-4,-5,-6,-7,11,11,11,-11,-12,-15,-16,-18,]),'le':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[12,-13,-17,-14,12,12,12,12,-4,-5,-6,-7,12,12,12,-11,-12,-15,-16,-18,]),'neqs':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[13,-13,-17,-14,13,13,-2,-3,-4,-5,-6,-7,-8,13,13,-11,-12,-15,-16,-18,]),'or':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[14,-13,-17,-14,14,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-18,]),'nand':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[15,-13,-17,-14,15,-1,-2,-3,-4,-5,-6,-7,-8,15,-10,-11,-12,-15,-16,-18,]),'+':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[16,-13,-17,-14,16,16,16,16,16,16,16,16,16,16,16,-11,-12,-15,-16,-18,]),'-':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[17,-13,-17,-14,17,17,17,17,17,17,17,17,17,17,17,-11,-12,-15,-16,-18,]),'*':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[18,-13,-17,-14,18,18,18,18,18,18,18,18,18,18,18,18,18,-15,-16,-18,]),'/':([1,2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[19,-13,-17,-14,19,19,19,19,19,19,19,19,19,19,19,19,19,-15,-16,-18,]),')':([2,4,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,],[-13,-17,-14,36,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-15,-16,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,],[1,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression and expression','expression',3,'p_expression_binary_operators','bool_parser.py',19),
  ('expression -> expression eq expression','expression',3,'p_expression_binary_operators','bool_parser.py',20),
  ('expression -> expression = expression','expression',3,'p_expression_binary_operators','bool_parser.py',21),
  ('expression -> expression > expression','expression',3,'p_expression_binary_operators','bool_parser.py',22),
  ('expression -> expression < expression','expression',3,'p_expression_binary_operators','bool_parser.py',23),
  ('expression -> expression ge expression','expression',3,'p_expression_binary_operators','bool_parser.py',24),
  ('expression -> expression le expression','expression',3,'p_expression_binary_operators','bool_parser.py',25),
  ('expression -> expression neqs expression','expression',3,'p_expression_binary_operators','bool_parser.py',26),
  ('expression -> expression or expression','expression',3,'p_expression_binary_operators','bool_parser.py',27),
  ('expression -> expression nand expression','expression',3,'p_expression_binary_operators','bool_parser.py',28),
  ('expression -> expression + expression','expression',3,'p_expression_plus','arith_parser.py',22),
  ('expression -> expression - expression','expression',3,'p_expression_minus','arith_parser.py',26),
  ('expression -> NUMBER','expression',1,'p_expression_num','arith_parser.py',30),
  ('expression -> not expression','expression',2,'p_expression_unary_operators','bool_parser.py',33),
  ('expression -> expression * expression','expression',3,'p_expression_times','arith_parser.py',34),
  ('expression -> expression / expression','expression',3,'p_expression_div','arith_parser.py',38),
  ('expression -> BOOL','expression',1,'p_expression_bool','bool_parser.py',38),
  ('expression -> ( expression )','expression',3,'p_expression_paren','arith_parser.py',42),
]
